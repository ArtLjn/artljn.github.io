<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP切面编程基础使用</title>
    <url>/2024/07/21/web/AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="AOP-切面编程基础使用"><a href="#AOP-切面编程基础使用" class="headerlink" title="AOP 切面编程基础使用"></a>AOP 切面编程基础使用</h3><blockquote>
<p>Spring AOP（Aspect-Oriented Programming）切面编程是Spring框架提供的一种编程范式，用于增强现有的Java代码功能而无需修改原始代码。它是面向切面的编程方法，通过在应用程序的关键位置插入代码片段，实现对于特定行为的拦截和控制。</p>
</blockquote>
<h2 id="SpringBoot如何使用AOP切面编程"><a href="#SpringBoot如何使用AOP切面编程" class="headerlink" title="SpringBoot如何使用AOP切面编程?"></a>SpringBoot如何使用AOP切面编程?</h2><p>1.在pom.xml中引入AOP依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop 切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.新建一个AopAdvice类,并在类的开头加入@Aspect注解</p>
<ul>
<li>定义一个切面<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> execution (* com.personapi.controller.BlogController.getId(..))</span></span><br><span class="line"><span class="comment"> *  * controller包名.定义切面的类.定义切面的方法(任何参数)</span></span><br><span class="line"><span class="comment"> *  * com.personapi.controller.*.*(..)) 表示定义controller包下所有类，所有方法，任何参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution (* com.personapi.controller.BlogController.getId(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointCut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
3.@Before注解<br>@Before表示在方法执行之前调用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 调用之前执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Before(&quot;myPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">(JoinPoint jp)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> jp.getTarget().getClass().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line">    Object[] args = jp.getArgs();</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;传递的参数为:&quot;</span> + mapper.writeValueAsString(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
4.@AfterReturning注解<br>该方法表示后置通知，方法执行之后执行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 调用之后执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;myPointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">(JoinPoint jp, Object result)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> jp.getTarget().getClass().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    log.info(<span class="string">&quot;调用后:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;返回值:&quot;</span> + mapper.writeValueAsString(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>5.@Around注解<br>@Around注解可以用来在调用一个具体方法前和调用后来完成一些具体的任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> 环绕执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Around(&quot;myPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pjp.getTarget().getClass().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pjp.getSignature().getName();</span><br><span class="line">    Object[] args = pjp.getArgs();</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;传递的参数为:&quot;</span> + mapper.writeValueAsString(args));</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;返回值:&quot;</span> + mapper.writeValueAsString(obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.AopAdvice完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAdvice</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> execution (* com.personapi.controller.BlogController.getId(..))</span></span><br><span class="line"><span class="comment">     *  * controller包名.定义切面的类.定义切面的方法(任何参数)</span></span><br><span class="line"><span class="comment">     *  * com.personapi.controller.*.*(..)) 表示定义controller包下所有类，所有方法，任何参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution (* com.personapi.controller.BlogController.getId(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointCut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 调用之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">(JoinPoint jp)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> jp.getTarget().getClass().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;传递的参数为:&quot;</span> + mapper.writeValueAsString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 调用之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;myPointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">(JoinPoint jp, Object result)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> jp.getTarget().getClass().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        log.info(<span class="string">&quot;调用后:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;返回值:&quot;</span> + mapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> 环绕执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pjp.getTarget().getClass().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pjp.getSignature().getName();</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;传递的参数为:&quot;</span> + mapper.writeValueAsString(args));</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;调用前:&quot;</span> + className + <span class="string">&quot;:&quot;</span> + methodName + <span class="string">&quot;返回值:&quot;</span> + mapper.writeValueAsString(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang接入Oauth2</title>
    <url>/2024/12/22/web/Golang%E6%8E%A5%E5%85%A5Oauth2/</url>
    <content><![CDATA[<h1 id="1-GitHub-OAuth2"><a href="#1-GitHub-OAuth2" class="headerlink" title="1. GitHub OAuth2"></a>1. GitHub OAuth2</h1><h2 id="1-1-GitHub-OAuth2-接入流程"><a href="#1-1-GitHub-OAuth2-接入流程" class="headerlink" title="1.1 GitHub OAuth2 接入流程"></a>1.1 GitHub OAuth2 接入流程</h2><p>在”Authorization callback URL”这里填写你的回调地址，可以是你的域名，也可以是你本地的回调地址，比如 <code>http://localhost:8080/callback</code>。相关配置填写之后，点击”Register application”创建即可。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-21-04-49.png"
                       
                 ><br>应用创建完毕，会生成客户端 ID 和客户端密钥。客户端密钥需要单独生成，点击”Generate  a new client secret”生成一个密钥即可。<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-20-34-15.png"
                       
                 ></p>
<h2 id="1-2-GitHub-OAuth2-接入代码"><a href="#1-2-GitHub-OAuth2-接入代码" class="headerlink" title="1.2 GitHub OAuth2 接入代码"></a>1.2 GitHub OAuth2 接入代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;golang.org/x/oauth2&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/oauth2/github&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	githubOauthConfig = &amp;oauth2.Config&#123;</span><br><span class="line">		ClientID:     <span class="string">&quot;Ov23liHgJhetSUt45V9r&quot;</span>,</span><br><span class="line">		ClientSecret: <span class="string">&quot;ClientSecret&quot;</span>, <span class="comment">// 请替换为自己的ClientSecret</span></span><br><span class="line">		RedirectURL:  <span class="string">&quot;http://localhost:8080/callback&quot;</span>,</span><br><span class="line">		Endpoint:     github.Endpoint,</span><br><span class="line">		Scopes:       []<span class="type">string</span>&#123;<span class="string">&quot;user:email&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	oauthStateString = <span class="string">&quot;random&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, handleMain)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/login&quot;</span>, handleGitHubLogin)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/callback&quot;</span>, handleGitHubCallback)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/logout&quot;</span>, handleLogout)</span><br><span class="line">	log.Println(<span class="string">&quot;Started running on http://localhost:8080&quot;</span>)</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMain</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> htmlIndex = <span class="string">`&lt;html&gt;&lt;body&gt;&lt;a href=&quot;/login&quot;&gt;Log in with GitHub&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line">	io.WriteString(w, htmlIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGitHubLogin</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	url := githubOauthConfig.AuthCodeURL(oauthStateString)</span><br><span class="line">	http.Redirect(w, r, url, http.StatusTemporaryRedirect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GitHubUser <span class="keyword">struct</span> &#123;</span><br><span class="line">	Login     <span class="type">string</span> <span class="string">`json:&quot;login&quot;`</span></span><br><span class="line">	ID        <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	AvatarURL <span class="type">string</span> <span class="string">`json:&quot;avatar_url&quot;`</span></span><br><span class="line">	HTMLURL   <span class="type">string</span> <span class="string">`json:&quot;html_url&quot;`</span></span><br><span class="line">	Name      <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Company   <span class="type">string</span> <span class="string">`json:&quot;company&quot;`</span></span><br><span class="line">	Blog      <span class="type">string</span> <span class="string">`json:&quot;blog&quot;`</span></span><br><span class="line">	Location  <span class="type">string</span> <span class="string">`json:&quot;location&quot;`</span></span><br><span class="line">	Email     <span class="type">string</span> <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">	Bio       <span class="type">string</span> <span class="string">`json:&quot;bio&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGitHubCallback</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> r.FormValue(<span class="string">&quot;state&quot;</span>) != oauthStateString &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;invalid oauth state&quot;</span>)</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, http.StatusTemporaryRedirect)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	token, err := githubOauthConfig.Exchange(context.Background(), r.FormValue(<span class="string">&quot;code&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;code exchange failed: &quot;</span>, err)</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, http.StatusTemporaryRedirect)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	client := githubOauthConfig.Client(context.Background(), token)</span><br><span class="line">	resp, err := client.Get(<span class="string">&quot;https://api.github.com/user&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;failed getting user info: &quot;</span>, err)</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, http.StatusTemporaryRedirect)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> user GitHubUser</span><br><span class="line">	<span class="keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;failed decoding response body: &quot;</span>, err)</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, http.StatusTemporaryRedirect)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 格式化输出用户信息</span></span><br><span class="line">	fmt.Fprintf(w, <span class="string">`&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;User Info&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Login:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;ID:&lt;/strong&gt; %d&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Avatar URL:&lt;/strong&gt; &lt;img   src=&quot;%s&quot;  alt=&quot;avatar&quot; &gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Profile URL:&lt;/strong&gt; &lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Company:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Blog:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt; %s&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;&lt;/html&gt;`</span>,</span><br><span class="line">		user.Login,</span><br><span class="line">		user.ID,</span><br><span class="line">		user.AvatarURL,</span><br><span class="line">		user.HTMLURL, user.HTMLURL,</span><br><span class="line">		user.Name,</span><br><span class="line">		user.Company,</span><br><span class="line">		user.Blog,</span><br><span class="line">		user.Location,</span><br><span class="line">		user.Email,</span><br><span class="line">		user.Bio)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleLogout</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 清除会话cookie</span></span><br><span class="line">	http.SetCookie(w, &amp;http.Cookie&#123;</span><br><span class="line">		Name:   <span class="string">&quot;github_oauth_token&quot;</span>,</span><br><span class="line">		Value:  <span class="string">&quot;&quot;</span>,</span><br><span class="line">		Path:   <span class="string">&quot;/&quot;</span>,</span><br><span class="line">		MaxAge: <span class="number">-1</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, http.StatusTemporaryRedirect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-授权登录"><a href="#1-3-授权登录" class="headerlink" title="1.3 授权登录"></a>1.3 授权登录</h2><p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-21-14-56.png"
                       
                 ><br>授权成功后，会跳转到回调地址，并返回授权码，然后通过授权码获取access_token，最后通过access_token获取用户信息。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-21-16-13.png"
                       
                 ></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootJWT认证完整实现指南</title>
    <url>/2025/09/22/web/SpringBootJWT%E8%AE%A4%E8%AF%81%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>在现代Web应用开发中，JWT（JSON Web Token）已经成为最流行的身份认证解决方案之一。本文将基于Spring Boot项目实战，详细介绍如何实现一套完整的JWT认证系统，包括双Token机制、安全配置、最佳实践等内容。</p>
</blockquote>
<h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul>
<li><a href="#1-jwt%E6%A6%82%E8%BF%B0">1. JWT概述</a></li>
<li><a href="#2-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">2. 技术架构设计</a></li>
<li><a href="#3-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">3. 依赖配置</a></li>
<li><a href="#4-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0">4. 核心组件实现</a></li>
<li><a href="#5-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE">5. 安全配置</a></li>
<li><a href="#6-api%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0">6. API接口实现</a></li>
<li><a href="#7-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8">7. 客户端使用</a></li>
<li><a href="#8-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">8. 最佳实践</a></li>
<li><a href="#9-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">9. 常见问题</a></li>
<li><a href="#10-%E6%80%BB%E7%BB%93">10. 总结</a></li>
</ul>
<h2 id="1-JWT概述"><a href="#1-JWT概述" class="headerlink" title="1. JWT概述"></a>1. JWT概述</h2><h3 id="1-1-什么是JWT"><a href="#1-1-什么是JWT" class="headerlink" title="1.1 什么是JWT"></a>1.1 什么是JWT</h3><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间以JSON对象的形式安全地传输信息。</p>
<h3 id="1-2-JWT结构"><a href="#1-2-JWT结构" class="headerlink" title="1.2 JWT结构"></a>1.2 JWT结构</h3><p>JWT由三部分组成，用点（.）分隔：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Header（头部）</strong>：包含令牌类型和加密算法</li>
<li><strong>Payload（载荷）</strong>：包含声明（claims）</li>
<li><strong>Signature（签名）</strong>：用于验证令牌的完整性</li>
</ul>
<h3 id="1-3-JWT优势"><a href="#1-3-JWT优势" class="headerlink" title="1.3 JWT优势"></a>1.3 JWT优势</h3><p>✅ <strong>无状态</strong>：服务器不需要存储会话信息<br>✅ <strong>跨域支持</strong>：支持跨域认证<br>✅ <strong>扩展性强</strong>：易于水平扩展<br>✅ <strong>性能优良</strong>：减少数据库查询<br>✅ <strong>移动友好</strong>：适合移动应用开发</p>
<h3 id="1-4-双Token机制"><a href="#1-4-双Token机制" class="headerlink" title="1.4 双Token机制"></a>1.4 双Token机制</h3><p>为了平衡安全性和用户体验，我们采用双Token机制：</p>
<ul>
<li><strong>Access Token（访问令牌）</strong>：短期有效（2小时）</li>
<li><strong>Refresh Token（刷新令牌）</strong>：长期有效（7天）</li>
</ul>
<h2 id="2-技术架构设计"><a href="#2-技术架构设计" class="headerlink" title="2. 技术架构设计"></a>2. 技术架构设计</h2><h3 id="2-1-整体架构图"><a href="#2-1-整体架构图" class="headerlink" title="2.1 整体架构图"></a>2.1 整体架构图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────────────────┐</span><br><span class="line">│                    JWT认证系统架构                            │</span><br><span class="line">├─────────────────────────────────────────────────────────────┤</span><br><span class="line">│                                                             │</span><br><span class="line">│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐      │</span><br><span class="line">│  │  前端应用    │    │  移动应用    │    │  第三方应用  │      │</span><br><span class="line">│  └─────────────┘    └─────────────┘    └─────────────┘      │</span><br><span class="line">│         │                   │                   │           │</span><br><span class="line">│         └───────────────────┼───────────────────┘           │</span><br><span class="line">│                             │                               │</span><br><span class="line">│                             ▼                               │</span><br><span class="line">│  ┌─────────────────────────────────────────────────────────┐ │</span><br><span class="line">│  │                    API网关层                            │ │</span><br><span class="line">│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │ │</span><br><span class="line">│  │  │ JWT拦截器   │  │ 异常处理器  │  │ 跨域配置    │     │ │</span><br><span class="line">│  │  └─────────────┘  └─────────────┘  └─────────────┘     │ │</span><br><span class="line">│  └─────────────────────────────────────────────────────────┘ │</span><br><span class="line">│                             │                               │</span><br><span class="line">│                             ▼                               │</span><br><span class="line">│  ┌─────────────────────────────────────────────────────────┐ │</span><br><span class="line">│  │                    业务服务层                            │ │</span><br><span class="line">│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │ │</span><br><span class="line">│  │  │ 用户服务    │  │ JWT工具类   │  │ 认证服务    │     │ │</span><br><span class="line">│  │  └─────────────┘  └─────────────┘  └─────────────┘     │ │</span><br><span class="line">│  └─────────────────────────────────────────────────────────┘ │</span><br><span class="line">│                             │                               │</span><br><span class="line">│                             ▼                               │</span><br><span class="line">│  ┌─────────────────────────────────────────────────────────┐ │</span><br><span class="line">│  │                    数据存储层                            │ │</span><br><span class="line">│  │       MySQL数据库        Redis缓存        配置文件      │ │</span><br><span class="line">│  └─────────────────────────────────────────────────────────┘ │</span><br><span class="line">└─────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3 id="2-2-核心组件说明"><a href="#2-2-核心组件说明" class="headerlink" title="2.2 核心组件说明"></a>2.2 核心组件说明</h3><table>
<thead>
<tr>
<th>组件</th>
<th>功能</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>JwtUtil</strong></td>
<td>JWT工具类</td>
<td>Token生成、解析、验证</td>
</tr>
<tr>
<td><strong>JwtConfig</strong></td>
<td>JWT配置类</td>
<td>配置参数管理</td>
</tr>
<tr>
<td><strong>JwtInterceptor</strong></td>
<td>JWT拦截器</td>
<td>自动验证Token</td>
</tr>
<tr>
<td><strong>WebMvcConfig</strong></td>
<td>Web配置类</td>
<td>注册拦截器</td>
</tr>
<tr>
<td><strong>UserService</strong></td>
<td>用户服务</td>
<td>认证业务逻辑</td>
</tr>
</tbody></table>
<h2 id="3-依赖配置"><a href="#3-依赖配置" class="headerlink" title="3. 依赖配置"></a>3. 依赖配置</h2><h3 id="3-1-Maven依赖"><a href="#3-1-Maven依赖" class="headerlink" title="3.1 Maven依赖"></a>3.1 Maven依赖</h3><p>在<code>pom.xml</code>中添加JWT相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jackson JSR310 模块，支持 Java 8 时间类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3.2 配置文件"></a>3.2 配置文件</h3><p>在<code>application.yml</code>中添加JWT配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JWT配置</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">surveymaster-jwt-secret-key-for-authentication-very-secure-2025</span></span><br><span class="line">  <span class="attr">access-token-expiration:</span> <span class="number">7200000</span>      <span class="comment"># 访问令牌过期时间（毫秒）- 2小时</span></span><br><span class="line">  <span class="attr">refresh-token-expiration:</span> <span class="number">604800000</span>   <span class="comment"># 刷新令牌过期时间（毫秒）- 7天</span></span><br><span class="line">  <span class="attr">token-header:</span> <span class="string">Authorization</span>           <span class="comment"># token请求头名称</span></span><br><span class="line">  <span class="attr">token-prefix:</span> <span class="string">&quot;Bearer &quot;</span>               <span class="comment"># token前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jackson 配置（支持 Java 8 时间类型）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">      <span class="attr">write-dates-as-timestamps:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">deserialization:</span></span><br><span class="line">      <span class="attr">fail-on-unknown-properties:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="4-核心组件实现"><a href="#4-核心组件实现" class="headerlink" title="4. 核心组件实现"></a>4. 核心组件实现</h2><h3 id="4-1-JWT工具类"><a href="#4-1-JWT工具类" class="headerlink" title="4.1 JWT工具类"></a>4.1 JWT工具类</h3><p>创建功能完善的JWT工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret:surveymaster-jwt-secret-key-for-authentication-very-secure&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.access-token-expiration:7200000&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long accessTokenExpiration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.refresh-token-expiration:604800000&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long refreshTokenExpiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取签名密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SecretKey <span class="title function_">getSigningKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Keys.hmacShaKeyFor(secret.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成访问令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateAccessToken</span><span class="params">(Long userId, String username)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        claims.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        claims.put(<span class="string">&quot;tokenType&quot;</span>, <span class="string">&quot;access&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> createToken(claims, username, accessTokenExpiration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成刷新令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateRefreshToken</span><span class="params">(Long userId, String username)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        claims.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        claims.put(<span class="string">&quot;tokenType&quot;</span>, <span class="string">&quot;refresh&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> createToken(claims, username, refreshTokenExpiration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createToken</span><span class="params">(Map&lt;String, Object&gt; claims, String subject, Long expiration)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiryDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(now.getTime() + expiration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setExpiration(expiryDate)</span><br><span class="line">                .signWith(getSigningKey(), SignatureAlgorithm.HS256)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsernameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClaimFromToken(token, Claims::getSubject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getUserIdFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getAllClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(claims.get(<span class="string">&quot;userId&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证访问令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">validateAccessToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tokenType</span> <span class="operator">=</span> getTokenTypeFromToken(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;access&quot;</span>.equals(tokenType) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证刷新令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">validateRefreshToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tokenType</span> <span class="operator">=</span> getTokenTypeFromToken(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;refresh&quot;</span>.equals(tokenType) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 其他辅助方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-JWT配置类"><a href="#4-2-JWT配置类" class="headerlink" title="4.2 JWT配置类"></a>4.2 JWT配置类</h3><p>创建配置类管理JWT参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;surveymaster-jwt-secret-key-for-authentication-very-secure&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">accessTokenExpiration</span> <span class="operator">=</span> <span class="number">7200000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">refreshTokenExpiration</span> <span class="operator">=</span> <span class="number">604800000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">tokenHeader</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">tokenPrefix</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-JWT拦截器"><a href="#4-3-JWT拦截器" class="headerlink" title="4.3 JWT拦截器"></a>4.3 JWT拦截器</h3><p>实现自动验证Token的拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtConfig jwtConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtInterceptor</span><span class="params">(JwtUtil jwtUtil, JwtConfig jwtConfig, ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">        <span class="built_in">this</span>.jwtConfig = jwtConfig;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getTokenFromRequest(request);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleUnauthorized(response, <span class="string">&quot;缺少认证token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 验证token是否为有效的访问令牌</span></span><br><span class="line">            <span class="keyword">if</span> (!jwtUtil.validateAccessToken(token)) &#123;</span><br><span class="line">                <span class="keyword">return</span> handleUnauthorized(response, <span class="string">&quot;无效的访问令牌&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从token中获取用户信息并设置到请求属性中</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtil.getUsernameFromToken(token);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> jwtUtil.getUserIdFromToken(token);</span><br><span class="line">            </span><br><span class="line">            request.setAttribute(<span class="string">&quot;currentUsername&quot;</span>, username);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;currentUserId&quot;</span>, userId);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleUnauthorized(response, <span class="string">&quot;token验证失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求中获取token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getTokenFromRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader(jwtConfig.getTokenHeader());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(jwtConfig.getTokenPrefix())) &#123;</span><br><span class="line">            <span class="keyword">return</span> bearerToken.substring(jwtConfig.getTokenPrefix().length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理未授权的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleUnauthorized</span><span class="params">(HttpServletResponse response, String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        ApiResponse&lt;Object&gt; apiResponse = ApiResponse.error(ErrorCode.UNAUTHORIZED, message);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonResponse</span> <span class="operator">=</span> objectMapper.writeValueAsString(apiResponse);</span><br><span class="line">        </span><br><span class="line">        response.getWriter().write(jsonResponse);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-Web配置类"><a href="#4-4-Web配置类" class="headerlink" title="4.4 Web配置类"></a>4.4 Web配置类</h3><p>注册JWT拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtInterceptor jwtInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebMvcConfig</span><span class="params">(JwtInterceptor jwtInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtInterceptor = jwtInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(jwtInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/api/**&quot;</span>)                    <span class="comment">// 拦截所有API路径</span></span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/api/user/login&quot;</span>,                     <span class="comment">// 排除登录接口</span></span><br><span class="line">                        <span class="string">&quot;/api/user/register&quot;</span>,                  <span class="comment">// 排除注册接口</span></span><br><span class="line">                        <span class="string">&quot;/api/user/refresh-token&quot;</span>,            <span class="comment">// 排除刷新token接口</span></span><br><span class="line">                        <span class="string">&quot;/api/health/**&quot;</span>,                     <span class="comment">// 排除健康检查接口</span></span><br><span class="line">                        <span class="string">&quot;/api/public/**&quot;</span>                      <span class="comment">// 排除公共接口</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-安全配置"><a href="#5-安全配置" class="headerlink" title="5. 安全配置"></a>5. 安全配置</h2><h3 id="5-1-登录响应对象"><a href="#5-1-登录响应对象" class="headerlink" title="5.1 登录响应对象"></a>5.1 登录响应对象</h3><p>设计包含Token信息的响应对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginResponse</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refreshToken;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问令牌类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">tokenType</span> <span class="operator">=</span> <span class="string">&quot;Bearer&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问令牌过期时间（毫秒时间戳）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long expiresIn;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginResponse</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginResponse</span><span class="params">(User user, String accessToken, String refreshToken, Long expiresIn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.accessToken = accessToken;</span><br><span class="line">        <span class="built_in">this</span>.refreshToken = refreshToken;</span><br><span class="line">        <span class="built_in">this</span>.expiresIn = expiresIn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-用户服务实现"><a href="#5-2-用户服务实现" class="headerlink" title="5.2 用户服务实现"></a>5.2 用户服务实现</h3><p>实现包含JWT功能的用户服务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtConfig jwtConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserMapper userMapper, JwtUtil jwtUtil, JwtConfig jwtConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userMapper = userMapper;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">        <span class="built_in">this</span>.jwtConfig = jwtConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LoginResponse <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 验证用户凭据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByUsernameAndPassword(username, MD5Util.md5(password));</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.USER_PASSWORD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 生成JWT token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> jwtUtil.generateAccessToken((<span class="type">long</span>) user.getId(), user.getUsername());</span><br><span class="line">        <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> jwtUtil.generateRefreshToken((<span class="type">long</span>) user.getId(), user.getUsername());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 返回登录响应信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginResponse</span>(user, accessToken, refreshToken, jwtConfig.getAccessTokenExpiration());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LoginResponse <span class="title function_">refreshAccessToken</span><span class="params">(String refreshToken)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 验证刷新令牌的有效性</span></span><br><span class="line">        <span class="keyword">if</span> (!jwtUtil.validateRefreshToken(refreshToken)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.TOKEN_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 从刷新令牌中获取用户信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtil.getUsernameFromToken(refreshToken);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> jwtUtil.getUserIdFromToken(refreshToken);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 生成新的访问令牌和刷新令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newAccessToken</span> <span class="operator">=</span> jwtUtil.generateAccessToken(userId, username);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newRefreshToken</span> <span class="operator">=</span> jwtUtil.generateRefreshToken(userId, username);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 查找用户信息</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果查不到用户，创建一个简单的用户对象用于响应</span></span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setId(userId.intValue());</span><br><span class="line">                user.setUsername(username);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5. 返回新的登录响应</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginResponse</span>(user, newAccessToken, newRefreshToken, jwtConfig.getAccessTokenExpiration());</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.TOKEN_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-API接口实现"><a href="#6-API接口实现" class="headerlink" title="6. API接口实现"></a>6. API接口实现</h2><h3 id="6-1-用户控制器"><a href="#6-1-用户控制器" class="headerlink" title="6.1 用户控制器"></a>6.1 用户控制器</h3><p>实现JWT相关的API接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;用户登录&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;LoginResponse&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserLogin userLogin)</span> &#123;</span><br><span class="line">        <span class="type">LoginResponse</span> <span class="variable">loginResponse</span> <span class="operator">=</span> userService.login(userLogin.getUsername(), userLogin.getPassword());</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;登录成功&quot;</span>, loginResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新访问令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/refresh-token&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;刷新令牌&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;LoginResponse&gt; <span class="title function_">refreshToken</span><span class="params">(<span class="meta">@RequestParam(&quot;refreshToken&quot;)</span> String refreshToken)</span> &#123;</span><br><span class="line">        <span class="type">LoginResponse</span> <span class="variable">loginResponse</span> <span class="operator">=</span> userService.refreshAccessToken(refreshToken);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;令牌刷新成功&quot;</span>, loginResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;用户注册&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserRegister userRegister)</span> &#123;</span><br><span class="line">        userService.register(userRegister);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-测试控制器"><a href="#6-2-测试控制器" class="headerlink" title="6.2 测试控制器"></a>6.2 测试控制器</h3><p>创建测试JWT功能的控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/protected&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;访问受保护资源&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">protectedEndpoint</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 从请求属性中获取当前用户信息（由JWT拦截器设置）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUsername</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;currentUsername&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentUserId</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;currentUserId&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="string">&quot;欢迎，%s (用户ID: %d)！这是一个受JWT保护的资源。&quot;</span>, </span><br><span class="line">                                      currentUsername, currentUserId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;访问成功&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user-info&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;获取当前用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Object&gt; <span class="title function_">getCurrentUserInfo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUsername</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;currentUsername&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentUserId</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;currentUserId&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> currentUsername;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> currentUserId;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;通过JWT认证获取的用户信息&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;获取用户信息成功&quot;</span>, userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-客户端使用"><a href="#7-客户端使用" class="headerlink" title="7. 客户端使用"></a>7. 客户端使用</h2><h3 id="7-1-登录获取Token"><a href="#7-1-登录获取Token" class="headerlink" title="7.1 登录获取Token"></a>7.1 登录获取Token</h3><p><strong>请求示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/api/user/login \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;username&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">    &quot;password&quot;: &quot;123456&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>响应示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-09-22 10:30:00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;accessToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidGVzdCIsInRva2VuVHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3QiLCJpYXQiOjE2OTU0MjcyMDAsImV4cCI6MTY5NTQzNDQwMH0.abc123...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refreshToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidGVzdCIsInRva2VuVHlwZSI6InJlZnJlc2giLCJzdWIiOiJ0ZXN0IiwiaWF0IjoxNjk1NDI3MjAwLCJleHAiOjE2OTYwMzIwMDB9.def456...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tokenType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expiresIn&quot;</span><span class="punctuation">:</span> <span class="number">7200000</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-使用Token访问受保护API"><a href="#7-2-使用Token访问受保护API" class="headerlink" title="7.2 使用Token访问受保护API"></a>7.2 使用Token访问受保护API</h3><p><strong>请求示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/api/jwt/protected \</span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidGVzdCIsInRva2VuVHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3QiLCJpYXQiOjE2OTU0MjcyMDAsImV4cCI6MTY5NTQzNDQwMH0.abc123...&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>成功响应：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;访问成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;欢迎，admin (用户ID: 1)！这是一个受JWT保护的资源。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>未授权响应：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COMM-0201&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;缺少认证token&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-刷新Token"><a href="#7-3-刷新Token" class="headerlink" title="7.3 刷新Token"></a>7.3 刷新Token</h3><p><strong>请求示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/api/user/refresh-token \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span> \</span><br><span class="line">  -d <span class="string">&quot;refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidGVzdCIsInRva2VuVHlwZSI6InJlZnJlc2giLCJzdWIiOiJ0ZXN0IiwiaWF0IjoxNjk1NDI3MjAwLCJleHAiOjE2OTYwMzIwMDB9.def456...&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>成功响应：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;令牌刷新成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;accessToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.new_access_token...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refreshToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.new_refresh_token...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tokenType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expiresIn&quot;</span><span class="punctuation">:</span> <span class="number">7200000</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-前端集成示例"><a href="#7-4-前端集成示例" class="headerlink" title="7.4 前端集成示例"></a>7.4 前端集成示例</h3><p><strong>JavaScript&#x2F;Vue.js示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_BASE_URL</span> = <span class="string">&#x27;http://localhost:8080/api&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TokenManager</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">setTokens</span>(<span class="params">accessToken, refreshToken</span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, accessToken);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>, refreshToken);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getRefreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">clearTokens</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title class_">TokenManager</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">    <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">            <span class="comment">// Token过期，尝试刷新</span></span><br><span class="line">            <span class="keyword">const</span> refreshToken = <span class="title class_">TokenManager</span>.<span class="title function_">getRefreshToken</span>();</span><br><span class="line">            <span class="keyword">if</span> (refreshToken) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;API_BASE_URL&#125;</span>/user/refresh-token`</span>, </span><br><span class="line">                        <span class="string">`refreshToken=<span class="subst">$&#123;refreshToken&#125;</span>`</span>, </span><br><span class="line">                        &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;&#125;</span><br><span class="line">                    );</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">const</span> &#123; accessToken, <span class="attr">refreshToken</span>: newRefreshToken &#125; = response.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">                    <span class="title class_">TokenManager</span>.<span class="title function_">setTokens</span>(accessToken, newRefreshToken);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 重试原请求</span></span><br><span class="line">                    error.<span class="property">config</span>.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;accessToken&#125;</span>`</span>;</span><br><span class="line">                    <span class="keyword">return</span> axios.<span class="title function_">request</span>(error.<span class="property">config</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (refreshError) &#123;</span><br><span class="line">                    <span class="comment">// 刷新失败，跳转到登录页</span></span><br><span class="line">                    <span class="title class_">TokenManager</span>.<span class="title function_">clearTokens</span>();</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 没有刷新Token，跳转到登录页</span></span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;API_BASE_URL&#125;</span>/user/login`</span>, &#123;</span><br><span class="line">            username,</span><br><span class="line">            password</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> &#123; accessToken, refreshToken &#125; = response.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">        <span class="title class_">TokenManager</span>.<span class="title function_">setTokens</span>(accessToken, refreshToken);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">TokenManager</span>.<span class="title function_">clearTokens</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>React示例：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证上下文</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AuthContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useAuth</span> = (<span class="params"></span>) =&gt; <span class="title function_">useContext</span>(<span class="title class_">AuthContext</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AuthProvider</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">            <span class="comment">// 验证token有效性</span></span><br><span class="line">            <span class="title function_">validateToken</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">validateToken</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/jwt/user-info&#x27;</span>);</span><br><span class="line">            <span class="title function_">setUser</span>(response.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params">username, password</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/user/login&#x27;</span>, &#123;</span><br><span class="line">            username,</span><br><span class="line">            password</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> &#123; user, accessToken, refreshToken &#125; = response.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, accessToken);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>, refreshToken);</span><br><span class="line">        <span class="title function_">setUser</span>(user);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">logout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">        <span class="title function_">setUser</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = &#123;</span><br><span class="line">        user,</span><br><span class="line">        login,</span><br><span class="line">        logout,</span><br><span class="line">        loading</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">AuthContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">AuthContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="8-最佳实践"><a href="#8-最佳实践" class="headerlink" title="8. 最佳实践"></a>8. 最佳实践</h2><h3 id="8-1-安全配置建议"><a href="#8-1-安全配置建议" class="headerlink" title="8.1 安全配置建议"></a>8.1 安全配置建议</h3><h4 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">$&#123;JWT_SECRET:your-very-secure-secret-key-here&#125;</span></span><br><span class="line">  <span class="attr">access-token-expiration:</span> <span class="string">$&#123;JWT_ACCESS_EXPIRATION:7200000&#125;</span></span><br><span class="line">  <span class="attr">refresh-token-expiration:</span> <span class="string">$&#123;JWT_REFRESH_EXPIRATION:604800000&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="密钥要求"><a href="#密钥要求" class="headerlink" title="密钥要求"></a>密钥要求</h4><ul>
<li><strong>长度</strong>：至少256位（32字符）</li>
<li><strong>复杂性</strong>：包含字母、数字、特殊字符</li>
<li><strong>唯一性</strong>：每个环境使用不同密钥</li>
<li><strong>定期更换</strong>：建议每季度更换一次</li>
</ul>
<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生产环境环境变量</span></span><br><span class="line"><span class="built_in">export</span> JWT_SECRET=<span class="string">&quot;your-production-secret-key-very-secure-2025&quot;</span></span><br><span class="line"><span class="built_in">export</span> JWT_ACCESS_EXPIRATION=7200000</span><br><span class="line"><span class="built_in">export</span> JWT_REFRESH_EXPIRATION=604800000</span><br></pre></td></tr></table></figure>

<h3 id="8-2-Token过期时间策略"><a href="#8-2-Token过期时间策略" class="headerlink" title="8.2 Token过期时间策略"></a>8.2 Token过期时间策略</h3><table>
<thead>
<tr>
<th>场景</th>
<th>访问令牌</th>
<th>刷新令牌</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Web应用</strong></td>
<td>2小时</td>
<td>7天</td>
<td>平衡安全性和用户体验</td>
</tr>
<tr>
<td><strong>移动应用</strong></td>
<td>4小时</td>
<td>30天</td>
<td>减少用户登录频率</td>
</tr>
<tr>
<td><strong>API服务</strong></td>
<td>1小时</td>
<td>24小时</td>
<td>高安全要求</td>
</tr>
<tr>
<td><strong>内部系统</strong></td>
<td>8小时</td>
<td>7天</td>
<td>办公时间内免登录</td>
</tr>
</tbody></table>
<h3 id="8-3-错误处理最佳实践"><a href="#8-3-错误处理最佳实践" class="headerlink" title="8.3 错误处理最佳实践"></a>8.3 错误处理最佳实践</h3><h4 id="统一错误码"><a href="#统一错误码" class="headerlink" title="统一错误码"></a>统一错误码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">JwtErrorCode</span> &#123;</span><br><span class="line">    TOKEN_MISSING(<span class="string">&quot;JWT001&quot;</span>, <span class="string">&quot;缺少认证令牌&quot;</span>),</span><br><span class="line">    TOKEN_EXPIRED(<span class="string">&quot;JWT002&quot;</span>, <span class="string">&quot;令牌已过期&quot;</span>),</span><br><span class="line">    TOKEN_INVALID(<span class="string">&quot;JWT003&quot;</span>, <span class="string">&quot;无效的令牌&quot;</span>),</span><br><span class="line">    TOKEN_MALFORMED(<span class="string">&quot;JWT004&quot;</span>, <span class="string">&quot;令牌格式错误&quot;</span>),</span><br><span class="line">    ACCESS_DENIED(<span class="string">&quot;JWT005&quot;</span>, <span class="string">&quot;访问被拒绝&quot;</span>),</span><br><span class="line">    REFRESH_TOKEN_EXPIRED(<span class="string">&quot;JWT006&quot;</span>, <span class="string">&quot;刷新令牌已过期&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// constructor, getters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(ExpiredJwtException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; <span class="title function_">handleExpiredJwt</span><span class="params">(ExpiredJwtException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED)</span><br><span class="line">                .body(ApiResponse.error(JwtErrorCode.TOKEN_EXPIRED));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(MalformedJwtException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; <span class="title function_">handleMalformedJwt</span><span class="params">(MalformedJwtException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED)</span><br><span class="line">                .body(ApiResponse.error(JwtErrorCode.TOKEN_MALFORMED));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-性能优化建议"><a href="#8-4-性能优化建议" class="headerlink" title="8.4 性能优化建议"></a>8.4 性能优化建议</h3><h4 id="缓存用户信息"><a href="#缓存用户信息" class="headerlink" title="缓存用户信息"></a>缓存用户信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCacheService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_CACHE_KEY</span> <span class="operator">=</span> <span class="string">&quot;user:info:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Duration</span> <span class="variable">CACHE_DURATION</span> <span class="operator">=</span> Duration.ofMinutes(<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserFromCache</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_CACHE_KEY + userId;</span><br><span class="line">        <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_CACHE_KEY + user.getId();</span><br><span class="line">        redisTemplate.opsForValue().set(key, user, CACHE_DURATION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Token黑名单"><a href="#Token黑名单" class="headerlink" title="Token黑名单"></a>Token黑名单</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBlacklistService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLACKLIST_KEY</span> <span class="operator">=</span> <span class="string">&quot;jwt:blacklist:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToBlacklist</span><span class="params">(String token, <span class="type">long</span> expiration)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLACKLIST_KEY + DigestUtils.md5Hex(token);</span><br><span class="line">        redisTemplate.opsForValue().set(key, <span class="string">&quot;true&quot;</span>, </span><br><span class="line">                Duration.ofMillis(expiration - System.currentTimeMillis()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBlacklisted</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLACKLIST_KEY + DigestUtils.md5Hex(token);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-5-监控和日志"><a href="#8-5-监控和日志" class="headerlink" title="8.5 监控和日志"></a>8.5 监控和日志</h3><h4 id="JWT监控指标"><a href="#JWT监控指标" class="headerlink" title="JWT监控指标"></a>JWT监控指标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtMetrics</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Counter</span> <span class="variable">tokenGeneratedCounter</span> <span class="operator">=</span> Counter.builder(<span class="string">&quot;jwt.token.generated&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;生成的JWT令牌数量&quot;</span>)</span><br><span class="line">            .register(Metrics.globalRegistry);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Counter</span> <span class="variable">tokenValidatedCounter</span> <span class="operator">=</span> Counter.builder(<span class="string">&quot;jwt.token.validated&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;验证的JWT令牌数量&quot;</span>)</span><br><span class="line">            .tag(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            .register(Metrics.globalRegistry);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Timer</span> <span class="variable">tokenValidationTimer</span> <span class="operator">=</span> Timer.builder(<span class="string">&quot;jwt.token.validation.duration&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;JWT令牌验证耗时&quot;</span>)</span><br><span class="line">            .register(Metrics.globalRegistry);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordTokenGenerated</span><span class="params">()</span> &#123;</span><br><span class="line">        tokenGeneratedCounter.increment();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordTokenValidation</span><span class="params">(<span class="type">boolean</span> success, Duration duration)</span> &#123;</span><br><span class="line">        tokenValidatedCounter.increment(Tags.of(<span class="string">&quot;result&quot;</span>, success ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;failure&quot;</span>));</span><br><span class="line">        tokenValidationTimer.record(duration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安全日志"><a href="#安全日志" class="headerlink" title="安全日志"></a>安全日志</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtSecurityLogger</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">securityLogger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;SECURITY&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logTokenGenerated</span><span class="params">(String username, String clientIp)</span> &#123;</span><br><span class="line">        securityLogger.info(<span class="string">&quot;JWT令牌生成 - 用户: &#123;&#125;, IP: &#123;&#125;, 时间: &#123;&#125;&quot;</span>, </span><br><span class="line">                username, clientIp, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logTokenValidationFailure</span><span class="params">(String token, String reason, String clientIp)</span> &#123;</span><br><span class="line">        securityLogger.warn(<span class="string">&quot;JWT令牌验证失败 - Token: &#123;&#125;, 原因: &#123;&#125;, IP: &#123;&#125;, 时间: &#123;&#125;&quot;</span>, </span><br><span class="line">                maskToken(token), reason, clientIp, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">maskToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.length() &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[INVALID_TOKEN]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token.substring(<span class="number">0</span>, <span class="number">10</span>) + <span class="string">&quot;***&quot;</span> + token.substring(token.length() - <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><h3 id="9-1-Token相关问题"><a href="#9-1-Token相关问题" class="headerlink" title="9.1 Token相关问题"></a>9.1 Token相关问题</h3><h4 id="Q1-Token过期后如何处理？"><a href="#Q1-Token过期后如何处理？" class="headerlink" title="Q1: Token过期后如何处理？"></a>Q1: Token过期后如何处理？</h4><p><strong>A</strong>: 实现自动刷新机制：</p>
<ol>
<li>前端拦截401响应</li>
<li>使用refresh token获取新的access token</li>
<li>重试原请求</li>
<li>如果refresh token也过期，跳转登录页</li>
</ol>
<h4 id="Q2-如何实现单点登录（SSO）？"><a href="#Q2-如何实现单点登录（SSO）？" class="headerlink" title="Q2: 如何实现单点登录（SSO）？"></a>Q2: 如何实现单点登录（SSO）？</h4><p><strong>A</strong>: </p>
<ol>
<li>使用统一的JWT签名密钥</li>
<li>在多个应用间共享用户信息</li>
<li>实现统一的认证中心</li>
<li>配置跨域支持</li>
</ol>
<h4 id="Q3-如何实现强制下线？"><a href="#Q3-如何实现强制下线？" class="headerlink" title="Q3: 如何实现强制下线？"></a>Q3: 如何实现强制下线？</h4><p><strong>A</strong>:</p>
<ol>
<li>维护Token黑名单（Redis）</li>
<li>在验证Token时检查黑名单</li>
<li>管理员可以将特定Token加入黑名单</li>
</ol>
<h3 id="9-2-安全问题"><a href="#9-2-安全问题" class="headerlink" title="9.2 安全问题"></a>9.2 安全问题</h3><h4 id="Q1-JWT被盗用怎么办？"><a href="#Q1-JWT被盗用怎么办？" class="headerlink" title="Q1: JWT被盗用怎么办？"></a>Q1: JWT被盗用怎么办？</h4><p><strong>A</strong>: 多层防护：</p>
<ol>
<li>使用HTTPS传输</li>
<li>设置合理的过期时间</li>
<li>实现Token黑名单机制</li>
<li>监控异常登录行为</li>
<li>绑定设备指纹</li>
</ol>
<h4 id="Q2-如何防止CSRF攻击？"><a href="#Q2-如何防止CSRF攻击？" class="headerlink" title="Q2: 如何防止CSRF攻击？"></a>Q2: 如何防止CSRF攻击？</h4><p><strong>A</strong>:</p>
<ol>
<li>JWT存储在localStorage而非Cookie</li>
<li>使用自定义请求头传递Token</li>
<li>验证请求来源</li>
<li>实现双Token验证</li>
</ol>
<h4 id="Q3-密钥泄露如何应对？"><a href="#Q3-密钥泄露如何应对？" class="headerlink" title="Q3: 密钥泄露如何应对？"></a>Q3: 密钥泄露如何应对？</h4><p><strong>A</strong>:</p>
<ol>
<li>立即更换密钥</li>
<li>使所有现有Token失效</li>
<li>强制用户重新登录</li>
<li>审计相关访问日志</li>
</ol>
<h3 id="9-3-性能问题"><a href="#9-3-性能问题" class="headerlink" title="9.3 性能问题"></a>9.3 性能问题</h3><h4 id="Q1-JWT验证性能如何优化？"><a href="#Q1-JWT验证性能如何优化？" class="headerlink" title="Q1: JWT验证性能如何优化？"></a>Q1: JWT验证性能如何优化？</h4><p><strong>A</strong>:</p>
<ol>
<li>缓存用户信息减少数据库查询</li>
<li>使用异步验证</li>
<li>合理设置Token过期时间</li>
<li>使用更高效的加密算法</li>
</ol>
<h4 id="Q2-大量并发时如何处理？"><a href="#Q2-大量并发时如何处理？" class="headerlink" title="Q2: 大量并发时如何处理？"></a>Q2: 大量并发时如何处理？</h4><p><strong>A</strong>:</p>
<ol>
<li>使用连接池</li>
<li>实现限流机制</li>
<li>缓存热点数据</li>
<li>使用负载均衡</li>
</ol>
<h3 id="9-4-部署问题"><a href="#9-4-部署问题" class="headerlink" title="9.4 部署问题"></a>9.4 部署问题</h3><h4 id="Q1-多实例部署注意事项？"><a href="#Q1-多实例部署注意事项？" class="headerlink" title="Q1: 多实例部署注意事项？"></a>Q1: 多实例部署注意事项？</h4><p><strong>A</strong>:</p>
<ol>
<li>使用相同的JWT密钥</li>
<li>共享Redis缓存</li>
<li>同步时钟</li>
<li>统一配置管理</li>
</ol>
<h4 id="Q2-容器化部署配置？"><a href="#Q2-容器化部署配置？" class="headerlink" title="Q2: 容器化部署配置？"></a>Q2: 容器化部署配置？</h4><p><strong>A</strong>:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置JWT环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JWT_SECRET=$&#123;JWT_SECRET&#125;</span><br><span class="line"><span class="keyword">ENV</span> JWT_ACCESS_EXPIRATION=$&#123;JWT_ACCESS_EXPIRATION&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/app.jar app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myapp:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JWT_SECRET=your-production-secret-key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JWT_ACCESS_EXPIRATION=7200000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JWT_REFRESH_EXPIRATION=604800000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><h3 id="10-1-实现要点回顾"><a href="#10-1-实现要点回顾" class="headerlink" title="10.1 实现要点回顾"></a>10.1 实现要点回顾</h3><p>✅ <strong>双Token机制</strong>：访问令牌+刷新令牌，平衡安全性和用户体验<br>✅ <strong>自动拦截验证</strong>：使用Spring MVC拦截器自动验证所有API请求<br>✅ <strong>灵活配置</strong>：支持多环境配置，密钥和过期时间可配置<br>✅ <strong>异常处理</strong>：完善的异常处理机制，统一错误响应格式<br>✅ <strong>安全最佳实践</strong>：HTTPS传输、合理过期时间、黑名单机制</p>
<h3 id="10-2-架构优势"><a href="#10-2-架构优势" class="headerlink" title="10.2 架构优势"></a>10.2 架构优势</h3><ul>
<li><strong>无状态设计</strong>：服务器不需要存储会话，便于水平扩展</li>
<li><strong>高性能</strong>：减少数据库查询，提升系统响应速度</li>
<li><strong>安全可控</strong>：多层安全防护，支持细粒度权限控制</li>
<li><strong>易于维护</strong>：模块化设计，配置集中管理</li>
<li><strong>扩展性强</strong>：支持微服务架构，便于系统拆分</li>
</ul>
<h3 id="10-3-下一步优化方向"><a href="#10-3-下一步优化方向" class="headerlink" title="10.3 下一步优化方向"></a>10.3 下一步优化方向</h3><ol>
<li><strong>引入OAuth2</strong>：支持第三方登录</li>
<li><strong>实现RBAC</strong>：基于角色的权限控制</li>
<li><strong>添加限流</strong>：防止暴力破解</li>
<li><strong>集成监控</strong>：完善监控和告警</li>
<li><strong>多租户支持</strong>：支持SaaS架构</li>
</ol>
<p>通过本文的详细介绍，相信您已经掌握了在Spring Boot中实现JWT认证的完整方案。这套实现不仅满足了基本的认证需求，还考虑了安全性、性能、可维护性等多个方面。在实际项目中，您可以根据具体需求进行调整和优化。</p>
<p><strong>关键提醒</strong>：</p>
<ul>
<li>生产环境务必使用HTTPS</li>
<li>定期更换JWT密钥</li>
<li>监控异常登录行为</li>
<li>保持依赖库版本更新</li>
</ul>
<p>希望这篇指南对您的项目开发有所帮助！</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot数据脱敏完整实现指南</title>
    <url>/2025/09/22/web/SpringBoot%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>在现代企业级应用开发中，数据安全和隐私保护越来越重要。本文将详细介绍如何在Spring Boot项目中实现一套完整的数据脱敏系统，保护用户隐私数据的安全。</p>
</blockquote>
<h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul>
<li><a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a></li>
<li><a href="#2-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">2. 技术架构设计</a></li>
<li><a href="#3-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0">3. 核心组件实现</a></li>
<li><a href="#4-%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8">4. 配置和使用</a></li>
<li><a href="#5-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7">5. 高级特性</a></li>
<li><a href="#6-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">6. 最佳实践</a></li>
<li><a href="#7-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">7. 性能优化</a></li>
<li><a href="#8-%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">8. 故障排查</a></li>
<li><a href="#9-%E6%80%BB%E7%BB%93">9. 总结</a></li>
</ul>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-什么是数据脱敏"><a href="#1-1-什么是数据脱敏" class="headerlink" title="1.1 什么是数据脱敏"></a>1.1 什么是数据脱敏</h3><p>数据脱敏（Data Masking）是指对敏感数据进行变形、遮蔽或替换处理，使其在保持数据格式和业务逻辑正确的前提下，无法被直接识别和利用，从而保护数据隐私和安全。</p>
<h3 id="1-2-为什么需要数据脱敏"><a href="#1-2-为什么需要数据脱敏" class="headerlink" title="1.2 为什么需要数据脱敏"></a>1.2 为什么需要数据脱敏</h3><ul>
<li><strong>法律合规</strong>：满足《个人信息保护法》、GDPR等法规要求</li>
<li><strong>安全防护</strong>：防止敏感数据泄露造成的安全风险</li>
<li><strong>开发测试</strong>：为开发和测试环境提供安全的数据</li>
<li><strong>日志安全</strong>：避免敏感信息在日志中明文显示</li>
<li><strong>第三方对接</strong>：对外提供数据时保护用户隐私</li>
</ul>
<h3 id="1-3-实现目标"><a href="#1-3-实现目标" class="headerlink" title="1.3 实现目标"></a>1.3 实现目标</h3><p>✅ <strong>多场景支持</strong>：JSON序列化、日志输出、AOP拦截<br>✅ <strong>丰富的脱敏类型</strong>：手机号、邮箱、身份证、银行卡等<br>✅ <strong>灵活配置</strong>：支持全局配置和注解级别控制<br>✅ <strong>高性能</strong>：优化算法，支持批量处理<br>✅ <strong>易扩展</strong>：模块化设计，便于添加新的脱敏规则</p>
<h2 id="2-技术架构设计"><a href="#2-技术架构设计" class="headerlink" title="2. 技术架构设计"></a>2. 技术架构设计</h2><h3 id="2-1-整体架构图"><a href="#2-1-整体架构图" class="headerlink" title="2.1 整体架构图"></a>2.1 整体架构图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────────────────┐</span><br><span class="line">│                    数据脱敏系统架构                           │</span><br><span class="line">├─────────────────────────────────────────────────────────────┤</span><br><span class="line">│                                                             │</span><br><span class="line">│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐      │</span><br><span class="line">│  │  注解层      │    │  配置层      │    │  工具层      │      │</span><br><span class="line">│  │ @Sensitive  │    │SensitiveConfig│   │SensitiveUtil │      │</span><br><span class="line">│  └─────────────┘    └─────────────┘    └─────────────┘      │</span><br><span class="line">│         │                   │                   │           │</span><br><span class="line">│         ▼                   ▼                   ▼           │</span><br><span class="line">│  ┌─────────────────────────────────────────────────────────┐ │</span><br><span class="line">│  │                    处理层                                │ │</span><br><span class="line">│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │ │</span><br><span class="line">│  │  │ AOP 切面    │  │ JSON序列化  │  │ 日志处理    │     │ │</span><br><span class="line">│  │  │SensitiveAspect│ │JsonSerializer│ │ LogUtil     │     │ │</span><br><span class="line">│  │  └─────────────┘  └─────────────┘  └─────────────┘     │ │</span><br><span class="line">│  └─────────────────────────────────────────────────────────┘ │</span><br><span class="line">│                               │                               │</span><br><span class="line">│                               ▼                               │</span><br><span class="line">│  ┌─────────────────────────────────────────────────────────┐ │</span><br><span class="line">│  │                    输出层                                │ │</span><br><span class="line">│  │       API响应        日志文件        控制台输出          │ │</span><br><span class="line">│  └─────────────────────────────────────────────────────────┘ │</span><br><span class="line">└─────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3 id="2-2-核心模块说明"><a href="#2-2-核心模块说明" class="headerlink" title="2.2 核心模块说明"></a>2.2 核心模块说明</h3><table>
<thead>
<tr>
<th>模块</th>
<th>功能</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>注解层</strong></td>
<td>标记敏感字段</td>
<td>通过注解声明脱敏规则</td>
</tr>
<tr>
<td><strong>配置层</strong></td>
<td>全局配置管理</td>
<td>统一管理脱敏开关和参数</td>
</tr>
<tr>
<td><strong>工具层</strong></td>
<td>脱敏算法实现</td>
<td>提供各种脱敏处理方法</td>
</tr>
<tr>
<td><strong>处理层</strong></td>
<td>自动脱敏处理</td>
<td>在不同场景下自动应用脱敏</td>
</tr>
</tbody></table>
<h3 id="2-3-支持的脱敏场景"><a href="#2-3-支持的脱敏场景" class="headerlink" title="2.3 支持的脱敏场景"></a>2.3 支持的脱敏场景</h3><ul>
<li><strong>JSON 序列化</strong>：API 响应自动脱敏</li>
<li><strong>日志输出</strong>：日志记录时自动脱敏</li>
<li><strong>AOP 拦截</strong>：方法返回值自动脱敏</li>
<li><strong>手动调用</strong>：程序中手动脱敏处理</li>
</ul>
<h2 id="3-核心组件实现"><a href="#3-核心组件实现" class="headerlink" title="3. 核心组件实现"></a>3. 核心组件实现</h2><h3 id="3-1-脱敏类型枚举"><a href="#3-1-脱敏类型枚举" class="headerlink" title="3.1 脱敏类型枚举"></a>3.1 脱敏类型枚举</h3><p>首先定义支持的脱敏类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SensitiveType</span> &#123;</span><br><span class="line">    <span class="comment">/** 手机号脱敏：保留前3位和后4位，中间用*替换 */</span></span><br><span class="line">    MOBILE,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 姓名脱敏：保留姓氏，名字用*替换 */</span></span><br><span class="line">    NAME,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 邮箱脱敏：保留前3位和@后的域名，用户名部分用*替换 */</span></span><br><span class="line">    EMAIL,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 密码脱敏：完全用*替换 */</span></span><br><span class="line">    PASSWORD,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 身份证号脱敏：保留前4位和后4位，中间用*替换 */</span></span><br><span class="line">    ID_CARD,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 银行卡号脱敏：保留前4位和后4位，中间用*替换 */</span></span><br><span class="line">    BANK_CARD,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 地址脱敏：保留省市区信息，详细地址用*替换 */</span></span><br><span class="line">    ADDRESS,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 车牌号脱敏：保留前2位和后1位，中间用*替换 */</span></span><br><span class="line">    CAR_LICENSE,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 固定电话脱敏：保留区号和后4位，中间用*替换 */</span></span><br><span class="line">    FIXED_PHONE,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 自定义脱敏：根据配置进行脱敏 */</span></span><br><span class="line">    CUSTOM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-敏感数据注解"><a href="#3-2-敏感数据注解" class="headerlink" title="3.2 敏感数据注解"></a>3.2 敏感数据注解</h3><p>设计一个功能丰富的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Sensitive &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SensitiveType <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> SensitiveType.CUSTOM;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义脱敏时保留开始位数（仅在 type = CUSTOM 时生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">keepStart</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义脱敏时保留结束位数（仅在 type = CUSTOM 时生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">keepEnd</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义脱敏时的替换字符（仅在 type = CUSTOM 时生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">maskChar</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否在日志中脱敏（默认为true）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enableLog</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否在JSON序列化时脱敏（默认为true）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enableJson</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-脱敏工具类核心实现"><a href="#3-3-脱敏工具类核心实现" class="headerlink" title="3.3 脱敏工具类核心实现"></a>3.3 脱敏工具类核心实现</h3><p>实现各种脱敏算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 默认替换字符 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_MASK_CHAR</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 手机号正则表达式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">MOBILE_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^1[3-9]\\d&#123;9&#125;$&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据脱敏类型对数据进行脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">desensitize</span><span class="params">(String data, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(data) || type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> MOBILE:</span><br><span class="line">                <span class="keyword">return</span> desensitizeMobile(data);</span><br><span class="line">            <span class="keyword">case</span> NAME:</span><br><span class="line">                <span class="keyword">return</span> desensitizeName(data);</span><br><span class="line">            <span class="keyword">case</span> EMAIL:</span><br><span class="line">                <span class="keyword">return</span> desensitizeEmail(data);</span><br><span class="line">            <span class="keyword">case</span> PASSWORD:</span><br><span class="line">                <span class="keyword">return</span> desensitizePassword(data);</span><br><span class="line">            <span class="keyword">case</span> ID_CARD:</span><br><span class="line">                <span class="keyword">return</span> desensitizeIdCard(data);</span><br><span class="line">            <span class="keyword">case</span> BANK_CARD:</span><br><span class="line">                <span class="keyword">return</span> desensitizeBankCard(data);</span><br><span class="line">            <span class="keyword">case</span> ADDRESS:</span><br><span class="line">                <span class="keyword">return</span> desensitizeAddress(data);</span><br><span class="line">            <span class="keyword">case</span> CAR_LICENSE:</span><br><span class="line">                <span class="keyword">return</span> desensitizeCarLicense(data);</span><br><span class="line">            <span class="keyword">case</span> FIXED_PHONE:</span><br><span class="line">                <span class="keyword">return</span> desensitizeFixedPhone(data);</span><br><span class="line">            <span class="keyword">case</span> CUSTOM:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> desensitizeDefault(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号脱敏处理</span></span><br><span class="line"><span class="comment">     * 示例：13812345678 -&gt; 138****5678</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">desensitizeMobile</span><span class="params">(String mobile)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(mobile)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mobile;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 校验手机号格式</span></span><br><span class="line">        <span class="keyword">if</span> (!MOBILE_PATTERN.matcher(mobile).matches()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mobile; <span class="comment">// 格式不正确，直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mobile.substring(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">&quot;****&quot;</span> + mobile.substring(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名脱敏处理</span></span><br><span class="line"><span class="comment">     * 示例：张三 -&gt; 张*；欧阳修 -&gt; 欧阳*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">desensitizeName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> name.length();</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 中文姓名处理</span></span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name.charAt(<span class="number">0</span>) + <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name.substring(<span class="number">0</span>, <span class="number">2</span>) + <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 复姓或较长姓名，保留前面部分</span></span><br><span class="line">            <span class="keyword">return</span> name.substring(<span class="number">0</span>, <span class="number">2</span>) + repeatChar(<span class="string">&quot;*&quot;</span>, length - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">desensitizeCustom</span><span class="params">(String data, <span class="type">int</span> keepStart, <span class="type">int</span> keepEnd, String maskChar)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (keepStart &lt; <span class="number">0</span>) keepStart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (keepEnd &lt; <span class="number">0</span>) keepEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(maskChar)) maskChar = DEFAULT_MASK_CHAR;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> data.length();</span><br><span class="line">        <span class="keyword">if</span> (keepStart + keepEnd &gt;= length) &#123;</span><br><span class="line">            <span class="keyword">return</span> data; <span class="comment">// 保留位数超过总长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> data.substring(<span class="number">0</span>, keepStart);</span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> data.substring(length - keepEnd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">middle</span> <span class="operator">=</span> repeatChar(maskChar, length - keepStart - keepEnd);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> start + middle + end;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复字符串辅助方法（用于兼容 Java 8）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">repeatChar</span><span class="params">(String str, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            sb.append(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他脱敏方法实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-JSON-序列化脱敏处理器"><a href="#3-4-JSON-序列化脱敏处理器" class="headerlink" title="3.4 JSON 序列化脱敏处理器"></a>3.4 JSON 序列化脱敏处理器</h3><p>实现Jackson自定义序列化器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveJsonSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ContextualSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SensitiveType sensitiveType;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> keepStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> keepEnd;</span><br><span class="line">    <span class="keyword">private</span> String maskChar;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enableJson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SensitiveJsonSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SensitiveJsonSerializer</span><span class="params">(SensitiveType sensitiveType, <span class="type">int</span> keepStart, <span class="type">int</span> keepEnd, String maskChar, <span class="type">boolean</span> enableJson)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sensitiveType = sensitiveType;</span><br><span class="line">        <span class="built_in">this</span>.keepStart = keepStart;</span><br><span class="line">        <span class="built_in">this</span>.keepEnd = keepEnd;</span><br><span class="line">        <span class="built_in">this</span>.maskChar = maskChar;</span><br><span class="line">        <span class="built_in">this</span>.enableJson = enableJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 如果禁用了 JSON 脱敏，直接输出原值</span></span><br><span class="line">        <span class="keyword">if</span> (!enableJson) &#123;</span><br><span class="line">            gen.writeString(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行脱敏处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">maskedValue</span> <span class="operator">=</span> desensitizeValue(value);</span><br><span class="line">        gen.writeString(maskedValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider prov, BeanProperty property) <span class="keyword">throws</span> JsonMappingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (property != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Sensitive</span> <span class="variable">sensitive</span> <span class="operator">=</span> property.getAnnotation(Sensitive.class);</span><br><span class="line">            <span class="keyword">if</span> (sensitive != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SensitiveJsonSerializer</span>(</span><br><span class="line">                        sensitive.value(),</span><br><span class="line">                        sensitive.keepStart(),</span><br><span class="line">                        sensitive.keepEnd(),</span><br><span class="line">                        sensitive.maskChar(),</span><br><span class="line">                        sensitive.enableJson()</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据配置对数据进行脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">desensitizeValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sensitiveType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是自定义类型，使用自定义参数</span></span><br><span class="line">        <span class="keyword">if</span> (sensitiveType == SensitiveType.CUSTOM) &#123;</span><br><span class="line">            <span class="keyword">return</span> SensitiveUtil.desensitizeCustom(value, keepStart, keepEnd, maskChar);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用预定义的脱敏类型</span></span><br><span class="line">        <span class="keyword">return</span> SensitiveUtil.desensitize(value, sensitiveType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-AOP-切面脱敏处理器"><a href="#3-5-AOP-切面脱敏处理器" class="headerlink" title="3.5 AOP 切面脱敏处理器"></a>3.5 AOP 切面脱敏处理器</h3><p>实现自动脱敏的AOP切面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SensitiveAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveConfig.SensitiveProperties sensitiveProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切点：拦截所有 Controller 层的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * org.practice.surveymaster.controller..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">controllerMethods</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知：对方法返回值进行脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;controllerMethods()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundController</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 如果脱敏功能未启用，直接执行原方法</span></span><br><span class="line">        <span class="keyword">if</span> (!sensitiveProperties.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行原方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对返回值进行脱敏处理</span></span><br><span class="line">        <span class="keyword">return</span> desensitizeResult(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对结果进行脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">desensitizeResult</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理不同类型的返回值</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                <span class="keyword">return</span> desensitizeList((List&lt;?&gt;) result);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.getClass().getPackage() != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">                       result.getClass().getPackage().getName().startsWith(<span class="string">&quot;org.practice.surveymaster&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 只处理项目内的类</span></span><br><span class="line">                <span class="keyword">return</span> desensitizeObject(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;脱敏处理失败: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对单个对象进行脱敏处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">desensitizeObject</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="type">Sensitive</span> <span class="variable">sensitive</span> <span class="operator">=</span> field.getAnnotation(Sensitive.class);</span><br><span class="line">            <span class="keyword">if</span> (sensitive != <span class="literal">null</span> &amp;&amp; field.getType() == String.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">originalValue</span> <span class="operator">=</span> (String) field.get(obj);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 根据注解配置进行脱敏</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">desensitizedValue</span> <span class="operator">=</span> desensitizeFieldValue(originalValue, sensitive);</span><br><span class="line">                    field.set(obj, desensitizedValue);</span><br><span class="line">                    </span><br><span class="line">                    logger.debug(<span class="string">&quot;字段 &#123;&#125; 脱敏处理完成&quot;</span>, field.getName());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;无法访问字段 &#123;&#125;: &#123;&#125;&quot;</span>, field.getName(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.error(<span class="string">&quot;字段 &#123;&#125; 脱敏处理异常: &#123;&#125;&quot;</span>, field.getName(), e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他辅助方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-配置和使用"><a href="#4-配置和使用" class="headerlink" title="4. 配置和使用"></a>4. 配置和使用</h2><h3 id="4-1-配置类实现"><a href="#4-1-配置类实现" class="headerlink" title="4.1 配置类实现"></a>4.1 配置类实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sensitive&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用数据脱敏功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否在日志中启用脱敏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enableLog</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否在 JSON 序列化时启用脱敏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enableJson</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的脱敏字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">defaultMaskChar</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册带有脱敏功能的 ObjectMapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> ObjectMapper <span class="title function_">sensitiveObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册 JSR310 模块支持 Java 8 时间类型</span></span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置时间序列化格式</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他通用配置</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建简单模块并注册脱敏序列化器</span></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">sensitiveModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>(<span class="string">&quot;SensitiveModule&quot;</span>);</span><br><span class="line">        sensitiveModule.addSerializer(String.class, <span class="keyword">new</span> <span class="title class_">SensitiveJsonSerializer</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册模块到 ObjectMapper</span></span><br><span class="line">        objectMapper.registerModule(sensitiveModule);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-应用配置文件"><a href="#4-2-应用配置文件" class="headerlink" title="4.2 应用配置文件"></a>4.2 应用配置文件</h3><p>在 <code>application.yml</code> 中添加脱敏配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据脱敏配置</span></span><br><span class="line"><span class="attr">sensitive:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>              <span class="comment"># 是否启用数据脱敏功能</span></span><br><span class="line">  <span class="attr">enable-log:</span> <span class="literal">true</span>           <span class="comment"># 是否在日志中启用脱敏</span></span><br><span class="line">  <span class="attr">enable-json:</span> <span class="literal">true</span>          <span class="comment"># 是否在 JSON 序列化时启用脱敏</span></span><br><span class="line">  <span class="attr">default-mask-char:</span> <span class="string">&quot;*&quot;</span>     <span class="comment"># 默认的脱敏字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jackson 配置（支持 Java 8 时间类型）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">      <span class="attr">write-dates-as-timestamps:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">deserialization:</span></span><br><span class="line">      <span class="attr">fail-on-unknown-properties:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-实体类使用示例"><a href="#4-3-实体类使用示例" class="headerlink" title="4.3 实体类使用示例"></a>4.3 实体类使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Sensitive(SensitiveType.NAME)</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using = SensitiveJsonSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Sensitive(SensitiveType.PASSWORD)</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using = SensitiveJsonSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Sensitive(SensitiveType.EMAIL)</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using = SensitiveJsonSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-控制器使用示例"><a href="#4-4-控制器使用示例" class="headerlink" title="4.4 控制器使用示例"></a>4.4 控制器使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/demo/sensitive&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveDemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示用户信息脱敏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;User&gt; <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;mySecretPassword123&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsan@example.com&quot;</span>);</span><br><span class="line">        user.setCreatedAt(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示敏感信息对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sensitive-info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;SensitiveInfoDemo&gt; <span class="title function_">getSensitiveInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SensitiveInfoDemo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveInfoDemo</span>();</span><br><span class="line">        info.setMobile(<span class="string">&quot;13812345678&quot;</span>);</span><br><span class="line">        info.setIdCard(<span class="string">&quot;110101199001011234&quot;</span>);</span><br><span class="line">        info.setBankCard(<span class="string">&quot;6217000123456789012&quot;</span>);</span><br><span class="line">        info.setAddress(<span class="string">&quot;北京市朝阳区三里屯街道1号&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示敏感信息类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SensitiveInfoDemo</span> &#123;</span><br><span class="line">        <span class="meta">@Sensitive(SensitiveType.MOBILE)</span></span><br><span class="line">        <span class="keyword">private</span> String mobile;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Sensitive(SensitiveType.ID_CARD)</span></span><br><span class="line">        <span class="keyword">private</span> String idCard;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Sensitive(SensitiveType.BANK_CARD)</span></span><br><span class="line">        <span class="keyword">private</span> String bankCard;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Sensitive(SensitiveType.ADDRESS)</span></span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Sensitive(value = SensitiveType.CUSTOM, keepStart = 3, keepEnd = 3, maskChar = &quot;#&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">customField</span> <span class="operator">=</span> <span class="string">&quot;ThisIsACustomSensitiveField&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getters and setters...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-高级特性"><a href="#5-高级特性" class="headerlink" title="5. 高级特性"></a>5. 高级特性</h2><h3 id="5-1-批量脱敏处理"><a href="#5-1-批量脱敏处理" class="headerlink" title="5.1 批量脱敏处理"></a>5.1 批量脱敏处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量脱敏处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataArray 数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 脱敏类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 脱敏后的数据数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] desensitizeBatch(String[] dataArray, SensitiveType type) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dataArray == <span class="literal">null</span> || dataArray.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dataArray;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String[] result = <span class="keyword">new</span> <span class="title class_">String</span>[dataArray.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataArray.length; i++) &#123;</span><br><span class="line">        result[i] = desensitize(dataArray[i], type);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-条件脱敏"><a href="#5-2-条件脱敏" class="headerlink" title="5.2 条件脱敏"></a>5.2 条件脱敏</h3><p>根据用户角色或权限级别进行条件脱敏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户角色进行条件脱敏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">desensitizeByRole</span><span class="params">(String data, SensitiveType type, String userRole)</span> &#123;</span><br><span class="line">    <span class="comment">// 管理员角色不脱敏</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;ADMIN&quot;</span>.equals(userRole)) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通用户进行脱敏</span></span><br><span class="line">    <span class="keyword">return</span> desensitize(data, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-脱敏规则动态配置"><a href="#5-3-脱敏规则动态配置" class="headerlink" title="5.3 脱敏规则动态配置"></a>5.3 脱敏规则动态配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSensitiveRuleManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SensitiveRule&gt; ruleCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态添加脱敏规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRule</span><span class="params">(String fieldName, SensitiveType type, <span class="type">int</span> keepStart, <span class="type">int</span> keepEnd)</span> &#123;</span><br><span class="line">        <span class="type">SensitiveRule</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveRule</span>(type, keepStart, keepEnd, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        ruleCache.put(fieldName, rule);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据字段名获取脱敏规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SensitiveRule <span class="title function_">getRule</span><span class="params">(String fieldName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ruleCache.get(fieldName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏规则配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SensitiveRule</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> SensitiveType type;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> keepStart;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> keepEnd;</span><br><span class="line">        <span class="keyword">private</span> String maskChar;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// constructors, getters and setters...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-多环境脱敏策略"><a href="#5-4-多环境脱敏策略" class="headerlink" title="5.4 多环境脱敏策略"></a>5.4 多环境脱敏策略</h3><p>不同环境使用不同的脱敏策略：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml - 开发环境</span></span><br><span class="line"><span class="attr">sensitive:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span>  <span class="comment"># 开发环境不脱敏，便于调试</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># application-test.yml - 测试环境  </span></span><br><span class="line"><span class="attr">sensitive:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable-log:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable-json:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># application-prod.yml - 生产环境</span></span><br><span class="line"><span class="attr">sensitive:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable-log:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable-json:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">default-mask-char:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><h3 id="6-1-注解使用最佳实践"><a href="#6-1-注解使用最佳实践" class="headerlink" title="6.1 注解使用最佳实践"></a>6.1 注解使用最佳实践</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProfile</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 推荐：明确指定脱敏类型</span></span><br><span class="line">    <span class="meta">@Sensitive(SensitiveType.MOBILE)</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 推荐：自定义脱敏参数</span></span><br><span class="line">    <span class="meta">@Sensitive(value = SensitiveType.CUSTOM, keepStart = 2, keepEnd = 4, maskChar = &quot;#&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String customerCode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 推荐：控制脱敏场景</span></span><br><span class="line">    <span class="meta">@Sensitive(value = SensitiveType.EMAIL, enableLog = false, enableJson = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ❌ 不推荐：敏感字段不加注解</span></span><br><span class="line">    <span class="keyword">private</span> String idCard; <span class="comment">// 应该添加 @Sensitive(SensitiveType.ID_CARD)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ❌ 不推荐：非敏感字段加脱敏注解</span></span><br><span class="line">    <span class="meta">@Sensitive(SensitiveType.NAME)</span></span><br><span class="line">    <span class="keyword">private</span> String nickname; <span class="comment">// 昵称通常不需要脱敏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-性能优化策略"><a href="#6-2-性能优化策略" class="headerlink" title="6.2 性能优化策略"></a>6.2 性能优化策略</h3><h4 id="缓存脱敏结果"><a href="#缓存脱敏结果" class="headerlink" title="缓存脱敏结果"></a>缓存脱敏结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedSensitiveUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">10000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">1</span>, TimeUnit.HOURS)</span><br><span class="line">            .build(key -&gt; &#123;</span><br><span class="line">                String[] parts = key.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="type">SensitiveType</span> <span class="variable">type</span> <span class="operator">=</span> SensitiveType.valueOf(parts[<span class="number">0</span>]);</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> parts[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> SensitiveUtil.desensitize(data, type);</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">desensitizeWithCache</span><span class="params">(String data, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> type.name() + <span class="string">&quot;:&quot;</span> + data;</span><br><span class="line">        <span class="keyword">return</span> cache.getUnchecked(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异步脱敏处理"><a href="#异步脱敏处理" class="headerlink" title="异步脱敏处理"></a>异步脱敏处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncSensitiveService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async(&quot;sensitiveExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;List&lt;String&gt;&gt; <span class="title function_">desensitizeBatchAsync</span><span class="params">(List&lt;String&gt; dataList, SensitiveType type)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = dataList.parallelStream()</span><br><span class="line">                .map(data -&gt; SensitiveUtil.desensitize(data, type))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-安全性考虑"><a href="#6-3-安全性考虑" class="headerlink" title="6.3 安全性考虑"></a>6.3 安全性考虑</h3><h4 id="脱敏结果不可逆"><a href="#脱敏结果不可逆" class="headerlink" title="脱敏结果不可逆"></a>脱敏结果不可逆</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确保脱敏结果不可逆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecureSensitiveUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 正确：单向脱敏，无法还原</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">secureDesensitize</span><span class="params">(String data, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">masked</span> <span class="operator">=</span> SensitiveUtil.desensitize(data, type);</span><br><span class="line">        <span class="comment">// 额外的安全处理</span></span><br><span class="line">        <span class="keyword">return</span> addSecuritySalt(masked);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ❌ 错误：可逆脱敏存在安全风险</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reversibleDesensitize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="comment">// 不要实现可逆的脱敏算法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NEVER_IMPLEMENT_THIS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">addSecuritySalt</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加安全盐值，防止碰撞攻击</span></span><br><span class="line">        <span class="keyword">return</span> data + <span class="string">&quot;_SECURE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="脱敏审计日志"><a href="#脱敏审计日志" class="headerlink" title="脱敏审计日志"></a>脱敏审计日志</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveAuditLogger</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">auditLogger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;SENSITIVE_AUDIT&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logDesensitizeOperation</span><span class="params">(String userId, String fieldName, SensitiveType type)</span> &#123;</span><br><span class="line">        auditLogger.info(<span class="string">&quot;脱敏操作 - 用户: &#123;&#125;, 字段: &#123;&#125;, 类型: &#123;&#125;, 时间: &#123;&#125;&quot;</span>, </span><br><span class="line">                userId, fieldName, type, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-性能优化"><a href="#7-性能优化" class="headerlink" title="7. 性能优化"></a>7. 性能优化</h2><h3 id="7-1-性能测试结果"><a href="#7-1-性能测试结果" class="headerlink" title="7.1 性能测试结果"></a>7.1 性能测试结果</h3><p>我们对脱敏系统进行了性能测试：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据量</th>
<th>耗时（ms）</th>
<th>QPS</th>
</tr>
</thead>
<tbody><tr>
<td>单条脱敏</td>
<td>1</td>
<td>0.1</td>
<td>10,000</td>
</tr>
<tr>
<td>批量脱敏</td>
<td>1,000</td>
<td>15</td>
<td>66,667</td>
</tr>
<tr>
<td>JSON序列化脱敏</td>
<td>100对象</td>
<td>50</td>
<td>2,000</td>
</tr>
<tr>
<td>AOP拦截脱敏</td>
<td>100对象</td>
<td>80</td>
<td>1,250</td>
</tr>
</tbody></table>
<h3 id="7-2-性能优化建议"><a href="#7-2-性能优化建议" class="headerlink" title="7.2 性能优化建议"></a>7.2 性能优化建议</h3><h4 id="优化1：减少反射操作"><a href="#优化1：减少反射操作" class="headerlink" title="优化1：减少反射操作"></a>优化1：减少反射操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptimizedSensitiveProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存字段信息，避免重复反射</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;FieldInfo&gt;&gt; fieldCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">processObject</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        List&lt;FieldInfo&gt; fields = fieldCache.computeIfAbsent(clazz, <span class="built_in">this</span>::extractSensitiveFields);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (FieldInfo fieldInfo : fields) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) fieldInfo.getField().get(obj);</span><br><span class="line">                <span class="type">String</span> <span class="variable">masked</span> <span class="operator">=</span> SensitiveUtil.desensitize(value, fieldInfo.getType());</span><br><span class="line">                fieldInfo.getField().set(obj, masked);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="comment">// 处理异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;FieldInfo&gt; <span class="title function_">extractSensitiveFields</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(clazz.getDeclaredFields())</span><br><span class="line">                .filter(field -&gt; field.isAnnotationPresent(Sensitive.class))</span><br><span class="line">                .filter(field -&gt; field.getType() == String.class)</span><br><span class="line">                .map(field -&gt; &#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Sensitive</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Sensitive.class);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(field, annotation.value());</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FieldInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Field field;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SensitiveType type;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// constructor, getters...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化2：并行处理"><a href="#优化2：并行处理" class="headerlink" title="优化2：并行处理"></a>优化2：并行处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParallelSensitiveProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">desensitizeBatch</span><span class="params">(List&lt;String&gt; dataList, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataList.parallelStream()</span><br><span class="line">                .map(data -&gt; SensitiveUtil.desensitize(data, type))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-故障排查"><a href="#8-故障排查" class="headerlink" title="8. 故障排查"></a>8. 故障排查</h2><h3 id="8-1-常见问题及解决方案"><a href="#8-1-常见问题及解决方案" class="headerlink" title="8.1 常见问题及解决方案"></a>8.1 常见问题及解决方案</h3><h4 id="问题1：LocalDateTime-序列化异常"><a href="#问题1：LocalDateTime-序列化异常" class="headerlink" title="问题1：LocalDateTime 序列化异常"></a>问题1：LocalDateTime 序列化异常</h4><p><strong>错误信息</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java 8 date/time type `java.time.LocalDateTime` not supported by default</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 Jackson JSR310 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在配置类中注册 JSR310 模块</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ObjectMapper <span class="title function_">sensitiveObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">    objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">    <span class="comment">// ... 其他配置</span></span><br><span class="line">    <span class="keyword">return</span> objectMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题2：脱敏功能不生效"><a href="#问题2：脱敏功能不生效" class="headerlink" title="问题2：脱敏功能不生效"></a>问题2：脱敏功能不生效</h4><p><strong>可能原因</strong>：</p>
<ul>
<li>脱敏功能被禁用</li>
<li>注解使用不正确</li>
<li>AOP 配置问题</li>
</ul>
<p><strong>排查步骤</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveDebugController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveConfig.SensitiveProperties sensitiveProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/debug/sensitive-config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">debugConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; config = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        config.put(<span class="string">&quot;enabled&quot;</span>, sensitiveProperties.isEnabled());</span><br><span class="line">        config.put(<span class="string">&quot;enableLog&quot;</span>, sensitiveProperties.isEnableLog());</span><br><span class="line">        config.put(<span class="string">&quot;enableJson&quot;</span>, sensitiveProperties.isEnableJson());</span><br><span class="line">        config.put(<span class="string">&quot;defaultMaskChar&quot;</span>, sensitiveProperties.getDefaultMaskChar());</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题3：性能问题"><a href="#问题3：性能问题" class="headerlink" title="问题3：性能问题"></a>问题3：性能问题</h4><p><strong>性能分析</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitivePerformanceMonitor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">perfLogger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;PERFORMANCE&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">monitorDesensitize</span><span class="params">(String data, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> SensitiveUtil.desensitize(data, type);</span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.nanoTime() - startTime;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (duration &gt; <span class="number">1_000_000</span>) &#123; <span class="comment">// 超过1ms记录日志</span></span><br><span class="line">            perfLogger.warn(<span class="string">&quot;脱敏操作耗时过长: &#123;&#125;ns, 类型: &#123;&#125;, 数据长度: &#123;&#125;&quot;</span>, </span><br><span class="line">                    duration, type, data.length());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-监控和告警"><a href="#8-2-监控和告警" class="headerlink" title="8.2 监控和告警"></a>8.2 监控和告警</h3><h4 id="脱敏操作监控"><a href="#脱敏操作监控" class="headerlink" title="脱敏操作监控"></a>脱敏操作监控</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveMetrics</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Counter</span> <span class="variable">desensitizeCounter</span> <span class="operator">=</span> Counter.builder(<span class="string">&quot;sensitive.desensitize&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;脱敏操作计数&quot;</span>)</span><br><span class="line">            .register(Metrics.globalRegistry);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Timer</span> <span class="variable">desensitizeTimer</span> <span class="operator">=</span> Timer.builder(<span class="string">&quot;sensitive.desensitize.duration&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;脱敏操作耗时&quot;</span>)</span><br><span class="line">            .register(Metrics.globalRegistry);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">desensitizeWithMetrics</span><span class="params">(String data, SensitiveType type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desensitizeTimer.recordCallable(() -&gt; &#123;</span><br><span class="line">            desensitizeCounter.increment(Tags.of(<span class="string">&quot;type&quot;</span>, type.name()));</span><br><span class="line">            <span class="keyword">return</span> SensitiveUtil.desensitize(data, type);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="告警规则配置"><a href="#告警规则配置" class="headerlink" title="告警规则配置"></a>告警规则配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prometheus 告警规则</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sensitive_alerts</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighDesensitizeLatency</span></span><br><span class="line">        <span class="attr">expr:</span> <span class="string">histogram_quantile(0.95,</span> <span class="string">sensitive_desensitize_duration_seconds)</span> <span class="string">&gt;</span> <span class="number">0.1</span></span><br><span class="line">        <span class="attr">for:</span> <span class="string">5m</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">summary:</span> <span class="string">&quot;脱敏操作延迟过高&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;95%分位脱敏操作耗时超过100ms&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">DesensitizeErrorRate</span></span><br><span class="line">        <span class="attr">expr:</span> <span class="string">rate(sensitive_desensitize_errors_total[5m])</span> <span class="string">&gt;</span> <span class="number">0.01</span></span><br><span class="line">        <span class="attr">for:</span> <span class="string">2m</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">summary:</span> <span class="string">&quot;脱敏操作错误率过高&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;脱敏操作错误率超过1%&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot统一错误处理实现指南</title>
    <url>/2025/09/15/web/SpringBoot%E7%BB%9F%E4%B8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档详细记录了如何在Spring Boot项目中实现统一的错误处理系统，包括标准化错误码、统一响应格式、全局异常处理和断言工具类。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java/com/yourpackage/</span><br><span class="line">├── constant/</span><br><span class="line">│   └── ErrorCode.java          # 标准化错误码枚举</span><br><span class="line">├── vo/</span><br><span class="line">│   └── ApiResponse.java        # 统一响应结果类</span><br><span class="line">├── exception/</span><br><span class="line">│   ├── BusinessException.java  # 业务异常类</span><br><span class="line">│   └── GlobalExceptionHandler.java # 全局异常处理器</span><br><span class="line">├── util/</span><br><span class="line">│   └── AssertUtil.java         # 断言工具类</span><br><span class="line">└── controller/</span><br><span class="line">    └── TestController.java     # 使用示例</span><br></pre></td></tr></table></figure>

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>在 <code>pom.xml</code> 中添加验证依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建标准化错误码枚举"><a href="#2-创建标准化错误码枚举" class="headerlink" title="2. 创建标准化错误码枚举"></a>2. 创建标准化错误码枚举</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/constant/ErrorCode.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准化错误码枚举</span></span><br><span class="line"><span class="comment"> * 格式: ABCD-EFGH</span></span><br><span class="line"><span class="comment"> * ABCD: 模块标识</span></span><br><span class="line"><span class="comment"> * EFGH: 错误序号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功状态码</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;0000-0000&quot;</span>, <span class="string">&quot;操作成功&quot;</span>, HttpStatus.OK),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通用错误码</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;1000-0001&quot;</span>, <span class="string">&quot;系统繁忙，请稍后重试&quot;</span>, HttpStatus.INTERNAL_SERVER_ERROR),</span><br><span class="line">    PARAM_ERROR(<span class="string">&quot;1000-0002&quot;</span>, <span class="string">&quot;参数错误&quot;</span>, HttpStatus.BAD_REQUEST),</span><br><span class="line">    UNAUTHORIZED(<span class="string">&quot;1000-0003&quot;</span>, <span class="string">&quot;未授权访问&quot;</span>, HttpStatus.UNAUTHORIZED),</span><br><span class="line">    FORBIDDEN(<span class="string">&quot;1000-0004&quot;</span>, <span class="string">&quot;权限不足&quot;</span>, HttpStatus.FORBIDDEN),</span><br><span class="line">    NOT_FOUND(<span class="string">&quot;1000-0005&quot;</span>, <span class="string">&quot;资源不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    METHOD_NOT_ALLOWED(<span class="string">&quot;1000-0006&quot;</span>, <span class="string">&quot;请求方法不支持&quot;</span>, HttpStatus.METHOD_NOT_ALLOWED),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用户模块错误码</span></span><br><span class="line">    USER_NOT_FOUND(<span class="string">&quot;2000-0001&quot;</span>, <span class="string">&quot;用户不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    USER_ALREADY_EXISTS(<span class="string">&quot;2000-0002&quot;</span>, <span class="string">&quot;用户已存在&quot;</span>, HttpStatus.CONFLICT),</span><br><span class="line">    USER_DISABLED(<span class="string">&quot;2000-0003&quot;</span>, <span class="string">&quot;用户已被禁用&quot;</span>, HttpStatus.FORBIDDEN),</span><br><span class="line">    PASSWORD_ERROR(<span class="string">&quot;2000-0004&quot;</span>, <span class="string">&quot;密码错误&quot;</span>, HttpStatus.UNAUTHORIZED),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 认证授权错误码</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="string">&quot;3000-0001&quot;</span>, <span class="string">&quot;令牌已过期&quot;</span>, HttpStatus.UNAUTHORIZED),</span><br><span class="line">    TOKEN_INVALID(<span class="string">&quot;3000-0002&quot;</span>, <span class="string">&quot;令牌无效&quot;</span>, HttpStatus.UNAUTHORIZED),</span><br><span class="line">    LOGIN_REQUIRED(<span class="string">&quot;3000-0003&quot;</span>, <span class="string">&quot;请先登录&quot;</span>, HttpStatus.UNAUTHORIZED),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 问卷模块错误码</span></span><br><span class="line">    SURVEY_NOT_FOUND(<span class="string">&quot;4000-0001&quot;</span>, <span class="string">&quot;问卷不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    SURVEY_EXPIRED(<span class="string">&quot;4000-0002&quot;</span>, <span class="string">&quot;问卷已过期&quot;</span>, HttpStatus.BAD_REQUEST),</span><br><span class="line">    SURVEY_ALREADY_SUBMITTED(<span class="string">&quot;4000-0003&quot;</span>, <span class="string">&quot;问卷已提交&quot;</span>, HttpStatus.CONFLICT),</span><br><span class="line">    QUESTION_NOT_FOUND(<span class="string">&quot;4000-0004&quot;</span>, <span class="string">&quot;问题不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据模块错误码</span></span><br><span class="line">    DATA_NOT_FOUND(<span class="string">&quot;5000-0001&quot;</span>, <span class="string">&quot;数据不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    DATA_DUPLICATE(<span class="string">&quot;5000-0002&quot;</span>, <span class="string">&quot;数据重复&quot;</span>, HttpStatus.CONFLICT),</span><br><span class="line">    DATA_INVALID(<span class="string">&quot;5000-0003&quot;</span>, <span class="string">&quot;数据无效&quot;</span>, HttpStatus.BAD_REQUEST),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件模块错误码</span></span><br><span class="line">    FILE_UPLOAD_FAILED(<span class="string">&quot;6000-0001&quot;</span>, <span class="string">&quot;文件上传失败&quot;</span>, HttpStatus.INTERNAL_SERVER_ERROR),</span><br><span class="line">    FILE_NOT_FOUND(<span class="string">&quot;6000-0002&quot;</span>, <span class="string">&quot;文件不存在&quot;</span>, HttpStatus.NOT_FOUND),</span><br><span class="line">    FILE_TYPE_NOT_SUPPORTED(<span class="string">&quot;6000-0003&quot;</span>, <span class="string">&quot;文件类型不支持&quot;</span>, HttpStatus.BAD_REQUEST),</span><br><span class="line">    FILE_SIZE_EXCEEDED(<span class="string">&quot;6000-0004&quot;</span>, <span class="string">&quot;文件大小超出限制&quot;</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpStatus httpStatus;</span><br><span class="line"></span><br><span class="line">    ErrorCode(String code, String message, HttpStatus httpStatus) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.httpStatus = httpStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpStatus <span class="title function_">getHttpStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> httpStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ErrorCode <span class="title function_">fromCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ErrorCode errorCode : ErrorCode.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errorCode.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> errorCode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SYSTEM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建统一响应结果类"><a href="#3-创建统一响应结果类" class="headerlink" title="3. 创建统一响应结果类"></a>3. 创建统一响应结果类</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/vo/ApiResponse.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.constant.ErrorCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一API响应结果类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiResponse</span><span class="params">(String code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(ErrorCode.SUCCESS.getCode(), ErrorCode.SUCCESS.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(ErrorCode.SUCCESS.getCode(), ErrorCode.SUCCESS.getMessage(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(ErrorCode.SUCCESS.getCode(), message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(errorCode.getCode(), errorCode.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(errorCode.getCode(), message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(code, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(ErrorCode errorCode, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(errorCode.getCode(), errorCode.getMessage(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponseBuilder&lt;T&gt; <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponseBuilder</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ApiResponseBuilder</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ApiResponseBuilder&lt;T&gt; <span class="title function_">code</span><span class="params">(String code)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ApiResponseBuilder&lt;T&gt; <span class="title function_">message</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ApiResponseBuilder&lt;T&gt; <span class="title function_">data</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ApiResponse&lt;T&gt; <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(code, message, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and Setters</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123; <span class="built_in">this</span>.code = code; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123; <span class="built_in">this</span>.message = message; &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123; <span class="built_in">this</span>.data = data; &#125;</span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getTimestamp</span><span class="params">()</span> &#123; <span class="keyword">return</span> timestamp; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTimestamp</span><span class="params">(LocalDateTime timestamp)</span> &#123; <span class="built_in">this</span>.timestamp = timestamp; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-创建业务异常类"><a href="#4-创建业务异常类" class="headerlink" title="4. 创建业务异常类"></a>4. 创建业务异常类</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/exception/BusinessException.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.constant.ErrorCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ErrorCode errorCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="built_in">this</span>.args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="built_in">this</span>.args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, Object... args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="built_in">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage(), cause);</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="built_in">this</span>.args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ErrorCode <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getArgs() &#123;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFormattedMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="literal">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(errorCode.getMessage(), args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-创建全局异常处理器"><a href="#5-创建全局异常处理器" class="headerlink" title="5. 创建全局异常处理器"></a>5. 创建全局异常处理器</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/exception/GlobalExceptionHandler.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.constant.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.vo.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.HttpRequestMethodNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MissingServletRequestParameterException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleBusinessException</span><span class="params">(BusinessException e)</span> &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;业务异常: &#123;&#125;&quot;</span>, e.getFormattedMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(e.getErrorCode(), e.getFormattedMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理参数校验异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> bindingResult.getFieldErrors().stream()</span><br><span class="line">                .map(FieldError::getDefaultMessage)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        logger.warn(<span class="string">&quot;参数校验异常: &#123;&#125;&quot;</span>, errorMessage);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理绑定异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleBindException</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> e.getFieldErrors().stream()</span><br><span class="line">                .map(FieldError::getDefaultMessage)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        logger.warn(<span class="string">&quot;绑定异常: &#123;&#125;&quot;</span>, errorMessage);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理约束违反异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleConstraintViolationException</span><span class="params">(ConstraintViolationException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> e.getConstraintViolations().stream()</span><br><span class="line">                .map(ConstraintViolation::getMessage)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        logger.warn(<span class="string">&quot;约束违反异常: &#123;&#125;&quot;</span>, errorMessage);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理缺少请求参数异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MissingServletRequestParameterException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleMissingServletRequestParameterException</span><span class="params">(MissingServletRequestParameterException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;缺少参数: &quot;</span> + e.getParameterName();</span><br><span class="line">        logger.warn(<span class="string">&quot;缺少请求参数: &#123;&#125;&quot;</span>, errorMessage);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求方法不支持异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpRequestMethodNotSupportedException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleHttpRequestMethodNotSupportedException</span><span class="params">(HttpRequestMethodNotSupportedException e)</span> &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;请求方法不支持: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.METHOD_NOT_ALLOWED, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理404错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NoHandlerFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleNoHandlerFoundException</span><span class="params">(NoHandlerFoundException e)</span> &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;404错误: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.NOT_FOUND, <span class="string">&quot;接口不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理参数类型不匹配异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentTypeMismatchException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleMethodArgumentTypeMismatchException</span><span class="params">(MethodArgumentTypeMismatchException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;参数类型错误: &quot;</span> + e.getName();</span><br><span class="line">        logger.warn(<span class="string">&quot;参数类型不匹配: &#123;&#125;&quot;</span>, errorMessage);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理HTTP消息不可读异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleHttpMessageNotReadableException</span><span class="params">(HttpMessageNotReadableException e)</span> &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;HTTP消息不可读: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.PARAM_ERROR, <span class="string">&quot;请求参数格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理未捕获的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;未捕获的异常&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-创建断言工具类"><a href="#6-创建断言工具类" class="headerlink" title="6. 创建断言工具类"></a>6. 创建断言工具类</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/util/AssertUtil.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.constant.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 断言工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssertUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isTrue</span><span class="params">(<span class="type">boolean</span> expression, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isTrue</span><span class="params">(<span class="type">boolean</span> expression, ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isFalse</span><span class="params">(<span class="type">boolean</span> expression, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isNull</span><span class="params">(Object object, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(Object object, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notBlank</span><span class="params">(String str, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(str)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Collection&lt;?&gt; collection, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(collection)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Map&lt;?, ?&gt; map, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(map)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Object[] array, ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="literal">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errorCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-使用示例"><a href="#7-使用示例" class="headerlink" title="7. 使用示例"></a>7. 使用示例</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/controller/TestController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.constant.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.util.AssertUtil;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.vo.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用断言工具类</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/assert&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">testAssert</span><span class="params">(<span class="meta">@RequestParam</span> String param)</span> &#123;</span><br><span class="line">        AssertUtil.notBlank(param, ErrorCode.PARAM_ERROR, <span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;参数有效: &quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抛出业务异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/business-exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">testBusinessException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.USER_NOT_FOUND, <span class="string">&quot;用户ID: 123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回统一响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/response&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;UserVO&gt; <span class="title function_">testResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;zhangsan@example.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数校验异常</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/validation&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">testValidation</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(<span class="string">&quot;参数校验通过&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Long id;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">        <span class="comment">// 构造函数、getter、setter省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">        <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">        <span class="comment">// getter、setter省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><h3 id="1-错误码命名规范"><a href="#1-错误码命名规范" class="headerlink" title="1. 错误码命名规范"></a>1. 错误码命名规范</h3><ul>
<li>模块标识 + 错误序号</li>
<li>4位模块标识 + 4位错误序号</li>
<li>示例：USER-0001（用户模块第1个错误）</li>
</ul>
<h3 id="2-异常处理规范"><a href="#2-异常处理规范" class="headerlink" title="2. 异常处理规范"></a>2. 异常处理规范</h3><ul>
<li>业务异常使用 <code>BusinessException</code></li>
<li>参数校验使用断言工具类</li>
<li>系统异常由全局异常处理器统一处理</li>
</ul>
<h3 id="3-响应格式规范"><a href="#3-响应格式规范" class="headerlink" title="3. 响应格式规范"></a>3. 响应格式规范</h3><ul>
<li>所有接口返回 <code>ApiResponse&lt;T&gt;</code></li>
<li>成功使用 <code>ApiResponse.success(data)</code></li>
<li>失败使用 <code>ApiResponse.error(errorCode)</code></li>
</ul>
<h3 id="4-日志记录规范"><a href="#4-日志记录规范" class="headerlink" title="4. 日志记录规范"></a>4. 日志记录规范</h3><ul>
<li>业务异常记录WARN级别日志</li>
<li>系统异常记录ERROR级别日志</li>
<li>参数异常记录WARN级别日志</li>
</ul>
<h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><p>启动项目后，可以通过以下接口测试：</p>
<ul>
<li><code>GET /test/assert?param=hello</code> - 测试断言工具</li>
<li><code>GET /test/business-exception</code> - 测试业务异常</li>
<li><code>GET /test/response</code> - 测试统一响应</li>
<li><code>POST /test/validation</code> - 测试参数校验</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring统一日志输出实现指南</title>
    <url>/2025/09/15/web/Spring%E7%BB%9F%E4%B8%80%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档详细记录了如何在Spring Boot项目中实现统一的日志输出系统，包括标准化日志格式、分环境配置、日志分类存储、接口访问日志和业务日志记录。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java/com/yourpackage/</span><br><span class="line">├── util/</span><br><span class="line">│   └── LogUtil.java            # 统一日志工具类</span><br><span class="line">├── interceptor/</span><br><span class="line">│   └── LogInterceptor.java     # 请求日志拦截器</span><br><span class="line">├── aspect/</span><br><span class="line">│   └── LogAspect.java          # 日志切面</span><br><span class="line">├── config/</span><br><span class="line">│   └── LogConfig.java          # 日志配置</span><br><span class="line">├── annotation/</span><br><span class="line">│   └── LogBusiness.java        # 业务日志注解</span><br><span class="line">└── controller/</span><br><span class="line">    └── LogDemoController.java  # 使用示例</span><br><span class="line"></span><br><span class="line">src/main/resources/</span><br><span class="line">├── logback-spring.xml          # 日志配置文件</span><br><span class="line">└── application.yml             # 环境配置</span><br></pre></td></tr></table></figure>

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>在 <code>pom.xml</code> 中添加必要依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JSON处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建日志配置文件"><a href="#2-创建日志配置文件" class="headerlink" title="2. 创建日志配置文件"></a>2. 创建日志配置文件</h3><p><strong>文件路径</strong>: <code>src/main/resources/logback-spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件的存储地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;YourAppName&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 主日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 错误日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_error.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 业务日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;BUSINESS_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_business.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_business.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SQL日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;SQL_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_sql.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;_sql.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;SQL_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;SQL_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.yourpackage&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;BUSINESS_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.yourpackage&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;BUSINESS_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.yourpackage&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;BUSINESS_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-更新application-yml配置"><a href="#3-更新application-yml配置" class="headerlink" title="3. 更新application.yml配置"></a>3. 更新application.yml配置</h3><p><strong>文件路径</strong>: <code>src/main/resources/application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>  <span class="comment"># 默认使用开发环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.yourpackage:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org.mybatis:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">java.sql:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n&quot;</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level [%logger&#123;50&#125;] - %msg%n&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-创建统一日志工具类"><a href="#4-创建统一日志工具类" class="headerlink" title="4. 创建统一日志工具类"></a>4. 创建统一日志工具类</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/util/LogUtil.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一日志工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Logger实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title function_">getLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LoggerFactory.getLogger(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求追踪ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTraceId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        MDC.put(<span class="string">&quot;traceId&quot;</span>, traceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求追踪ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTraceId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MDC.get(<span class="string">&quot;traceId&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除请求追踪ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearTraceId</span><span class="params">()</span> &#123;</span><br><span class="line">        MDC.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录业务日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logBusiness</span><span class="params">(Logger logger, String operation, Object request, Object response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[业务日志] 操作: %s, 请求: %s, 响应: %s&quot;</span>,</span><br><span class="line">                operation,</span><br><span class="line">                objectMapper.writeValueAsString(request),</span><br><span class="line">                objectMapper.writeValueAsString(response)</span><br><span class="line">            );</span><br><span class="line">            logger.info(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录业务日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录接口访问日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logAccess</span><span class="params">(Logger logger, String method, String uri, String ip, </span></span><br><span class="line"><span class="params">                               Object params, Object result, <span class="type">long</span> duration)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[接口访问] %s %s, IP: %s, 参数: %s, 耗时: %dms, 结果: %s&quot;</span>,</span><br><span class="line">                method, uri, ip,</span><br><span class="line">                objectMapper.writeValueAsString(params),</span><br><span class="line">                duration,</span><br><span class="line">                objectMapper.writeValueAsString(result)</span><br><span class="line">            );</span><br><span class="line">            logger.info(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录接口访问日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录异常日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logException</span><span class="params">(Logger logger, String operation, Throwable throwable, Object... params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[异常日志] 操作: %s, 参数: %s, 异常: %s&quot;</span>,</span><br><span class="line">                operation,</span><br><span class="line">                params.length &gt; <span class="number">0</span> ? objectMapper.writeValueAsString(params) : <span class="string">&quot;无&quot;</span>,</span><br><span class="line">                throwable.getMessage()</span><br><span class="line">            );</span><br><span class="line">            logger.error(logMessage, throwable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录异常日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录性能日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logPerformance</span><span class="params">(Logger logger, String operation, <span class="type">long</span> duration, Object... params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[性能日志] 操作: %s, 耗时: %dms, 参数: %s&quot;</span>,</span><br><span class="line">                operation, duration,</span><br><span class="line">                params.length &gt; <span class="number">0</span> ? objectMapper.writeValueAsString(params) : <span class="string">&quot;无&quot;</span></span><br><span class="line">            );</span><br><span class="line">            logger.info(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录性能日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录调试日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logDebug</span><span class="params">(Logger logger, String operation, Object... params)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                    <span class="string">&quot;[调试日志] 操作: %s, 参数: %s&quot;</span>,</span><br><span class="line">                    operation,</span><br><span class="line">                    params.length &gt; <span class="number">0</span> ? objectMapper.writeValueAsString(params) : <span class="string">&quot;无&quot;</span></span><br><span class="line">                );</span><br><span class="line">                logger.debug(logMessage);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;记录调试日志失败&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录SQL日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logSql</span><span class="params">(Logger logger, String sql, Object... params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[SQL日志] SQL: %s, 参数: %s&quot;</span>,</span><br><span class="line">                sql,</span><br><span class="line">                params.length &gt; <span class="number">0</span> ? objectMapper.writeValueAsString(params) : <span class="string">&quot;无&quot;</span></span><br><span class="line">            );</span><br><span class="line">            logger.debug(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录SQL日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录用户操作日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logUserAction</span><span class="params">(Logger logger, String userId, String action, Object details)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[用户操作] 用户ID: %s, 操作: %s, 详情: %s&quot;</span>,</span><br><span class="line">                userId, action,</span><br><span class="line">                objectMapper.writeValueAsString(details)</span><br><span class="line">            );</span><br><span class="line">            logger.info(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录用户操作日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录安全日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logSecurity</span><span class="params">(Logger logger, String userId, String action, String ip, Object details)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">logMessage</span> <span class="operator">=</span> String.format(</span><br><span class="line">                <span class="string">&quot;[安全日志] 用户ID: %s, 操作: %s, IP: %s, 详情: %s&quot;</span>,</span><br><span class="line">                userId, action, ip,</span><br><span class="line">                objectMapper.writeValueAsString(details)</span><br><span class="line">            );</span><br><span class="line">            logger.warn(logMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录安全日志失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建日志上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">buildContext</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        context.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-创建日志拦截器"><a href="#5-创建日志拦截器" class="headerlink" title="5. 创建日志拦截器"></a>5. 创建日志拦截器</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/interceptor/LogInterceptor.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.util.LogUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogInterceptor.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">START_TIME_ATTR</span> <span class="operator">=</span> <span class="string">&quot;requestStartTime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LogUtil.setTraceId();</span><br><span class="line">        request.setAttribute(START_TIME_ATTR, System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; context = LogUtil.buildContext(<span class="string">&quot;uri&quot;</span>, request.getRequestURI());</span><br><span class="line">        context.put(<span class="string">&quot;method&quot;</span>, request.getMethod());</span><br><span class="line">        context.put(<span class="string">&quot;ip&quot;</span>, getClientIpAddress(request));</span><br><span class="line">        context.put(<span class="string">&quot;params&quot;</span>, request.getParameterMap());</span><br><span class="line">        </span><br><span class="line">        LogUtil.logDebug(logger, <span class="string">&quot;请求开始&quot;</span>, context);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) request.getAttribute(START_TIME_ATTR);</span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.currentTimeMillis() - (startTime != <span class="literal">null</span> ? startTime : System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        LogUtil.logAccess(logger, </span><br><span class="line">            request.getMethod(), </span><br><span class="line">            request.getRequestURI(), </span><br><span class="line">            getClientIpAddress(request),</span><br><span class="line">            request.getParameterMap(),</span><br><span class="line">            Map.of(<span class="string">&quot;status&quot;</span>, response.getStatus()),</span><br><span class="line">            duration);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (ex != <span class="literal">null</span>) &#123;</span><br><span class="line">            LogUtil.logException(logger, request.getRequestURI() + <span class="string">&quot; 请求异常&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LogUtil.clearTraceId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getClientIpAddress</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xForwardedFor</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (xForwardedFor != <span class="literal">null</span> &amp;&amp; !xForwardedFor.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> xForwardedFor.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].trim();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">xRealIp</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (xRealIp != <span class="literal">null</span> &amp;&amp; !xRealIp.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> xRealIp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-创建日志配置类"><a href="#6-创建日志配置类" class="headerlink" title="6. 创建日志配置类"></a>6. 创建日志配置类</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/config/LogConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.interceptor.LogInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogInterceptor logInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(logInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/swagger-ui/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v3/api-docs/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/actuator/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/error&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-创建日志切面"><a href="#7-创建日志切面" class="headerlink" title="7. 创建日志切面"></a>7. 创建日志切面</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/aspect/LogAspect.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.annotation.LogBusiness;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.util.LogUtil;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;within(@org.springframework.stereotype.Controller *) || &quot; +</span></span><br><span class="line"><span class="meta">              &quot;within(@org.springframework.web.bind.annotation.RestController *) || &quot; +</span></span><br><span class="line"><span class="meta">              &quot;within(@org.springframework.stereotype.Service *) || &quot; +</span></span><br><span class="line"><span class="meta">              &quot;within(@org.springframework.stereotype.Repository *)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applicationPackagePointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;applicationPackagePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">thrownException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LogUtil.logDebug(logger, <span class="string">&quot;方法调用开始&quot;</span>, operation, joinPoint.getArgs());</span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            thrownException = e;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (thrownException != <span class="literal">null</span>) &#123;</span><br><span class="line">                LogUtil.logException(logger, operation, thrownException, joinPoint.getArgs());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogUtil.logPerformance(logger, operation, duration, joinPoint.getArgs(), result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.yourpackage.annotation.LogBusiness)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBusinessPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;logBusinessPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logBusinessAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">thrownException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            thrownException = e;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (thrownException == <span class="literal">null</span>) &#123;</span><br><span class="line">                LogUtil.logBusiness(logger, operation, joinPoint.getArgs(), result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-创建业务日志注解"><a href="#8-创建业务日志注解" class="headerlink" title="8. 创建业务日志注解"></a>8. 创建业务日志注解</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/annotation/LogBusiness.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogBusiness &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logParams</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logResult</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-使用示例"><a href="#9-使用示例" class="headerlink" title="9. 使用示例"></a>9. 使用示例</h3><p><strong>文件路径</strong>: <code>src/main/java/com/yourpackage/controller/LogDemoController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourpackage.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yourpackage.annotation.LogBusiness;</span><br><span class="line"><span class="keyword">import</span> com.yourpackage.util.LogUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/log-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogDemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogDemoController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testLog</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;test&quot;)</span> String name)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        LogUtil.logDebug(logger, <span class="string">&quot;测试日志记录&quot;</span>, params);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">        result.put(<span class="string">&quot;timestamp&quot;</span>, System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        LogUtil.logBusiness(logger, <span class="string">&quot;测试业务操作&quot;</span>, params, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/business&quot;)</span></span><br><span class="line">    <span class="meta">@LogBusiness(&quot;用户查询操作&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testBusinessLog</span><span class="params">(<span class="meta">@RequestParam</span> String userId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        result.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user-action&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testUserAction</span><span class="params">(<span class="meta">@RequestParam</span> String userId, <span class="meta">@RequestParam</span> String action)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; details = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        details.put(<span class="string">&quot;action&quot;</span>, action);</span><br><span class="line">        details.put(<span class="string">&quot;time&quot;</span>, System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        LogUtil.logUserAction(logger, userId, action, details);</span><br><span class="line">        LogUtil.logSecurity(logger, userId, action, <span class="string">&quot;127.0.0.1&quot;</span>, details);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;logged&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日志文件说明"><a href="#日志文件说明" class="headerlink" title="日志文件说明"></a>日志文件说明</h2><h3 id="日志文件分类"><a href="#日志文件分类" class="headerlink" title="日志文件分类"></a>日志文件分类</h3><ul>
<li><strong>主日志</strong>: <code>logs/YourAppName.log</code> - 应用主要日志</li>
<li><strong>错误日志</strong>: <code>logs/YourAppName_error.log</code> - 仅包含ERROR级别日志</li>
<li><strong>业务日志</strong>: <code>logs/YourAppName_business.log</code> - 业务操作日志</li>
<li><strong>SQL日志</strong>: <code>logs/YourAppName_sql.log</code> - 数据库操作日志</li>
<li><strong>访问日志</strong>: <code>logs/YourAppName_access.log</code> - 接口访问日志（自动生成）</li>
</ul>
<h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-01-15 10:30:45.123 [http-nio-8080-exec-1] INFO  [c.y.c.LogDemoController] - [接口访问] GET /api/test, IP: 127.0.0.1, 参数: &#123;&quot;id&quot;:1&#125;, 耗时: 150ms, 结果: &#123;&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><h3 id="1-日志级别规范"><a href="#1-日志级别规范" class="headerlink" title="1. 日志级别规范"></a>1. 日志级别规范</h3><ul>
<li><strong>DEBUG</strong>: 调试信息，仅在开发环境使用</li>
<li><strong>INFO</strong>: 业务操作、接口访问、性能统计</li>
<li><strong>WARN</strong>: 业务警告、安全相关操作</li>
<li><strong>ERROR</strong>: 系统异常、业务异常</li>
</ul>
<h3 id="2-日志记录场景"><a href="#2-日志记录场景" class="headerlink" title="2. 日志记录场景"></a>2. 日志记录场景</h3><table>
<thead>
<tr>
<th>场景类型</th>
<th>记录方式</th>
<th>日志级别</th>
</tr>
</thead>
<tbody><tr>
<td>接口访问</td>
<td>自动记录</td>
<td>INFO</td>
</tr>
<tr>
<td>业务操作</td>
<td>@LogBusiness注解</td>
<td>INFO</td>
</tr>
<tr>
<td>异常处理</td>
<td>LogUtil.logException</td>
<td>ERROR</td>
</tr>
<tr>
<td>性能统计</td>
<td>LogUtil.logPerformance</td>
<td>INFO</td>
</tr>
<tr>
<td>用户操作</td>
<td>LogUtil.logUserAction</td>
<td>INFO</td>
</tr>
<tr>
<td>安全操作</td>
<td>LogUtil.logSecurity</td>
<td>WARN</td>
</tr>
</tbody></table>
<h3 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h3><h4 id="基础日志记录"><a href="#基础日志记录" class="headerlink" title="基础日志记录"></a>基础日志记录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取logger</span></span><br><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogUtil.getLogger(YourClass.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录业务日志</span></span><br><span class="line">LogUtil.logBusiness(logger, <span class="string">&quot;用户登录&quot;</span>, loginRequest, loginResponse);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录异常日志</span></span><br><span class="line">LogUtil.logException(logger, <span class="string">&quot;订单处理&quot;</span>, exception, orderId, userId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录性能日志</span></span><br><span class="line">LogUtil.logPerformance(logger, <span class="string">&quot;数据库查询&quot;</span>, duration, queryParams);</span><br></pre></td></tr></table></figure>

<h4 id="注解方式记录"><a href="#注解方式记录" class="headerlink" title="注解方式记录"></a>注解方式记录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LogBusiness(&quot;用户注册&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">registerUser</span><span class="params">(UserRegisterRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法执行后会自动记录业务日志</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请求追踪"><a href="#请求追踪" class="headerlink" title="请求追踪"></a>请求追踪</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在拦截器中自动设置</span></span><br><span class="line">LogUtil.setTraceId(); <span class="comment">// 设置追踪ID</span></span><br><span class="line"><span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> LogUtil.getTraceId(); <span class="comment">// 获取追踪ID</span></span><br><span class="line">LogUtil.clearTraceId(); <span class="comment">// 清理追踪ID</span></span><br></pre></td></tr></table></figure>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="开发环境-dev"><a href="#开发环境-dev" class="headerlink" title="开发环境 (dev)"></a>开发环境 (dev)</h3><ul>
<li>日志级别: DEBUG</li>
<li>输出: 控制台 + 所有文件</li>
<li>SQL日志: 开启</li>
</ul>
<h3 id="测试环境-test"><a href="#测试环境-test" class="headerlink" title="测试环境 (test)"></a>测试环境 (test)</h3><ul>
<li>日志级别: INFO</li>
<li>输出: 文件输出</li>
<li>SQL日志: 关闭</li>
</ul>
<h3 id="生产环境-prod"><a href="#生产环境-prod" class="headerlink" title="生产环境 (prod)"></a>生产环境 (prod)</h3><ul>
<li>日志级别: INFO</li>
<li>输出: 文件输出</li>
<li>SQL日志: 关闭</li>
</ul>
<h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><p>启动项目后，可以通过以下接口测试：</p>
<ul>
<li><code>GET /log-demo/test?name=test</code> - 测试基础日志</li>
<li><code>GET /log-demo/business?userId=123</code> - 测试业务日志注解</li>
<li><code>GET /log-demo/user-action?userId=123&amp;action=login</code> - 测试用户操作日志</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><strong>日志文件大小</strong>: 单个日志文件最大100MB，保留30天</li>
<li><strong>敏感信息</strong>: 避免在日志中记录密码、token等敏感信息</li>
<li><strong>性能影响</strong>: 生产环境避免记录过多DEBUG日志</li>
<li><strong>JSON序列化</strong>: 复杂对象确保有默认构造函数</li>
<li><strong>追踪ID</strong>: 所有日志自动包含追踪ID，便于链路追踪</li>
</ol>
<h2 id="扩展建议"><a href="#扩展建议" class="headerlink" title="扩展建议"></a>扩展建议</h2><ol>
<li><strong>ELK集成</strong>: 可接入ELK进行日志分析和可视化</li>
<li><strong>异步日志</strong>: 高并发场景可使用异步日志提升性能</li>
<li><strong>日志脱敏</strong>: 对敏感信息进行脱敏处理</li>
<li><strong>链路追踪</strong>: 集成Zipkin或SkyWalking进行分布式追踪</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>golang为啥运行过程占用内存小</title>
    <url>/2025/08/09/web/golang%E4%B8%BA%E5%95%A5%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%B0%8F/</url>
    <content><![CDATA[<p>Go 语言在运行过程中看起来“占用内存小”，其实是多种设计权衡和运行时优化共同作用的结果。下面从几个核心方面解释它为什么能给人一种“省内存”的印象，并澄清一些常见误解。</p>
<hr>
<h3 id="一、值类型与内存布局紧凑"><a href="#一、值类型与内存布局紧凑" class="headerlink" title="一、值类型与内存布局紧凑"></a>一、<strong>值类型与内存布局紧凑</strong></h3><ul>
<li><p><strong>大多数类型是值类型</strong>：<br>Go 中 <code>int</code>、<code>float</code>、<code>struct</code> 甚至 <code>array</code> 都是值类型，直接内联在栈或对象内存中，避免了 Java&#x2F;C# 那种“一切皆对象”带来的额外对象头（object header）开销。<br>举例：  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="type">int</span> &#125; <span class="comment">// 16 字节，无额外头部</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>内存对齐优化</strong>：<br>Go 编译器自动重排结构体字段，减少填充（padding），使内存布局更紧凑。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化前：24 字节（因对齐填充）</span></span><br><span class="line"><span class="keyword">type</span> Bad <span class="keyword">struct</span>&#123; a <span class="type">bool</span>; b <span class="type">int64</span>; c <span class="type">bool</span> &#125;</span><br><span class="line"><span class="comment">// 优化后：16 字节（字段重排后）</span></span><br><span class="line"><span class="keyword">type</span> Good <span class="keyword">struct</span>&#123; b <span class="type">int64</span>; a, c <span class="type">bool</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="二、高效的垃圾回收（GC）"><a href="#二、高效的垃圾回收（GC）" class="headerlink" title="二、高效的垃圾回收（GC）"></a>二、<strong>高效的垃圾回收（GC）</strong></h3><ul>
<li><p><strong>并发、三色标记清除</strong>：<br>Go 的 GC 是并发执行的，标记阶段与用户代码并行，减少了 STW（Stop-The-World）时间。虽然 GC 本身会占用额外内存（如标记位图、写屏障缓冲区），但 <strong>GC 触发阈值动态调整</strong> 使得内存不会无限增长：  </p>
<ul>
<li>当存活对象比例较高时，GC 会更频繁地运行，避免内存堆积。  </li>
<li>当内存压力小时，GC 会减少频率，降低 CPU 开销。</li>
</ul>
</li>
<li><p><strong>内存释放回操作系统</strong>：<br>Go 1.19+ 改进了内存释放策略，<strong>空闲内存会定期归还给操作系统</strong>（通过 <code>madvise</code> 系统调用），而其他语言（如 Java）的 JVM 通常不会主动归还内存给 OS，导致看起来“占用高”。</p>
</li>
</ul>
<hr>
<h3 id="三、运行时内存分配优化"><a href="#三、运行时内存分配优化" class="headerlink" title="三、运行时内存分配优化"></a>三、<strong>运行时内存分配优化</strong></h3><ul>
<li><p><strong>基于 TCMalloc 的内存分配器</strong>：<br>Go 的运行时（runtime）使用线程本地缓存（mcache）、中心缓存（mcentral）和页堆（mheap）三级结构，减少锁竞争和碎片。小对象（&lt;32KB）直接从线程缓存分配，避免系统调用。</p>
</li>
<li><p><strong>对象复用（sync.Pool）</strong>：<br>标准库提供 <code>sync.Pool</code> 临时对象池，复用高频创建的临时对象（如 <code>bytes.Buffer</code>），显著减少 GC 压力。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bufPool = sync.Pool&#123;</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>(bytes.Buffer) &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="四、无虚拟机（VM）开销"><a href="#四、无虚拟机（VM）开销" class="headerlink" title="四、无虚拟机（VM）开销"></a>四、<strong>无虚拟机（VM）开销</strong></h3><ul>
<li><strong>直接编译为机器码</strong>：<br>Go 是静态编译语言，生成的二进制直接运行在硬件上，无需像 JVM 或 Python 解释器那样加载庞大的运行时环境（如 JVM 的类加载器、字节码验证器）。<br>例如：一个最小 Go HTTP 服务编译后二进制约 5-10MB，而 JVM 启动时仅 heap 就可能占用数十 MB。</li>
</ul>
<hr>
<h3 id="五、语言设计限制内存滥用"><a href="#五、语言设计限制内存滥用" class="headerlink" title="五、语言设计限制内存滥用"></a>五、<strong>语言设计限制内存滥用</strong></h3><ul>
<li><p><strong>无隐式内存共享</strong>：<br>Go 的并发模型基于 CSP（通信顺序进程），鼓励通过 channel 传递数据副本，而非共享内存。这减少了因共享数据结构导致的长期内存占用。</p>
</li>
<li><p><strong>切片（slice）的底层数组复用</strong>：<br>切片操作可能共享底层数组，但若发生扩容（如 <code>append</code> 超过容量），会重新分配并复制数据，避免过度占用内存。</p>
</li>
</ul>
<hr>
<h3 id="常见误解澄清"><a href="#常见误解澄清" class="headerlink" title="常见误解澄清"></a>常见误解澄清</h3><ol>
<li><p><strong>“Go 程序内存占用一定比 Java&#x2F;Python 小”</strong>：<br>若程序本身逻辑需要大量数据（如加载 1GB 文件到内存），任何语言都会占用 1GB。Go 的“省内存”体现在<strong>运行时额外开销小</strong>，而非魔法般减少实际需求。</p>
</li>
<li><p><strong>“Go 的 GC 不如 Java 的 G1 高效”</strong>：<br>现代 Go 的 GC 吞吐量可能低于 G1，但延迟更低（默认 &lt;1ms），且内存释放更积极。这是针对服务端场景的权衡。</p>
</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Go 的“内存占用小”是<strong>语言设计（值类型、紧凑布局） + 运行时优化（GC、分配器） + 无 VM 开销</strong>的综合结果。它并非绝对节省内存，而是<strong>在同等业务需求下，运行时额外负担更小</strong>，尤其适合云原生、微服务等对资源敏感的场景。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang使用api启动或停止goroutine</title>
    <url>/2025/08/13/web/golang%E4%BD%BF%E7%94%A8api%E5%90%AF%E5%8A%A8%E6%88%96%E5%81%9C%E6%AD%A2goroutine/</url>
    <content><![CDATA[<p><em>在 Go 语言中，Goroutine 是一种轻量级的线程实现，它使得并发编程变得非常容易。然而，在实际应用中，我们常常需要对这些 Goroutine 进行管理，例如启动和停止它们。本文将详细介绍如何通过 API 来启动和停止 Goroutine，同时会对提供的示例代码进行深入分析。</em></p>
<h2 id="代码功能概述"><a href="#代码功能概述" class="headerlink" title="代码功能概述"></a>代码功能概述</h2><p>我们的目标是创建一个可以通过 HTTP API 启动和停止特定任务的服务。这些任务以 Goroutine 的形式运行，并且会按照一定的时间间隔执行特定的操作。具体来说，我们有两个任务：<code>SellerWellOrder</code> 和 <code>WpsTask</code>，它们会每 5 秒打印一条日志信息。</p>
<h2 id="代码详细分析"><a href="#代码详细分析" class="headerlink" title="代码详细分析"></a>代码详细分析</h2><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> GoroutineInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    stopCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    wg     sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GoroutineManager <span class="keyword">struct</span> &#123;</span><br><span class="line">    goroutines <span class="keyword">map</span>[<span class="type">string</span>]*GoroutineInfo</span><br><span class="line">    mu         sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>GoroutineInfo</code> 结构体用于存储每个 Goroutine 的停止通道 <code>stopCh</code> 和等待组 <code>wg</code>。<code>stopCh</code> 用于向 Goroutine 发送停止信号，<code>wg</code> 用于等待 Goroutine 执行完毕。</li>
<li><code>GoroutineManager</code> 结构体用于管理所有的 Goroutine。<code>goroutines</code> 是一个映射，键为任务类型字符串，值为 <code>GoroutineInfo</code> 指针。<code>mu</code> 是一个互斥锁，用于保证对 <code>goroutines</code> 的并发安全访问。</li>
</ul>
<h3 id="初始化-Goroutine-管理器"><a href="#初始化-Goroutine-管理器" class="headerlink" title="初始化 Goroutine 管理器"></a>初始化 Goroutine 管理器</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGoroutineManager</span><span class="params">()</span></span> *GoroutineManager &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;GoroutineManager&#123;</span><br><span class="line">        goroutines: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*GoroutineInfo),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NewGoroutineManager</code> 函数用于创建一个新的 <code>GoroutineManager</code> 实例，并初始化 <code>goroutines</code> 映射。</p>
<h3 id="任务函数"><a href="#任务函数" class="headerlink" title="任务函数"></a>任务函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SellWellTask</span><span class="params">(stopCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line">    <span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">            log.Println(<span class="string">&quot;SellerWellTask running...&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WpsTaskS</span><span class="params">(stopCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line">    <span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">            log.Println(<span class="string">&quot;WpsTask running...&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>SellWellTask</code> 和 <code>WpsTaskS</code> 是两个具体的任务函数，它们会在一个无限循环中运行。使用 <code>time.Ticker</code> 每 5 秒触发一次操作，打印相应的日志信息。当接收到 <code>stopCh</code> 通道的信号时，函数会退出循环并返回。</li>
</ul>
<h3 id="启动任务"><a href="#启动任务" class="headerlink" title="启动任务"></a>启动任务</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *GoroutineManager)</span></span> StartTask(taskType <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    m.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> m.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> _, exists := m.goroutines[taskType]; exists &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;task already running&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info := &amp;GoroutineInfo&#123;</span><br><span class="line">        stopCh: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">    info.wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    m.goroutines[taskType] = info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(info *GoroutineInfo)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;%s task stopped&quot;</span>, taskType)</span><br><span class="line">            info.wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> taskType &#123;</span><br><span class="line">        <span class="keyword">case</span> SellerWellOrder:</span><br><span class="line">            SellWellTask(info.stopCh)</span><br><span class="line">        <span class="keyword">case</span> WpsTask:</span><br><span class="line">            WpsTaskS(info.stopCh)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>StartTask</code> 方法用于启动一个新的任务。首先，它会加锁以保证并发安全。然后检查该任务是否已经在运行，如果是则返回错误。接着创建一个新的 <code>GoroutineInfo</code> 实例，并将其添加到 <code>goroutines</code> 映射中。最后，启动一个新的 Goroutine 来执行相应的任务。</li>
</ul>
<h3 id="停止任务"><a href="#停止任务" class="headerlink" title="停止任务"></a>停止任务</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *GoroutineManager)</span></span> StopTask(taskType <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    m.mu.Lock()</span><br><span class="line">    info, exists := m.goroutines[taskType]</span><br><span class="line">    <span class="keyword">if</span> !exists &#123;</span><br><span class="line">        m.mu.Unlock()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">delete</span>(m.goroutines, taskType)</span><br><span class="line">    m.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(info.stopCh)</span><br><span class="line">    info.wg.Wait()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>StopTask</code> 方法用于停止一个正在运行的任务。首先，它会加锁并检查该任务是否存在。如果存在，则从 <code>goroutines</code> 映射中删除该任务，并解锁。然后关闭 <code>stopCh</code> 通道，向 Goroutine 发送停止信号，并等待 Goroutine 执行完毕。</li>
</ul>
<h3 id="HTTP-API-处理"><a href="#HTTP-API-处理" class="headerlink" title="HTTP API 处理"></a>HTTP API 处理</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoroutineManager</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    manager := NewGoroutineManager()</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/start&quot;</span>, authMiddleware(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> req <span class="keyword">struct</span> &#123;</span><br><span class="line">            TaskType <span class="type">string</span> <span class="string">`json:&quot;task_type&quot;`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;Invalid request body&quot;</span>, http.StatusBadRequest)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        err := manager.StartTask(req.TaskType)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        json.NewEncoder(w).Encode(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;started&quot;</span>, <span class="string">&quot;task_type&quot;</span>: req.TaskType&#125;)</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/stop&quot;</span>, authMiddleware(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> req <span class="keyword">struct</span> &#123;</span><br><span class="line">            TaskType <span class="type">string</span> <span class="string">`json:&quot;task_type&quot;`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;Invalid request body&quot;</span>, http.StatusBadRequest)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stopped := manager.StopTask(req.TaskType)</span><br><span class="line">        <span class="keyword">if</span> !stopped &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;Task not found&quot;</span>, http.StatusNotFound)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        json.NewEncoder(w).Encode(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;stopped&quot;</span>&#125;)</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">&quot;Server starting on :8080&quot;</span>)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>/start</code> 端点用于启动一个任务。它接收一个 JSON 格式的请求体，包含 <code>task_type</code> 字段。如果请求方法不是 POST 或者请求体解析失败，会返回相应的错误信息。如果任务启动成功，会返回一个 JSON 响应，包含任务状态和任务类型。</li>
<li><code>/stop</code> 端点用于停止一个任务。同样接收一个 JSON 格式的请求体，包含 <code>task_type</code> 字段。如果任务不存在，会返回 <code>Task not found</code> 错误信息。如果任务停止成功，会返回一个 JSON 响应，包含任务状态。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述代码，我们实现了一个可以通过 HTTP API 启动和停止 Goroutine 的服务。核心要点包括使用通道来控制 Goroutine 的生命周期，使用互斥锁来保证并发安全，以及使用 HTTP 服务器来处理 API 请求。这种方法使得我们可以方便地管理多个并发任务，提高了系统的可维护性和灵活性。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis和hibernate区别</title>
    <url>/2025/03/28/web/mybatis%E5%92%8Chibernate%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>MyBatis和Hibernate是Java开发中常用的两种持久化框架，它们各有特点，下面为你详细介绍两者的区别：</p>
<h3 id="1-开发理念"><a href="#1-开发理念" class="headerlink" title="1. 开发理念"></a>1. 开发理念</h3><ul>
<li><strong>MyBatis</strong>：它是半自动化的ORM（对象关系映射）框架。它需要开发者手动编写SQL语句，这样可以对SQL进行精细的控制，在处理复杂的业务逻辑和查询时更加灵活。</li>
<li><strong>Hibernate</strong>：属于全自动化的ORM框架。它通过映射配置文件或者注解，让开发者无需编写SQL语句，Hibernate会根据对象的操作自动生成相应的SQL，能提高开发效率。</li>
</ul>
<h3 id="2-SQL控制"><a href="#2-SQL控制" class="headerlink" title="2. SQL控制"></a>2. SQL控制</h3><ul>
<li><strong>MyBatis</strong>：开发者直接编写SQL语句，能根据不同的业务需求编写最优化的SQL，对数据库的操作细节有完全的控制权。比如在处理复杂的多表关联查询时，可以灵活地编写SQL语句。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserList&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    SELECT * FROM users WHERE age &gt; #&#123;age&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li><strong>Hibernate</strong>：由框架自动生成SQL，开发者对SQL的控制相对较少。虽然Hibernate也提供了一些自定义SQL的方式，但在复杂业务场景下，可能无法像MyBatis那样灵活地控制SQL。</li>
</ul>
<h3 id="3-学习成本"><a href="#3-学习成本" class="headerlink" title="3. 学习成本"></a>3. 学习成本</h3><ul>
<li><strong>MyBatis</strong>：由于需要手动编写SQL，开发者需要对数据库和SQL有较好的掌握，学习成本主要集中在SQL编写和MyBatis的配置上。</li>
<li><strong>Hibernate</strong>：需要理解对象关系映射的概念和Hibernate的各种特性，如缓存机制、事务管理等，学习曲线相对较陡。</li>
</ul>
<h3 id="4-性能"><a href="#4-性能" class="headerlink" title="4. 性能"></a>4. 性能</h3><ul>
<li><strong>MyBatis</strong>：因为开发者可以手动优化SQL，在处理复杂查询和大数据量操作时，性能可能会更好。</li>
<li><strong>Hibernate</strong>：自动生成的SQL可能不是最优的，在处理复杂查询时性能可能不如MyBatis。不过，Hibernate有完善的缓存机制，在一定程度上可以提高性能。</li>
</ul>
<h3 id="5-维护性"><a href="#5-维护性" class="headerlink" title="5. 维护性"></a>5. 维护性</h3><ul>
<li><strong>MyBatis</strong>：由于SQL语句分散在各个XML文件或注解中，当业务逻辑发生变化时，需要修改对应的SQL语句，维护起来相对复杂。</li>
<li><strong>Hibernate</strong>：由于自动生成SQL，当业务逻辑发生变化时，只需要修改对象的映射关系，维护相对简单。</li>
</ul>
<h3 id="6-适用场景"><a href="#6-适用场景" class="headerlink" title="6. 适用场景"></a>6. 适用场景</h3><ul>
<li><strong>MyBatis</strong>：适用于对SQL性能要求较高、业务逻辑复杂、需要对数据库进行精细控制的场景，如电商系统、金融系统等。</li>
<li><strong>Hibernate</strong>：适用于业务逻辑相对简单、开发效率要求较高的场景，如小型的企业管理系统、信息系统等。</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot调用七牛云上传功能代码实现</title>
    <url>/2023/03/25/web/springboot%E8%B0%83%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="springboot调用七牛云上传功能代码实现"><a href="#springboot调用七牛云上传功能代码实现" class="headerlink" title="springboot调用七牛云上传功能代码实现"></a>springboot调用七牛云上传功能代码实现</h3><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><ul>
<li>maven引入<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.qiniu&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;<span class="number">7.2</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>在application.yml文件中配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oss:</span><br><span class="line">  qiniu:</span><br><span class="line">    domain: http://rwg3rc3zm.hd-bkt.clouddn.com</span><br><span class="line">    accessKey: ****************</span><br><span class="line">    secretKey: **************</span><br><span class="line">    bucketName: tongyouyun</span><br></pre></td></tr></table></figure></li>
<li>新建配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColudConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛域名domain</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;oss.qiniu.domain&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qiniuDomain;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛ACCESS_KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;oss.qiniu.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qiniuAccessKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛SECRET_KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;oss.qiniu.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qiniuSecretKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛空间名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;oss.qiniu.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qiniuBucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上面我们将上传文件的配置封装起来。</li>
<li>新建抽象类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.personapi.config.ColudConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UploadImageService</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ColudConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">uploadQNImg</span><span class="params">(FileInputStream file, String path)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>实现抽象类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.personapi.config.ColudConfig;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.Zone;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadImageServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UploadImageService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 七牛文件上传管理器</span></span><br><span class="line">    <span class="keyword">private</span> UploadManager uploadManager;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="comment">// 七牛认证管理</span></span><br><span class="line">    <span class="keyword">private</span> Auth auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UploadImageServiceImpl</span><span class="params">(ColudConfig config)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 构造一个带指定Zone对象的配置类, 注意这里的Zone.zone0需要根据主机选择</span></span><br><span class="line">        uploadManager = <span class="keyword">new</span> <span class="title class_">UploadManager</span>(<span class="keyword">new</span> <span class="title class_">Configuration</span>(Zone.zone0()));</span><br><span class="line">        auth = Auth.create(config.getQiniuAccessKey(), config.getQiniuSecretKey());</span><br><span class="line">        <span class="comment">// 根据命名空间生成的上传token</span></span><br><span class="line">        token = auth.uploadToken(config.getQiniuBucketName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadQNImg</span><span class="params">(FileInputStream file, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 上传图片文件</span></span><br><span class="line">            <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> uploadManager.put(file, key, token, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (!res.isOK()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传七牛出错：&quot;</span> + res.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 解析上传成功的结果</span></span><br><span class="line">            <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(res.bodyString(), DefaultPutRet.class);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> config.getQiniuDomain() + <span class="string">&quot;/&quot;</span> + putRet.key;</span><br><span class="line">            <span class="comment">// 这个returnPath是获得到的外链地址,通过这个地址可以直接打开图片</span></span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (QiniuException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在util包中新建工具类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRandomImgName</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fileName == <span class="literal">null</span> || fileName.isEmpty()) || index == -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> fileName.substring(index);</span><br><span class="line">    <span class="comment">// 生成UUID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 生成上传至云服务器的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;code/test/&quot;</span> + DateUtil.today() + <span class="string">&quot;-&quot;</span> + uuid + suffix;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>返回保存路径</li>
<li>接下来就是在控制类中封装接口了<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.personapi.Util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.personapi.pojo.UploadImageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UploadImageService uploadImageService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/image&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ResponseEntity&lt;String&gt; <span class="title function_">upLoadImage</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用工具类根据上传文件生成唯一图片名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">imgName</span> <span class="operator">=</span> StringUtil.getRandomImgName(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> (FileInputStream) file.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> uploadImageService.uploadQNImg(inputStream, imgName);</span><br><span class="line">            System.out.print(<span class="string">&quot;七牛云返回的图片链接:&quot;</span> + path);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
七牛云的上传功能就整合完成了</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>vue引入表情包</title>
    <url>/2024/08/28/web/vue%E5%BC%95%E5%85%A5%E8%A1%A8%E6%83%85%E5%8C%85/</url>
    <content><![CDATA[<h3 id="引入emoji-mart-vue-fast表情包"><a href="#引入emoji-mart-vue-fast表情包" class="headerlink" title="引入emoji-mart-vue-fast表情包"></a>引入emoji-mart-vue-fast表情包</h3><ul>
<li>表情包在我们的生活中必不可少，那我我们如何使用vue引入表情包</li>
<li>这里我使用的是emoji-mart-vue-fast <a class="link"   href="https://github.com/serebrov/emoji-mart-vue" >github地址<i class="fas fa-external-link-alt"></i></a></li>
<li>npm下载emoji-mart-vue-fast<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install emoji-mart-vue-fast</span><br></pre></td></tr></table></figure>
下载完成后直接引入，完整代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Picker</span> <span class="attr">:data</span>=<span class="string">&quot;emojiIndex&quot;</span> <span class="attr">set</span>=<span class="string">&quot;twitter&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;showEmoji&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;picker&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;helloData.content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/data/all.json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Import default CSS</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&quot;emoji-mart-vue-fast/css/emoji-mart.css&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/src&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> helloData = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">content</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emojiIndex = <span class="keyword">new</span> <span class="title class_">EmojiIndex</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emojisOutput = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">showEmoji</span> = (<span class="params">emoji</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      helloData.<span class="property">content</span> += emoji.<span class="property">native</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      emojiIndex,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      emojisOutput,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showEmoji,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      helloData</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Picker</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.picker</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>:relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>:<span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.span</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>:relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
这里我是用的是vue3，vue2引入方式有所不同<figure class="highlight js"><figcaption><span>&#123;2,4&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 2:</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast&quot;</span>;</span><br><span class="line"><span class="comment">// Vue 3, import components from `/src`:</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/src&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue表情包</title>
    <url>/2024/01/26/web/vue%E8%A1%A8%E6%83%85%E5%8C%85/</url>
    <content><![CDATA[<h3 id="引入emoji-mart-vue-fast表情包"><a href="#引入emoji-mart-vue-fast表情包" class="headerlink" title="引入emoji-mart-vue-fast表情包"></a>引入emoji-mart-vue-fast表情包</h3><h4 id="表情包在我们的生活中必不可少，那我我们如何使用vue引入表情包"><a href="#表情包在我们的生活中必不可少，那我我们如何使用vue引入表情包" class="headerlink" title="表情包在我们的生活中必不可少，那我我们如何使用vue引入表情包"></a>表情包在我们的生活中必不可少，那我我们如何使用vue引入表情包</h4><p>这里我使用的是emoji-mart-vue-fast<br><a class="link"   href="https://github.com/serebrov/emoji-mart-vue" >github地址<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>npm下载emoji-mart-vue-fast<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install emoji-mart-vue-fast</span><br></pre></td></tr></table></figure>
下载完成后直接引入，完整代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Picker</span> <span class="attr">:data</span>=<span class="string">&quot;emojiIndex&quot;</span> <span class="attr">set</span>=<span class="string">&quot;twitter&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;showEmoji&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;picker&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;helloData.content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/data/all.json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Import default CSS</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&quot;emoji-mart-vue-fast/css/emoji-mart.css&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/src&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> helloData = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">content</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emojiIndex = <span class="keyword">new</span> <span class="title class_">EmojiIndex</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emojisOutput = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">showEmoji</span> = (<span class="params">emoji</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      helloData.<span class="property">content</span> += emoji.<span class="property">native</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      emojiIndex,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      emojisOutput,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showEmoji,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      helloData</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Picker</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.picker</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>:relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>:<span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.span</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>:relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
这里我是用的是vue3，vue2引入方式有所不同<figure class="highlight js"><figcaption><span>&#123;2,4&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 2:</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast&quot;</span>;</span><br><span class="line"><span class="comment">// Vue 3, import components from `/src`:</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span>, <span class="title class_">EmojiIndex</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue-fast/src&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用el-image-viewer查看大图</title>
    <url>/2024/01/25/web/%E4%BD%BF%E7%94%A8el-image-viewer%E6%9F%A5%E7%9C%8B%E5%A4%A7%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="使用el-image-viewer查看大图"><a href="#使用el-image-viewer查看大图" class="headerlink" title="使用el-image-viewer查看大图"></a>使用el-image-viewer查看大图</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-image-viewer</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-if</span>=<span class="string">&quot;showImageViewer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:url-list</span>=<span class="string">&quot;imageList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:z-index</span>=<span class="string">&quot;9999&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:initial-index</span>=<span class="string">&quot;selectedIndex&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">close</span>=<span class="string">&quot;handleImageHide&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">el-image-viewer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 点击图片缩略图时触发显示图片 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;(image, index) in imageList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:</span> <span class="attr">src</span>=<span class="string">&quot;image&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;handleImageClick(index)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&quot;cursor: pointer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">ElImageViewer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;text&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ElImageViewer</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> showImageViewer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> selectedIndex = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> imageList = <span class="title function_">ref</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;https://bing.com/th?id=OHR.ItalyCinqueTerre_ZH-CN6495965228_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;https://img3.wallspic.com/previews/5/7/7/3/7/173775/173775-dong_tian-a_er_bei_si_shan-fa_guo-jia_na_da-luo_ye_song-x750.jpg&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleImageClick</span> = (<span class="params">index</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showImageViewer.<span class="property">value</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      selectedIndex.<span class="property">value</span> = index</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleImageHide</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showImageViewer.<span class="property">value</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      imageList,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      showImageViewer,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      selectedIndex,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleImageClick,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleImageHide</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="解释一下el-image-viewer的属性"><a href="#解释一下el-image-viewer的属性" class="headerlink" title="解释一下el-image-viewer的属性"></a>解释一下el-image-viewer的属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-image-viewer</span><br><span class="line">  v-<span class="keyword">if</span>=<span class="string">&quot;showImageViewer&quot;</span></span><br><span class="line">  :url-list=<span class="string">&quot;imageList&quot;</span></span><br><span class="line">  :z-index=<span class="string">&quot;9999&quot;</span></span><br><span class="line">  :initial-index=<span class="string">&quot;selectedIndex&quot;</span></span><br><span class="line">  @close=<span class="string">&quot;handleImageHide&quot;</span></span><br><span class="line">&gt;&lt;/el-image-viewer&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>showImageViewer我们定义这个函数让它初始化为false</li>
<li>url-list也就是绑定图片的列表<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imageList = <span class="title function_">ref</span>([</span><br><span class="line">  <span class="string">&#x27;https://bing.com/th?id=OHR.ItalyCinqueTerre_ZH-CN6495965228_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;https://img3.wallspic.com/previews/5/7/7/3/7/173775/173775-dong_tian-a_er_bei_si_shan-fa_guo-jia_na_da-luo_ye_song-x750.jpg&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>
可以看到我在imageList中给了两张图片的url</li>
<li>initial-index属性，当我们点击图片的时候它默认会从imageList列表中的第一张图片进行播放，而我们想让它从点击的图片播放，将handleImageClick(index)绑定在图片上，我们就可以获取图片的索引了。</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Golang-Gin</title>
    <url>/2023/08/12/web/%E5%88%9D%E8%AF%86Golang-Gin/</url>
    <content><![CDATA[<h3 id="go拉取包命令"><a href="#go拉取包命令" class="headerlink" title="go拉取包命令"></a>go拉取包命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get</span><br><span class="line">go get -u github.com/gin-gonic/gin  <span class="comment">#拉取gin包</span></span><br></pre></td></tr></table></figure>
<h3 id="Gin接口"><a href="#Gin接口" class="headerlink" title="Gin接口"></a>Gin接口</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Go中间件 拦截器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		context.Set(<span class="string">&quot;usersession&quot;</span>, <span class="string">&quot;userid-1&quot;</span>)</span><br><span class="line">		context.Next() <span class="comment">//放行</span></span><br><span class="line">		<span class="comment">//context.Abort() //阻止</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ginServer := gin.Default()</span><br><span class="line">	<span class="comment">//ginServer.Use(myHandler()) //注册中间件之后全局使用</span></span><br><span class="line">	ginServer.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		context.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;hello,gin&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加载静态页面</span></span><br><span class="line">	ginServer.LoadHTMLGlob(<span class="string">&quot;../templates/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">	ginServer.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		context.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;This is go give message&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接受前端传过来的参数</span></span><br><span class="line">	ginServer.GET(<span class="string">&quot;/user/Info&quot;</span>, myHandler(), <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//取出中间件的值</span></span><br><span class="line">		usersession := context.MustGet(<span class="string">&quot;usersession&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">		log.Println(usersession)</span><br><span class="line"></span><br><span class="line">		userid := context.Query(<span class="string">&quot;userid&quot;</span>)</span><br><span class="line">		username := context.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">		context.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;userid&quot;</span>:   userid,</span><br><span class="line">			<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接受参数</span></span><br><span class="line">	ginServer.GET(<span class="string">&quot;/user/Info/:userid/:username&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		userid := context.Param(<span class="string">&quot;userid&quot;</span>)</span><br><span class="line">		username := context.Param(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">		context.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;userid&quot;</span>:   userid,</span><br><span class="line">			<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//json序列化</span></span><br><span class="line">	ginServer.POST(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		data, _ := context.GetRawData()</span><br><span class="line">		<span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">		_ = json.Unmarshal(data, &amp;m)</span><br><span class="line">		context.JSON(http.StatusOK, m)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//表单传递</span></span><br><span class="line">	<span class="comment">//支持函数式编程</span></span><br><span class="line">	ginServer.POST(<span class="string">&quot;/user/add&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		username := context.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">		password := context.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		context.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>:      <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">			<span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重定向</span></span><br><span class="line">	ginServer.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">		context.Redirect(http.StatusMovedPermanently, <span class="string">&quot;https://lllcnm.cn&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//路由组</span></span><br><span class="line">	<span class="comment">//userGroup := ginServer.Group(&quot;/user&quot;)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	userGroup.GET(&quot;/add&quot;)</span></span><br><span class="line">	<span class="comment">//	userGroup.GET(&quot;/login&quot;)</span></span><br><span class="line">	<span class="comment">//	userGroup.GET(&quot;/logout&quot;, func(context *gin.Context) &#123;</span></span><br><span class="line">	<span class="comment">//		//处理请求</span></span><br><span class="line">	<span class="comment">//	&#125;)</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//服务器端口</span></span><br><span class="line">	ginServer.Run(<span class="string">&quot;:8082&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开启多线程"><a href="#开启多线程" class="headerlink" title="开启多线程"></a>开启多线程</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">@author LJN</span></span><br><span class="line"><span class="comment">@dev 多线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//go的多线程-协程</span></span><br><span class="line">	<span class="keyword">go</span> goRun()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;main ========&gt;&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goRun</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;goRun ========&gt;&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Gin连接数据库"><a href="#Gin连接数据库" class="headerlink" title="Gin连接数据库"></a>Gin连接数据库</h3><ul>
<li>下载mysql驱动包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	username = <span class="string">&quot;root&quot;</span></span><br><span class="line">	password = <span class="string">&quot;fdsafdfa&quot;</span></span><br><span class="line">	host     = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">	port     = <span class="number">3306</span></span><br><span class="line">	dbname   = <span class="string">&quot;test&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User2 <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID       <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConnectToDb</span><span class="params">()</span></span> (*sql.DB, <span class="type">error</span>) &#123;</span><br><span class="line">	dataSourceName := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%d)/%s&quot;</span>, username, password, host, port, dbname)</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dataSourceName) <span class="comment">// 打开名为 MySQL 的SQL数据库</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	err = db.Ping() <span class="comment">// 检查连接是否建立，以确保连接存活</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Gin数据库增删改查"><a href="#Gin数据库增删改查" class="headerlink" title="Gin数据库增删改查"></a>Gin数据库增删改查</h3><h4 id="使用原生sql语句进行增删改查"><a href="#使用原生sql语句进行增删改查" class="headerlink" title="使用原生sql语句进行增删改查"></a>使用原生sql语句进行增删改查</h4><ol>
<li>在UserController中编写增删改查方法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;main/dao&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">	BaseController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">查询单个用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span></span> GetUser(ctx *gin.Context) &#123;</span><br><span class="line">	<span class="comment">// 获取数据库连接</span></span><br><span class="line">	db, err := dao.ConnectToDb()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		user   dao.User2</span><br><span class="line">		result gin.H</span><br><span class="line">	)</span><br><span class="line">	id := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">	log.Println(<span class="string">&quot;获取到的id&quot;</span>, id)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查询用户</span></span><br><span class="line">	row := db.QueryRow(<span class="string">&quot;SELECT * FROM user2 WHERE id = ?&quot;</span>, id)</span><br><span class="line">	err = row.Scan(&amp;user.ID, &amp;user.Name, &amp;user.Password)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err == sql.ErrNoRows &#123;</span><br><span class="line">			result = gin.H&#123;</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;User not found&quot;</span>,</span><br><span class="line">			&#125;</span><br><span class="line">			ctx.JSON(http.StatusNotFound, result)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;Error retrieving user:&quot;</span>, err)</span><br><span class="line">			ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error retrieving user&quot;</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = gin.H&#123;<span class="string">&quot;data&quot;</span>: user&#125;</span><br><span class="line">		ctx.JSON(http.StatusOK, result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span></span> GetAllUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectToDb()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database find error ....&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		users  []dao.User2</span><br><span class="line">		result gin.H</span><br><span class="line">	)</span><br><span class="line">	rows, err := db.Query(<span class="string">&quot;SELECT * FROM user2&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Error retrieving users:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error retrieving users&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> rows.Close()</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> user dao.User2</span><br><span class="line">		err := rows.Scan(&amp;user.ID, &amp;user.Name, &amp;user.Password)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;Error scanning user data:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		users = <span class="built_in">append</span>(users, user)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	result = gin.H&#123;<span class="string">&quot;data&quot;</span>: users&#125;</span><br><span class="line">	ctx.JSON(http.StatusOK, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span></span> AddUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectToDb()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;database connect error&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> newUser dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;newUser); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 插入用户到数据库</span></span><br><span class="line">	_, err = db.Exec(<span class="string">&quot;INSERT INTO user2(name,password) VALUES (?,?)&quot;</span>, newUser.Name, newUser.Password)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Error adding user:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error adding User&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusCreated, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;User added successfully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span></span> UpdateUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectToDb()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;databse connection error&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	id := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> updateUser dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;updateUser); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err = db.Exec(<span class="string">&quot;UPDATE user2 SET name = ?,password = ? WHERE id = ?&quot;</span>,</span><br><span class="line">		updateUser.Name, updateUser.Password, id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Error adding user:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error adding User&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusCreated, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Update User is Succefully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span></span> DeleteUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectToDb()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;databse connection error&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	id := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">	_, err = db.Exec(<span class="string">&quot;DELETE FROM user2 WHERE id = ?&quot;</span>, id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Error adding user:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error adding User&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Delete User is Succefully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
2.在router目录下UserRouter文件中注册路由<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;main/controller&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserRouterInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">	user := &amp;controller.UserController&#123;&#125;</span><br><span class="line">	userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		userGroup.GET(<span class="string">&quot;/getUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.GetUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.GET(<span class="string">&quot;/getAllUser&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.GetAllUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.POST(<span class="string">&quot;/addUser&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.AddUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.POST(<span class="string">&quot;/updateUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.UpdateUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.DELETE(<span class="string">&quot;/deleteUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.DeleteUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
3.在main.go文件中引入注册路由</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;main/router&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	router.StudyRouterInit(r)</span><br><span class="line">	router.UserRouterInit(r)</span><br><span class="line">	r.Run(<span class="string">&quot;:8082&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="上面是原生sql语句执行增删改查的方法-下面我们将介绍gorm增删改查"><a href="#上面是原生sql语句执行增删改查的方法-下面我们将介绍gorm增删改查" class="headerlink" title="上面是原生sql语句执行增删改查的方法,下面我们将介绍gorm增删改查"></a>上面是原生sql语句执行增删改查的方法,下面我们将介绍gorm增删改查</h4><h3 id="GORM增删改查"><a href="#GORM增删改查" class="headerlink" title="GORM增删改查"></a>GORM增删改查</h3><p><a class="link"   href="https://gorm.io/zh_CN/docs/create.html" >官方文档<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://jasperxu.github.io/gorm-zh/" >教学文档<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>先来了解一下orm<blockquote>
<p>ORM（Object Relational Mapping，对象关系映射）框架是一种将数据库表与对象模型之间进行映射的技术。它允许开发者使用面向对象的方式操作数据库，而无需直接编写SQL语句</p>
</blockquote>
</li>
<li>引入gorm包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/jinzhu/gorm</span><br></pre></td></tr></table></figure></li>
</ul>
<p>1.在UserGormController添加增删改查方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;main/dao&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserGormController <span class="keyword">struct</span> &#123;</span><br><span class="line">	BaseController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">查询单个用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *UserGormController)</span></span> SearchUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectDataBase()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	userID := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> user dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := db.Where(<span class="string">&quot;id = ?&quot;</span>, userID).First(&amp;user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;User not found:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusNotFound, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;User not found&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ctx.JSON(http.StatusOK, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *UserGormController)</span></span> SearchAllUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectDataBase()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> users []dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := db.Find(&amp;users).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;User not found:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusNotFound, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;User not found&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusOK, users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *UserGormController)</span></span> UpdateUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectDataBase()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取要更新的用户ID</span></span><br><span class="line">	userID := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解析请求体中的用户名和密码</span></span><br><span class="line">	<span class="keyword">var</span> user dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Invalid request body:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Invalid request body&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新用户信息</span></span><br><span class="line">	<span class="keyword">if</span> err := db.Model(&amp;dao.User2&#123;&#125;).Where(<span class="string">&quot;id = ?&quot;</span>, userID).Updates(user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Error updating user:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error updating user&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ctx.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;User updated successfully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *UserGormController)</span></span> AddUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectDataBase()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> user dao.User2</span><br><span class="line">	<span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Invalid request body:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Invalid request body&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := db.Create(&amp;user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Add User Error !&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Add User Error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusCreated, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Add User is successfully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *UserGormController)</span></span> DeleteUser(ctx *gin.Context) &#123;</span><br><span class="line">	db, err := dao.ConnectDataBase()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Database connection error:&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	userID := ctx.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err := db.Where(<span class="string">&quot;id = ?&quot;</span>, userID).Delete(&amp;dao.User2&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;Delete User Error !&quot;</span>, err)</span><br><span class="line">		ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Delete User Error&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Delete User is successfully&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.在UserGormRouter注册方法路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;main/controller&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserGormInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">	user := controller.UserGormController&#123;&#125;</span><br><span class="line">	userGroup := r.Group(<span class="string">&quot;/gorm&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		userGroup.GET(<span class="string">&quot;/searchUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.SearchUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.GET(<span class="string">&quot;/searchAllUser&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.SearchAllUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.POST(<span class="string">&quot;/updateUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.UpdateUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.POST(<span class="string">&quot;/addUser&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.AddUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">		userGroup.DELETE(<span class="string">&quot;/deleteUser/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">			user.DeleteUser(context)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在main.go文件中执行该路由组<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">router.UserGormInit(r)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Gin邮件服务"><a href="#Gin邮件服务" class="headerlink" title="Gin邮件服务"></a>Gin邮件服务</h3><ul>
<li>下载依赖包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get gopkg.in/gomail.v2</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;gopkg.in/gomail.v2&quot;</span></span><br><span class="line">	<span class="string">&quot;gopkg.in/ini.v1&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MailService <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	username <span class="type">string</span></span><br><span class="line">	password <span class="type">string</span></span><br><span class="line">	host     <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitMail</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cfg, err := ini.Load(<span class="string">&quot;D:\\Go-Web\\Blog-go\\main\\config\\config.ini&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;读取失败:&quot;</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	username = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;username&quot;</span>).String()</span><br><span class="line">	password = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;password&quot;</span>).String()</span><br><span class="line">	host = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;host&quot;</span>).String()</span><br><span class="line">	log.Println(<span class="string">&quot;==========================&gt;邮件配置构建&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendEmail</span><span class="params">(to <span class="type">string</span>, sub <span class="type">string</span>, body <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	m := gomail.NewMessage()</span><br><span class="line">	m.SetHeader(<span class="string">&quot;From&quot;</span>, username)</span><br><span class="line">	m.SetHeader(<span class="string">&quot;To&quot;</span>, to)</span><br><span class="line">	m.SetHeader(<span class="string">&quot;Subject&quot;</span>, sub)</span><br><span class="line">	m.SetBody(<span class="string">&quot;text/plain&quot;</span>, body)</span><br><span class="line">	d := gomail.NewDialer(host, <span class="number">465</span>, username, password)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := d.DialAndSend(m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Gin加载ini配置文件"><a href="#Gin加载ini配置文件" class="headerlink" title="Gin加载ini配置文件"></a>Gin加载ini配置文件</h3><ul>
<li>加载依赖包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get gopkg.in/ini.v1</span><br></pre></td></tr></table></figure></li>
<li>config.ini文件<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Mail]</span></span><br><span class="line"><span class="attr">username</span> = <span class="number">1323231313</span>@qq.com</span><br><span class="line"><span class="attr">password</span> = fdsfasfdafdsfdf</span><br><span class="line"><span class="attr">port</span> = <span class="number">465</span></span><br><span class="line"><span class="attr">host</span> = smtp.qq.com</span><br><span class="line"></span><br><span class="line"><span class="section">[Mysql]</span></span><br><span class="line"><span class="attr">url</span> = root:fdfsfaliu@/personblog?charset=utf8&amp;parseTime=<span class="literal">True</span>&amp;loc=Local</span><br></pre></td></tr></table></figure></li>
<li>获取配置文件内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitMail</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cfg, err := ini.Load(<span class="string">&quot;D:\\Go-Web\\Blog-go\\main\\config\\config.ini&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;读取失败:&quot;</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	username = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;username&quot;</span>).String()</span><br><span class="line">	password = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;password&quot;</span>).String()</span><br><span class="line">	host = cfg.Section(<span class="string">&quot;Mail&quot;</span>).Key(<span class="string">&quot;host&quot;</span>).String()</span><br><span class="line">	log.Println(<span class="string">&quot;==========================&gt;邮件配置构建&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Gin-Redis"><a href="#Gin-Redis" class="headerlink" title="Gin Redis"></a>Gin Redis</h3><ul>
<li>redis基础用法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cfg, err := ini.Load(<span class="string">&quot;D:\\Go-Web\\Blog-go\\main\\config\\config.ini&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;读取失败:&quot;</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	host = cfg.Section(<span class="string">&quot;Redis&quot;</span>).Key(<span class="string">&quot;host&quot;</span>).String()</span><br><span class="line">	password = cfg.Section(<span class="string">&quot;Redis&quot;</span>).Key(<span class="string">&quot;password&quot;</span>).String()</span><br><span class="line">	strdb := cfg.Section(<span class="string">&quot;Redis&quot;</span>).Key(<span class="string">&quot;db&quot;</span>).String()</span><br><span class="line">	db, _ = strconv.Atoi(strdb)</span><br><span class="line">	rdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">		Addr:     host,</span><br><span class="line">		Password: password,</span><br><span class="line">		DB:       db,</span><br><span class="line">	&#125;)</span><br><span class="line">	log.Println(<span class="string">&quot;=========================&gt;Redis配置文件构建&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetCache</span><span class="params">(key <span class="type">string</span>, value <span class="type">string</span>, expiration time.Duration)</span></span> &#123;</span><br><span class="line">	err := rdb.Set(ctx, key, value, expiration).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;缓存设置成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(key <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	val, err := rdb.Get(ctx, key).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> val, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Delete</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	err := rdb.Del(ctx, key).Err()</span><br><span class="line">	log.Println(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetHashField</span><span class="params">(hashKey <span class="type">string</span>, field <span class="type">string</span>, value <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	err := rdb.HSet(ctx, hashKey, field, value).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;设置哈希表字段失败:&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;设置哈希表字段成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetHashField</span><span class="params">(hashKey <span class="type">string</span>, field <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	val, err := rdb.HGet(ctx, hashKey, field).Result()</span><br><span class="line">	<span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;哈希表字段不存在:&quot;</span>, field)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> val, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddToListLeft</span><span class="params">(listKey <span class="type">string</span>, values ...<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	err := rdb.LPush(ctx, listKey, values).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表左端添加元素失败:&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表左端添加元素成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddToListRight</span><span class="params">(listKey <span class="type">string</span>, values ...<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	err := rdb.RPush(ctx, listKey, values).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表右端添加元素失败:&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表右端添加元素成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetListRange</span><span class="params">(listKey <span class="type">string</span>, start, stop <span class="type">int64</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	vals, err := rdb.LRange(ctx, listKey, start, stop).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> vals, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddJSONToListLeft</span><span class="params">(listKey <span class="type">string</span>, item Item)</span></span> &#123;</span><br><span class="line">	itemJSON, err := json.Marshal(item)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;JSON 序列化失败:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = rdb.LPush(ctx, listKey, itemJSON).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表左端添加 JSON 元素失败:&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;向列表左端添加 JSON 元素成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetJSONListRange</span><span class="params">(listKey <span class="type">string</span>, start, stop <span class="type">int64</span>)</span></span> ([]Item, <span class="type">error</span>) &#123;</span><br><span class="line">	vals, err := rdb.LRange(ctx, listKey, start, stop).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> items []Item</span><br><span class="line">	<span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</span><br><span class="line">		<span class="keyword">var</span> item Item</span><br><span class="line">		err := json.Unmarshal([]<span class="type">byte</span>(val), &amp;item)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;JSON 反序列化失败:&quot;</span>, err)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			items = <span class="built_in">append</span>(items, item)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity基础</title>
    <url>/2023/08/21/%E5%8C%BA%E5%9D%97%E9%93%BE/Solidity%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="solidity基础语法"><a href="#solidity基础语法" class="headerlink" title="solidity基础语法"></a>solidity基础语法</h3><p>:::tip 导航<br><a class="link"   href="https://github.com/AmazingAng/WTF-Solidity/tree/main" >solidity教程<i class="fas fa-external-link-alt"></i></a><br>:::</p>
<h4 id="在编写sol文件之前要加上"><a href="#在编写sol文件之前要加上" class="headerlink" title="在编写sol文件之前要加上"></a>在编写sol文件之前要加上</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT </span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: SimPL-3.0</span><br></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>特殊变量&#x2F;全局变量，是全局可用的变量<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-40-33.png"
                       
                 ></p>
<h3 id="Solidity-特殊变量-全局变量"><a href="#Solidity-特殊变量-全局变量" class="headerlink" title="Solidity 特殊变量&#x2F;全局变量"></a>Solidity 特殊变量&#x2F;全局变量</h3><p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-41-09.png"
                       
                 ></p>
<h3 id="Solidity-变量作用域"><a href="#Solidity-变量作用域" class="headerlink" title="Solidity 变量作用域"></a>Solidity 变量作用域</h3><p>局部变量的作用域仅限于定义它们的函数，但是状态变量可以有四种作用域类型：</p>
<ul>
<li>public – 公共状态变量可以在内部访问，也可以从外部访问。对于公共状态变量，将自动生成一个 getter 函数。</li>
<li>private – 私有状态变量只能从当前合约内部访问，派生合约内不能访问。</li>
<li>internal – 内部状态变量只能从当前合约或其派生合约内访问。</li>
<li>external - 外部状态变量只能在合约之外调用 ，不能被合约内的其他函数调用。</li>
</ul>
<h3 id="Solidity-条件运算符"><a href="#Solidity-条件运算符" class="headerlink" title="Solidity 条件运算符"></a>Solidity 条件运算符</h3><pre><code>? : (条件运算符 )
</code></pre>
<p>如果条件为真 ? 则取值X : 否则值Y</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getResult() public pure returns(uint)&#123;</span><br><span class="line">   uint a = 1; // 局部变量</span><br><span class="line">   uint b = 2;</span><br><span class="line">   uint result = (a &gt; b? a: b);  //条件运算</span><br><span class="line">   return result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;0&quot;: &quot;uint256: 2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function whilexunhuan(uint loop) public pure returns (uint) &#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    uint i = 1;</span><br><span class="line">    while (i &lt;= loop) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function forXunhuan(uint loop) public pure returns (uint) &#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    for (uint i = 1;i &lt;= loop;i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function doWhileXunhuan(uint loop) public  pure returns (uint) &#123;</span><br><span class="line">     uint sum = 0;</span><br><span class="line">     uint i = 1;</span><br><span class="line">     do&#123;</span><br><span class="line">         sum += i;</span><br><span class="line">         i++;</span><br><span class="line">     &#125; while (i &lt; loop);</span><br><span class="line">         return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pure和view"><a href="#pure和view" class="headerlink" title="pure和view"></a>pure和view</h3><blockquote>
<p>solidity pure函数，也就是纯函数，是指函数不会读取或修改状态。<br> 换言之，solidity pure函数不会操作链上数据。<br>solidity view函数，也就是视图函数，是指函数只会读取状态，不会修改状态。<br> 换言之，solidity view函数只会读取链上数据，不会修改链上数据。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<p>Solidity构造函数是一个特殊函数，它仅能在智能合约部署的时候调用一次，之后就不能再次被调用。<br> Solidity构造函数常用来进行状态变量的初始化工作。<br>Solidity编译器中，使用关键词 constructor 作为构造函数。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint public user;</span><br><span class="line">address public owner;</span><br><span class="line"></span><br><span class="line">constructor (uint _user) &#123;</span><br><span class="line">    // 将部署者地址存储到owner变量</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    user = _user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="onlyOwner修饰符"><a href="#onlyOwner修饰符" class="headerlink" title="onlyOwner修饰符"></a>onlyOwner修饰符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @dev 调用者不是‘主人’，就会抛出异常</span><br><span class="line"> */</span><br><span class="line">modifier onlyOwner() &#123;</span><br><span class="line">  require(msg.sender == owner);</span><br><span class="line">  _;</span><br><span class="line">&#125;</span><br><span class="line">onlyOwner 函数修饰符是这么用的：</span><br><span class="line"></span><br><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  event LaughManiacally(string laughter);</span><br><span class="line"></span><br><span class="line">  //注意！ `onlyOwner`上场 :</span><br><span class="line">  function likeABoss() external onlyOwner &#123;</span><br><span class="line">    LaughManiacally(&quot;Muahahahaha&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solidity-加密函数"><a href="#Solidity-加密函数" class="headerlink" title="Solidity 加密函数"></a>Solidity 加密函数</h3><ul>
<li>keccak256(bytes memory) returns (bytes32) 计算输入的Keccak-256散列。</li>
<li>sha256(bytes memory) returns (bytes32) 计算输入的SHA-256散列。</li>
<li>ripemd160(bytes memory) returns (bytes20) 计算输入的RIPEMD-160散列。</li>
<li>ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address) 从椭圆曲线签名中恢复与公钥相关的地址，或在出错时返回零。函数参数对应于签名的ECDSA值: r – 签名的前32字节; s: 签名的第二个32字节; v: 签名的最后一个字节。这个方法返回一个地址。</li>
</ul>
<h4 id="keccak256加密"><a href="#keccak256加密" class="headerlink" title="keccak256加密"></a>keccak256加密</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function callkeccak256(string memory a) public pure  returns (bytes memory) &#123;</span><br><span class="line">    bytes memory byteArray = bytes(a);</span><br><span class="line">    bytes32 hash = keccak256(byteArray);</span><br><span class="line">    return abi.encodePacked(hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solidity-不可变量-immutable"><a href="#Solidity-不可变量-immutable" class="headerlink" title="Solidity 不可变量 immutable"></a>Solidity 不可变量 immutable</h3><blockquote>
<p>Solidity immutable 是另一种常量的表达方式。与常量类似，但是不必硬编码，可以在构造函数时传值，部署后无法改变。<br>immutable 不可变量同样不会占用状态变量存储空间，在部署时，变量的值会被追加的运行时字节码中， 因此它比使用状态变量便宜的多，也同样带来了更多的安全性。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address public immutable owner = msg.sender;</span><br></pre></td></tr></table></figure>
<h3 id="Solidity-合约继承"><a href="#Solidity-合约继承" class="headerlink" title="Solidity 合约继承"></a>Solidity 合约继承</h3><h4 id="virtual-和-override"><a href="#virtual-和-override" class="headerlink" title="virtual 和 override"></a>virtual 和 override</h4><blockquote>
<p>solidity 引入了 virtual，override 关键字，用于重写函数。<br>父合约可以使用 virtual 关键字声明一个虚函数，子合约使用 override 关键字来覆盖父合约的方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">contract test1&#123;</span><br><span class="line">  string public name;</span><br><span class="line">  uint public age;</span><br><span class="line">  function getSalary() external pure virtual returns(string memory)&#123;</span><br><span class="line">    return &quot;Hello World&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract test2 is test1&#123;</span><br><span class="line">  function getSalary() external pure override returns(string memory)&#123;</span><br><span class="line">    return &quot;hahahaha&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">abstract contract test3&#123; //抽象合约</span><br><span class="line">    function getTest() public pure virtual returns (string memory);</span><br><span class="line">&#125;</span><br><span class="line">contract test4 is test3 &#123; //实现合约</span><br><span class="line">    function getTest() public pure override returns (string memory) &#123;</span><br><span class="line">        return &quot;I am an implementation class&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solidity-异常处理"><a href="#Solidity-异常处理" class="headerlink" title="Solidity 异常处理"></a>Solidity 异常处理</h3><blockquote>
<p>Solidity 是通过回退状态的方式来处理异常错误。<br> Solidity 发生异常时，会撤消当前调用和所有子调用改变的状态，同时给调用者返回一个错误标识。<br>Solidity 提供了require 、assert 和 revert 来处理异常。</p>
</blockquote>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint a = 8;</span><br><span class="line">function shuru(uint b) public view returns (uint) &#123;</span><br><span class="line">    require(b == a, &quot;b is not equal to a&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随便输入一个不等于8的数字提示<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-41-49.png"
                       
                 ></p>
<h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function shuru2(uint b) public view returns (uint) &#123;</span><br><span class="line">    assert(a == b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随便输入一个不等于8的数字提示<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-42-29.png"
                       
                 ></p>
<h3 id="require、assert-使用场景"><a href="#require、assert-使用场景" class="headerlink" title="require、assert 使用场景"></a>require、assert 使用场景</h3><blockquote>
<p>require() 函数用于检测输入变量或状态变量是否满足条件，以及验证调用外部合约的返回值。<br> require() 语句的失败报错，应该被看作一个正常的判断语句流程不能通过的事件。<br> assert()语句的失败报错，意味着发生了代码层面的错误事件，很大可能是合约中有一个bug需要修复。</p>
</blockquote>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><blockquote>
<p>用于将某个变量重置为初始值。对于整数，运算符的效果等同于a &#x3D; 0。而对于定长数组，则是把数组中的每个元素置为初始值，变长数组则是将长度置为0。对于结构体，也是类似，是将所有的成员均重置为初始值。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint data;</span><br><span class="line"></span><br><span class="line">function change(uint  i) internal &#123;</span><br><span class="line">    data = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getData() public returns (uint) &#123;</span><br><span class="line">    delete data;</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接受函数receive"><a href="#接受函数receive" class="headerlink" title="接受函数receive"></a>接受函数receive</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义事件</span><br><span class="line">event Received(address Sender, uint Value);</span><br><span class="line">// 接收ETH时释放Received事件</span><br><span class="line">receive() external payable &#123;</span><br><span class="line">    emit Received(msg.sender, msg.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="回退函数"><a href="#回退函数" class="headerlink" title="回退函数"></a>回退函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event fallbackCalled(address Sender, uint Value, bytes Data);</span><br><span class="line"></span><br><span class="line">// fallback</span><br><span class="line">function fallback() external payable&#123;</span><br><span class="line">    emit fallbackCalled(msg.sender, msg.value, msg.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="回退函数fallback和receive区别"><a href="#回退函数fallback和receive区别" class="headerlink" title="回退函数fallback和receive区别"></a>回退函数fallback和receive区别</h4><blockquote>
<p>简单来说，合约接收ETH时，msg.data为空且存在receive()时，会触发receive()；msg.data不为空或不存在receive()时，会触发fallback()，此时fallback()必须为payable。<br>receive()和payable fallback()均不存在的时候，向合约直接发送ETH将会报错（你仍可以通过带有payable的函数向合约发送ETH）。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">触发fallback() 还是 receive()?</span><br><span class="line">           接收ETH</span><br><span class="line">              |</span><br><span class="line">         msg.data是空？</span><br><span class="line">            /  \</span><br><span class="line">          是    否</span><br><span class="line">          /      \</span><br><span class="line">receive()存在?   fallback()</span><br><span class="line">        / \</span><br><span class="line">       是  否</span><br><span class="line">      /     \</span><br><span class="line">receive()   fallback()</span><br></pre></td></tr></table></figure>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>一个合约最多存在一个回退函数。</li>
<li>它必须被标记为外部（external）函数。</li>
</ul>
<h3 id="selfdestruct-自毁函数"><a href="#selfdestruct-自毁函数" class="headerlink" title="selfdestruct 自毁函数"></a>selfdestruct 自毁函数</h3><p><a class="link"   href="https://learnblockchain.cn/article/3331" >文章链接<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="msg-sender和tx-origin的区别"><a href="#msg-sender和tx-origin的区别" class="headerlink" title="msg.sender和tx.origin的区别"></a>msg.sender和tx.origin的区别</h3><blockquote>
<p>在Solidity中，<code>msg.sender</code>和<code>tx.origin</code>都代表了交易的发送者，但两者的含义和应用场景有所不同。</p>
<ol>
<li><code>msg.sender</code>：它代表直接调用智能合约函数的账户地址或智能合约地址。无论是外部账户还是智能合约内部的其他合约，只要是直接发起调用的，其地址都会被记录为<code>msg.sender</code>。这意味着，如果一个合约A内部调用了另一个合约B的一个函数，那么在合约B中，<code>msg.sender</code>将表示合约A的地址。</li>
<li><code>tx.origin</code>：它代表整个交易过程中最初的那个交易发送方的地址。这通常是一个外部账户的地址，因为只有外部账户的地址才被视为交易的发起者。在智能合约内部，如果一个合约接收到来自外部账户的交易调用，那么在合约内部，<code>tx.origin</code>将表示发起该交易的外部账户地址。</li>
</ol>
</blockquote>
<blockquote>
<p>简而言之，<code>msg.sender</code>关注的是直接调用者，而<code>tx.origin</code>关注的是原始交易的发送者。在实际应用中，开发者需要根据具体的场景和需求来决定使用哪一个。</p>
</blockquote>
<h3 id="abi编码"><a href="#abi编码" class="headerlink" title="abi编码"></a>abi编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line"></span><br><span class="line">contract Test &#123;</span><br><span class="line">    uint256 x = 10;</span><br><span class="line">    address addr = 0x13a6D1fe418de7e5B03Fb4a15352DfeA3249eAA4;</span><br><span class="line">    string str = &quot;This is China&quot;;</span><br><span class="line">    uint256[2] arr = [1, 2];</span><br><span class="line"></span><br><span class="line">    function core(uint256 _x, address _addr, string calldata _str, uint256[2] calldata _arr) public &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testEncode() public view returns (bytes memory result) &#123;</span><br><span class="line">        result = abi.encode(x, addr, str, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testEncodePacked() public view returns (bytes memory result) &#123;</span><br><span class="line">        result = abi.encodePacked(x, addr, str, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testEncodeWithSignature() public view returns (bytes memory result) &#123;</span><br><span class="line">        result = abi.encodeWithSignature(&quot;core(uint256,address,string,uint256[2])&quot;, x, addr, str, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testEncodeWithSelector() public view returns (bytes memory result) &#123;</span><br><span class="line">        result = abi.encodeWithSelector(bytes4(keccak256(&quot;core(uint256,address,string,uint256[2])&quot;)), x, addr, str, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testDecode() public view returns (uint256 _x, address _addr, string memory _str, uint256[2] memory _arr) &#123;</span><br><span class="line">        bytes memory result = testEncode();</span><br><span class="line">        return abi.decode(result, (uint256, address, string, uint256[2]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-43-00.png"
                       
                 ><br><img  
                       lazyload
                       alt="image"
                       data-src="/images/2024-12-22-15-43-41.png"
                       
                 ></p>
<blockquote>
<p><span style="color:red;">abi.encodePacked(x, addr, str, arr)</span> 的作用是将参数 x、addr、str 和 arr 进行打包编码。在 Solidity 中，当需要将多个类型不同的参数一起传递给一个函数时，可以使用 abi.encodePacked() 函数将这些参数打包成一个字节数组。这样可以减少调用数据的成本，因为打包后的数据只需要占用一个存储空间。<br><span style="color:red;">abi.encodeWithSignature()</span> 函数用于将参数编码为字节数组，并附加一个签名。这个签名可以用于在智能合约中调用该函数时进行验证。<br>具体来说，abi.encodeWithSignature(“core(uint256,address,string,uint256[2])”, x, addr, str, arr) 的作用是将参数 x、addr、str 和 arr 按照指定的函数签名 “core(uint256,address,string,uint256[2])” 进行编码，生成一个字节数组。这个字节数组可以作为交易数据或消息体发送给其他智能合约。<br>需要注意的是，使用 abi.encodeWithSignature() 函数时，需要确保传入的参数类型与函数签名中的参数类型相匹配，否则会导致编码失败。<br><span style="color:red;">abi.encodeWithSelector()</span> 函数用于将参数编码为字节数组，并附加一个选择器。这个选择器可以用于在智能合约中调用该函数时进行验证。<br>具体来说，abi.encodeWithSelector(bytes4(keccak256(“core(uint256,address,string,uint256[2])”)), x, addr, str, arr) 的作用是将参数 x、addr、str 和 arr 按照指定的函数签名 “core(uint256,address,string,uint256[2])” 进行编码，生成一个字节数组。这个字节数组可以作为交易数据或消息体发送给其他智能合约。<br>需要注意的是，使用 abi.encodeWithSelector() 函数时，需要确保传入的参数类型与函数签名中的参数类型相匹配，否则会导致编码失败。</p>
</blockquote>
<h5 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h5><img    
                       lazyload
                       alt="image"
                       data-src="https://s1.chu0.com/src/img/gif/7f/7ff33469d8d148998adc4371ff22fd50.gif?e=1735488000&token=1srnZGLKZ0Aqlz6dk7yF4SkiYf4eP-YrEOdM1sob:bwGC7sqerarUu1DVragekmF7ZtI="
                        
                 >


]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>XuperChain</title>
    <url>/2024/08/28/%E5%8C%BA%E5%9D%97%E9%93%BE/XuperChain/</url>
    <content><![CDATA[<h3 id="百度超级链使用"><a href="#百度超级链使用" class="headerlink" title="百度超级链使用"></a>百度超级链使用</h3><h3 id="超级链环境部署"><a href="#超级链环境部署" class="headerlink" title="超级链环境部署"></a>超级链环境部署</h3><p><a class="link"   href="https://xuper.baidu.com/n/xuperdoc/general_introduction/brief.html" >官方文档<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>拉取超级链软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.lllcnm.cn/xuper.zip</span><br></pre></td></tr></table></figure></li>
<li>网络环境配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make testnet</span><br></pre></td></tr></table></figure></li>
<li>启动所有节点<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh control_all.sh start</span><br></pre></td></tr></table></figure></li>
<li>合约账号创建<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/xchain-cli account new --account 1111111111111112 --fee 1000</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/9444eb91-0275-4271-bdb7-14d6a67d4d11.png"
                        alt="Description"
                 ></p>
<ul>
<li>查询账号信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/xchain-cli acl query --account XC1111111111111112@xuper</span><br></pre></td></tr></table></figure></li>
<li>查询账号余额<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/xchain-cli account balance XC1111111111111112@xuper -H 127.0.0.1:37101</span><br></pre></td></tr></table></figure></li>
<li>更新账户余额<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/xchain-cli transfer --to XC1111111111111112@xuper --amount 1000 --keys data/keys/ -H 127.0.0.1:37101</span><br></pre></td></tr></table></figure></li>
<li>部署solidity合约<br>编译合约abi bin<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --bin --abi Test.sol -o .</span><br></pre></td></tr></table></figure>
部署Hello合约<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.25;</span><br><span class="line"></span><br><span class="line">contract Hello &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">function</span> <span class="built_in">set</span>(string memory _name) public&#123;</span><br><span class="line">        name = _name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> get() public view returns(string) &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/xchain-cli evm deploy --account XC1111111111111121@xuper --cname Hello --fee 2000 Hello.bin --abi Hello.abi</span><br></pre></td></tr></table></figure>
调用合约<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/xchain-cli evm invoke --method <span class="built_in">set</span> -a <span class="string">&#x27;&#123;&quot;name&quot;:&quot;hhh&quot;&#125;&#x27;</span> Hello --fee 1000</span><br><span class="line">./bin/xchain-cli evm query --method get Hello</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="java-sdk调用"><a href="#java-sdk调用" class="headerlink" title="java sdk调用"></a>java sdk调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XuperChainUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xuperchain.client.url&#125;&quot;)</span></span><br><span class="line">    String xuperClientUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xuperchain.admin.keys&#125;&quot;)</span></span><br><span class="line">    String keyPath;</span><br><span class="line">    XuperClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initField</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">XuperClient</span>(xuperClientUrl);</span><br><span class="line">        System.out.println(keyPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取区块ID、高度、交易ID</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">getBlockchainStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        XchainOuterClass.<span class="type">BCStatus</span> <span class="variable">bcs</span> <span class="operator">=</span> client.getBlockchainStatus(<span class="string">&quot;xuper&quot;</span>);</span><br><span class="line">        XchainOuterClass.<span class="type">SystemsStatus</span> <span class="variable">systemStatus</span> <span class="operator">=</span> client.getSystemStatus();</span><br><span class="line">        <span class="type">byte</span>[] hex = Hex.encode(bcs.getBlock().getBlockid().toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">blockId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(hex);</span><br><span class="line">        XchainOuterClass.<span class="type">InternalBlock</span> <span class="variable">getBlocks</span> <span class="operator">=</span> bcs.getBlock();</span><br><span class="line">        System.out.println(getBlocks);</span><br><span class="line">        List&lt;XchainOuterClass.Transaction&gt; transList = getBlocks.getTransactionsList();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lastTransactionId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encode(transList.get(transList.size() - <span class="number">1</span>).getTxid().toByteArray()));</span><br><span class="line">        <span class="type">long</span> <span class="variable">height</span> <span class="operator">=</span> getBlocks.getHeight();</span><br><span class="line">        <span class="type">Dict</span> <span class="variable">retDict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dict</span>();</span><br><span class="line">        retDict.put(<span class="string">&quot;height&quot;</span>, height);</span><br><span class="line">        retDict.put(<span class="string">&quot;blockId&quot;</span>, blockId);</span><br><span class="line">        retDict.put(<span class="string">&quot;transactionId&quot;</span>, lastTransactionId);</span><br><span class="line">        <span class="keyword">return</span> retDict;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 触发合约交易(invoke)</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">        <span class="keyword">public</span> Dict <span class="title function_">invokeContract</span><span class="params">(String accountName,</span></span><br><span class="line"><span class="params">                               String contractName,</span></span><br><span class="line"><span class="params">                               String funcName,</span></span><br><span class="line"><span class="params">                               Map&lt;String, String&gt; args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> Account.create(keyPath);</span><br><span class="line">        <span class="comment">//设置合约用户</span></span><br><span class="line">        account.setContractAccount(accountName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> client.invokeEVMContract(account, contractName, funcName, args, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">resMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    put(<span class="string">&quot;txId&quot;</span>, tx.getTxid());</span><br><span class="line">                    put(<span class="string">&quot;message&quot;</span>, tx.getContractResponse().getMessage());</span><br><span class="line">                    put(<span class="string">&quot;body&quot;</span>, tx.getContractResponse().getBodyStr());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dict</span>(resMap);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Map</span> <span class="variable">resMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">            resMap.put(<span class="string">&quot;isError&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            resMap.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dict</span>(resMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询合约功能(query)</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">queryContract</span><span class="params">(String accountName,</span></span><br><span class="line"><span class="params">                              String contractName,</span></span><br><span class="line"><span class="params">                              String funcName,</span></span><br><span class="line"><span class="params">                              Map&lt;String, String&gt; args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> Account.create(keyPath);</span><br><span class="line">        <span class="comment">//设置合约用户</span></span><br><span class="line">        account.setContractAccount(accountName);</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> client.queryEVMContract(account, contractName, funcName, args);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">resMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                put(<span class="string">&quot;message&quot;</span>, tx.getContractResponse().getMessage());</span><br><span class="line">                put(<span class="string">&quot;body&quot;</span>, tx.getContractResponse().getBodyStr());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dict</span>(resMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>目录结构</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/41e0d56d-64ae-4300-86d5-6e0af5947172.png"
                        alt="Description"
                 ></p>
<ul>
<li>controller 类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.Dict;</span><br><span class="line"><span class="keyword">import</span> com.example.xuperchaintest.util.XuperChainUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;contract.creator&#125;&quot;)</span></span><br><span class="line">    String contractCreator;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;contract.name&#125;&quot;)</span></span><br><span class="line">    String contractName;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    XuperChainUtil xuperChainUtil;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;getBlockchainStatus&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">getBlockchainStatus</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> xuperChainUtil.getBlockchainStatus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;set&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xuperChainUtil.invokeContract(contractCreator,contractName,<span class="string">&quot;set&quot;</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xuperChainUtil.queryContract(contractCreator,contractName,<span class="string">&quot;get&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>调用set接口</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/a8669804-852d-44f4-b2aa-a9eb23de346c.png"
                        alt="Description"
                 ></p>
<ul>
<li>调用get接口</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/2b89a17a-aa51-421c-b174-0d81e9a2dddd.png"
                        alt="Description"
                 ></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>XuperChain</tag>
      </tags>
  </entry>
  <entry>
    <title>fisco-bcos-console命令注释</title>
    <url>/2023/05/22/%E5%8C%BA%E5%9D%97%E9%93%BE/fisco-bcos-console%E5%91%BD%E4%BB%A4%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h3 id="fisco-bcos-console命令大全"><a href="#fisco-bcos-console命令大全" class="headerlink" title="fisco-bcos console命令大全"></a>fisco-bcos console命令大全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- `addObserver`: 添加一个观察者节点</span><br><span class="line">- `addPeers`: 添加更多连接的节点P2P网络中的对等节点</span><br><span class="line">- `addSealer`: 添加一个共识节点</span><br><span class="line">- `call`: 调用合约的某个函数和参数</span><br><span class="line">- `callByCNS`: 通过CNS调用合约的某个函数和参数</span><br><span class="line">- `chargeGas`: 为指定账户充值指定的gas（燃料费用）</span><br><span class="line">- `create`: 通过SQL创建表格</span><br><span class="line">- `deductGas`: 从给定账户扣除指定的gas（燃料费用）</span><br><span class="line">- `delete`: 通过SQL删除记录</span><br><span class="line">- `deploy`: 在区块链上部署一个合约</span><br><span class="line">- `deployByCNS`: 通过CNS在区块链上部署一个合约</span><br><span class="line">- `desc`: 描述表格信息</span><br><span class="line">- `erasePeers`: 移除节点P2P网络中的已连接对等节点</span><br><span class="line">- `quit([quit, q, <span class="built_in">exit</span>])`: 退出控制台</span><br><span class="line">- `freezeAccount`: 冻结账户</span><br><span class="line">- `freezeContract`: 冻结合约</span><br><span class="line">- `generateGroup`: 为指定节点生成一个群组</span><br><span class="line">- `generateGroupFromFile`: 根据指定文件生成一个群组</span><br><span class="line">- `getAccountStatus`: 获取账户状态</span><br><span class="line">- `getAvailableConnections`: 获取SDK连接的节点信息</span><br><span class="line">- `getBatchReceiptsByBlockHashAndRange`: 根据块哈希和交易范围获取批量交易收据</span><br><span class="line">- `getBatchReceiptsByBlockNumberAndRange`: 根据块号和交易范围获取批量交易收据</span><br><span class="line">- `getBlockByHash`: 根据哈希查询块信息</span><br><span class="line">- `getBlockByNumber`: 根据块号查询块信息</span><br><span class="line">- `getBlockHashByNumber`: 根据块号查询块哈希</span><br><span class="line">- `getBlockHeaderByHash`: 根据哈希查询块头信息</span><br><span class="line">- `getBlockHeaderByNumber`: 根据块号查询块头信息</span><br><span class="line">- `getBlockNumber`: 查询最近块的编号</span><br><span class="line">- `getCode`: 查询给定地址的合约代码</span><br><span class="line">- `getConsensusStatus`: 查询共识状态</span><br><span class="line">- `getContractStatus`: 获取合约状态</span><br><span class="line">- `getCryptoType`: 获取当前的加密类型</span><br><span class="line">- `getCurrentAccount`: 获取当前账户信息</span><br><span class="line">- `getDeployLog`: 查询已部署合约的日志</span><br><span class="line">- `getGroupConnections`: 获取连接到SDK的群组节点信息</span><br><span class="line">- `getGroupList`: 查询群组列表</span><br><span class="line">- `getGroupPeers`: 查询共识节点和观察者节点的节点ID列表</span><br><span class="line">- `getNodeIDList`: 查询所有连接节点的节点ID列表</span><br><span class="line">- `getNodeInfo`: 查询指定节点的信息</span><br><span class="line">- `getNodeVersion`: 查询当前节点版本</span><br><span class="line">- `getObserverList`: 查询观察者节点的节点ID列表</span><br><span class="line">- `getPbftView`: 查询节点的PBFT视图</span><br><span class="line">- `getPeers`: 查询当前连接的节点对等列表</span><br><span class="line">- `getPendingTransactions`: 查询待处理的交易</span><br><span class="line">- `getPendingTxSize`: 查询待处理交易的数量</span><br><span class="line">- `getSealerList`: 查询共识节点的节点ID列表</span><br><span class="line">- `getSyncStatus`: 查询同步状态</span><br><span class="line">- `getSystemConfigByKey`: 根据键查询系统配置值</span><br><span class="line">- `getTotalTransactionCount`: 查询总交易数</span><br><span class="line">- `getTransactionByBlockHashAndIndex`: 根据块哈希和交易索引位置查询交易信息</span><br><span class="line">- `getTransactionByBlockNumberAndIndex`: 根据块号和交易索引位置查询交易信息</span><br><span class="line">- `getTransactionByHash`: 根据交易哈希查询交易信息</span><br><span class="line">- `getTransactionByHashWithProof`: 根据交易哈希查询交易和交易证明</span><br><span class="line">- `getTransactionReceipt`: 根据交易哈希查询交易收据</span><br><span class="line">- `getTransactionReceiptByHashWithProof`: 根据交易哈希查询交易收据和交易收据证明</span><br><span class="line">- `grantCNSManager`: 授予地址对CNS的管理权限</span><br><span class="line">- `grantCharger`: 授予账户充值gas的权限</span><br><span class="line">- `grantCommitteeMember`: 授予账户成为委员会成员的权限</span><br><span class="line">- `grantContractStatusManager`: 授予用户对合约的授权</span><br><span class="line">- `grantContractWritePermission`: 授予账户合约写入权限</span><br><span class="line">- `grantDeployAndCreateManager`: 授予地址对部署合约和创建用户表的管理权限</span><br><span class="line">- `grantNodeManager`: 授予地址对节点配置的管理权限</span><br><span class="line">- `grantOperator`: 授予账户运营者权限</span><br><span class="line">- `grantSysConfigManager`: 授予地址对系统配置的管理权限</span><br><span class="line">- `grantUserTableManager`: 授予表名和地址对用户表的管理权限</span><br><span class="line">- `insert`: 通过SQL插入记录</span><br><span class="line">- `listAbi`: 列出合约的函数和事件信息</span><br><span class="line">- `listAccount`: 列出当前保存的账户列表</span><br><span class="line">- `listCNSManager`: 查询CNS的权限信息</span><br><span class="line">- `listChargers`: 列出具有充值/扣除gas权限的账户列表</span><br><span class="line">- `listCommitteeMembers`: 列出所有委员会成员</span><br><span class="line">- `listContractStatusManager`: 列出合约的授权信息</span><br><span class="line">- `listContractWritePermission`: 查询具有合约写入权限的账户列表</span><br><span class="line">- `listDeployAndCreateManager`: 查询部署合约和创建用户表的权限信息</span><br><span class="line">- `listDeployContractAddress`: 列出指定合约的合约地址</span><br><span class="line">- `listNodeManager`: 查询节点配置的权限信息</span><br><span class="line">- `listOperators`: 列出所有运营者</span><br><span class="line">- `listSysConfigManager`: 查询系统配置的权限信息</span><br><span class="line">- `listUserTableManager`: 查询用户表的权限信息</span><br><span class="line">- `loadAccount`: 为交易签名加载账户</span><br><span class="line">- `newAccount`: 创建账户</span><br><span class="line">- `queryCNS`: 根据合约名称和版本查询CNS信息</span><br><span class="line">- `queryCommitteeMemberWeight`: 查询委员会成员的权重</span><br><span class="line">- `queryGroupStatus`: 查询指定节点的指定群组状态</span><br><span class="line">- `queryPeers`: 查询配置的P2P网络连接节点列表</span><br><span class="line">- `queryRemainGas`: 查询账户剩余gas（燃料费用）</span><br><span class="line">- `query</span><br><span class="line"></span><br><span class="line">Threshold`: 查询阈值</span><br><span class="line">- `queryVotesOfMember`: 查询委员会成员的投票</span><br><span class="line">- `queryVotesOfThreshold`: 查询更新阈值操作的投票</span><br><span class="line">- `recoverGroup`: 恢复指定节点的指定群组</span><br><span class="line">- `registerCNS`: 为给定合约注册CNS信息</span><br><span class="line">- `removeGroup`: 移除指定节点的指定群组</span><br><span class="line">- `removeNode`: 移除一个节点</span><br><span class="line">- `revokeCNSManager`: 撤销地址对CNS的管理权限</span><br><span class="line">- `revokeCharger`: 撤销账户的充值gas权限</span><br><span class="line">- `revokeCommitteeMember`: 撤销账户的委员会成员权限</span><br><span class="line">- `revokeContractStatusManager`: 撤销用户对合约的授权</span><br><span class="line">- `revokeContractWritePermission`: 撤销账户的合约写入权限</span><br><span class="line">- `revokeDeployAndCreateManager`: 撤销地址对部署合约和创建用户表的管理权限</span><br><span class="line">- `revokeNodeManager`: 撤销地址对节点配置的管理权限</span><br><span class="line">- `revokeOperator`: 撤销账户的运营者权限</span><br><span class="line">- `revokeSysConfigManager`: 撤销地址对系统配置的管理权限</span><br><span class="line">- `revokeUserTableManager`: 撤销表名和地址对用户表的管理权限</span><br><span class="line">- `switch([s])`: 切换到指定的群组通过群组ID</span><br><span class="line">- `<span class="keyword">select</span>`: 通过SQL查询记录</span><br><span class="line">- `setSystemConfigByKey`: 根据键设置系统配置值</span><br><span class="line">- `startGroup`: 启动指定节点的指定群组</span><br><span class="line">- `stopGroup`: 停止指定节点的指定群组</span><br><span class="line">- `unfreezeAccount`: 解冻账户</span><br><span class="line">- `unfreezeContract`: 解冻合约</span><br><span class="line">- `update`: 通过SQL更新记录</span><br><span class="line">- `updateCommitteeMemberWeight`: 更新委员会成员的权重</span><br><span class="line">- `updateThreshold`: 更新阈值</span><br></pre></td></tr></table></figure>

<p><a class="link"   href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html" >账户权限控制<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grantCommitteeMember 0xf7085ff39210d2fcd8f30a3255016e1fa52aa896 ;增加委员</span><br><span class="line">listCommitteeMembers ;查看所有委员信息</span><br></pre></td></tr></table></figure>
<h4 id="加入群组"><a href="#加入群组" class="headerlink" title="加入群组"></a>加入群组</h4><ul>
<li>设置观察者<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[group:1]&gt; addObserver 63de0af9d1612b7765e0e1923de5ed35a6048238ffe6531519efb4286905bd5cf2d77e5e46cc80e572ba70144c431503ae79efa81b2bed25c02056960dd61688</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:1,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Success&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取观察者列表<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[group:1]&gt; getObserverList </span><br><span class="line">[</span><br><span class="line">    63de0af9d1612b7765e0e1923de5ed35a6048238ffe6531519efb4286905bd5cf2d77e5e46cc80e572ba70144c431503ae79efa81b2bed25c02056960dd61688</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>使用addSealer将node4作为共识节点加入群组1<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addSealer 63de0af9d1612b7765e0e1923de5ed35a6048238ffe6531519efb4286905bd5cf2d77e5e46cc80e572ba70144c431503ae79efa81b2bed25c02056960dd61688</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>fisco-bcos</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言理论速记</title>
    <url>/2025/03/16/%E5%AF%BC%E8%AE%BA/C%E8%AF%AD%E8%A8%80%E7%90%86%E8%AE%BA%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e 或 E之前必须有数字，之后必须位整型</span></span><br><span class="line"><span class="type">double</span> a = <span class="number">1.5e11</span>;</span><br><span class="line"><span class="type">double</span> b = <span class="number">1.5E11</span>;</span><br></pre></td></tr></table></figure>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\x01&#x27;</span> <span class="comment">// \x 之后只能跟随1~2位十六进制数</span></span><br><span class="line"><span class="string">&#x27;\0&#x27;</span> <span class="comment">// 表示字符串结束</span></span><br></pre></td></tr></table></figure>

<h2 id="格式化字符"><a href="#格式化字符" class="headerlink" title="格式化字符"></a>格式化字符</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">%d — 十进制整数（有符号）</span><br><span class="line">%i — 十进制整数（有符号）</span><br><span class="line">%f - 浮点数默认格式，输出时小数点后有6位小数。</span><br><span class="line">%e — 指数表示（小写）</span><br><span class="line">%E — 指数表示（大写）</span><br><span class="line">%g — 自动选择 %f 或 %e（小写）</span><br><span class="line">%G — 自动选择 %f 或 %E（大写）</span><br><span class="line">%c — 字符</span><br><span class="line">%s — 字符串</span><br><span class="line">%p — 指针地址</span><br><span class="line">%x — 十六进制整数（小写）</span><br><span class="line">%X — 十六进制整数（大写）</span><br><span class="line">%o — 八进制整数</span><br><span class="line">%% — 输出百分号字符 %</span><br><span class="line">%u — 无符号十进制整数</span><br><span class="line">%lu — 无符号长整数（unsigned long）</span><br><span class="line">%llu — 无符号长长整数（unsigned long long）</span><br><span class="line">%ld — 长整数（long int）</span><br><span class="line">%lld — 长长整数（long long int）</span><br><span class="line">%zu — 无符号大小类型（size_t）</span><br><span class="line">%h — 短整数（short 或 unsigned short）</span><br><span class="line">%hh — 非常短整数（signed char 或 unsigned char）</span><br><span class="line">%L — 长双精度浮点数（long double）</span><br><span class="line">%n — 输出到指定变量中已打印字符的个数</span><br><span class="line">%.*f - 指定小数点后的位数，* 可以是任意整数。</span><br><span class="line">%.*e 或 %.*E：指定科学计数法中小数点后的位数。</span><br><span class="line">%.*g 或 %.*G：指定自动选择格式中小数点后的位数。</span><br><span class="line">%f 也可以与宽度和精度一起使用，例如 %10.2f 表示总共占10个字符宽度，小数点后保留2位小数。</span><br></pre></td></tr></table></figure>

<h2 id="负数取模"><a href="#负数取模" class="headerlink" title="负数取模"></a>负数取模</h2><p><a class="link"   href="https://blog.csdn.net/zhige_me/article/details/80980566" >参考链接<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a = nq + r  |r| &lt; |a|</span><br><span class="line">假设 q 是 a、b 相除得到的商(quotient)，r 是相应的余数(remainder)</span><br><span class="line">我们知道商 q = a/n，从而得出</span><br><span class="line">r = a - (a/n) * n</span><br><span class="line">而 (a/n) 这个结果取决于上面几种方式用哪个</span><br></pre></td></tr></table></figure>
<p>示列：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">-7</span> % <span class="number">3</span> = <span class="number">-1</span></span><br><span class="line"><span class="number">7</span> % (<span class="number">-3</span>) = <span class="number">1</span> </span><br><span class="line"><span class="comment">// 下面是推倒过程</span></span><br><span class="line"><span class="number">-7</span> % <span class="number">3</span> = <span class="number">-7</span> - trunc(<span class="number">-7</span>/<span class="number">3</span>) * <span class="number">3</span> = <span class="number">-7</span> - (<span class="number">-2</span>) * <span class="number">3</span> = <span class="number">-7</span> + <span class="number">6</span> = <span class="number">-1</span></span><br><span class="line"><span class="number">7</span> % (<span class="number">-3</span>) = <span class="number">7</span> - trunc(<span class="number">7</span> / (<span class="number">-3</span>)) * (<span class="number">-3</span>) = <span class="number">7</span> - (<span class="number">-2</span>) * (<span class="number">-3</span>) = <span class="number">7</span> - <span class="number">6</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote>
<p>C语言中的运算符优先级决定了表达式中运算的顺序。以下是C语言中运算符的优先级列表，从最高到最低：</p>
</blockquote>
<blockquote>
<p>！ &gt; 算术运算符 &gt; 关系运算符 &gt; &amp;&amp; &gt; || &gt; 赋值运算符</p>
</blockquote>
<blockquote>
<p>后缀运算符、一元运算符、乘除和取模、加减、位移、关系、相等性、位运算、逻辑运算、条件运算符、赋值运算符、逗号运算符。</p>
</blockquote>
<ol>
<li><p><strong>后缀运算符</strong></p>
<ul>
<li><code>() 函数调用</code></li>
<li><code>[] 数组下标</code></li>
<li><code>-&gt; 指向结构体成员</code></li>
<li><code>. 结构体成员访问</code></li>
<li><code>++ 后置增量</code></li>
<li><code>-- 后置减量</code></li>
</ul>
</li>
<li><p><strong>一元运算符</strong></p>
<ul>
<li><code>++ 前置增量</code></li>
<li><code>-- 前置减量</code></li>
<li><code>+ 正号</code></li>
<li><code>- 负号</code></li>
<li><code>! 逻辑非</code></li>
<li><code>~ 按位取反</code></li>
<li><code>* 指针解引用</code></li>
<li><code>&amp; 取地址</code></li>
<li><code>sizeof 计算大小</code></li>
<li><code>typeid 类型识别</code>（C++特有）</li>
<li><code>cast 强制类型转换</code>（C++特有）</li>
</ul>
</li>
<li><p><strong>乘法和除法</strong></p>
<ul>
<li><code>* 乘法</code></li>
<li><code>/ 除法</code></li>
<li><code>% 取模（求余）</code></li>
</ul>
</li>
<li><p><strong>加法和减法</strong></p>
<ul>
<li><code>+ 加法</code></li>
<li><code>- 减法</code></li>
</ul>
</li>
<li><p><strong>位移运算符</strong></p>
<ul>
<li><code>&lt;&lt; 左移</code></li>
<li><code>&gt;&gt; 右移</code></li>
</ul>
</li>
<li><p><strong>关系运算符</strong></p>
<ul>
<li><code>&lt; 小于</code></li>
<li><code>&gt; 大于</code></li>
<li><code>&lt;= 小于等于</code></li>
<li><code>&gt;= 大于等于</code></li>
</ul>
</li>
<li><p><strong>相等性运算符</strong></p>
<ul>
<li><code>== 等于</code></li>
<li><code>!= 不等于</code></li>
</ul>
</li>
<li><p><strong>位运算符</strong></p>
<ul>
<li><code>&amp; 按位与</code></li>
<li><code>^ 按位异或</code></li>
<li><code>| 按位或</code></li>
</ul>
</li>
<li><p><strong>逻辑运算符</strong></p>
<ul>
<li><code>&amp;&amp; 逻辑与</code></li>
<li><code>|| 逻辑或</code></li>
</ul>
</li>
<li><p><strong>条件运算符（三元运算符）</strong></p>
<ul>
<li><code>? : 条件表达式</code></li>
</ul>
</li>
<li><p><strong>赋值运算符</strong></p>
<ul>
<li><code>=</code></li>
<li><code>+=</code></li>
<li><code>-=</code></li>
<li><code>*=</code></li>
<li><code>/=</code></li>
<li><code>%=</code></li>
<li><code>&lt;&lt;=</code></li>
<li><code>&gt;&gt;=</code></li>
<li><code>&amp;=</code></li>
<li><code>^=</code></li>
<li><code>|=</code></li>
</ul>
</li>
<li><p><strong>逗号运算符</strong></p>
<ul>
<li><code>, 逗号分隔表达式</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>导论</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机理论</title>
    <url>/2024/12/22/%E5%AF%BC%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="1-计算公式"><a href="#1-计算公式" class="headerlink" title="1. 计算公式"></a>1. 计算公式</h2><p><strong>计算机硬件</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">总线带宽 = 总线工作频率 * 总线位宽 * 传输次数/ 8</span><br><span class="line"></span><br><span class="line">存储容量 = 末尾地址 - 起始地址 + 1（单位为B）</span><br></pre></td></tr></table></figure>
<p><strong>计算机网络</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;!-- 时延 --&gt;</span><br><span class="line"></span><br><span class="line">发送时延 = 数据帧长度(bit) / 数据传输速率(bit/s)</span><br><span class="line"></span><br><span class="line">传播时延 = 信道长度(m) / 电磁波在信道上的传播速率(m/s)</span><br><span class="line"></span><br><span class="line">总时延 = 发送时延 + 传播时延</span><br></pre></td></tr></table></figure>
<p><strong>多媒体技术</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;!-- 字形码 --&gt;</span><br><span class="line">点阵字形码所占字节数 = (点阵字形码的行数 * 点阵字形码的列数) / 8</span><br><span class="line"></span><br><span class="line">&lt;!-- 汉字国标码 --&gt;</span><br><span class="line">国标码 = 汉字区位码 + 20 20H</span><br><span class="line"></span><br><span class="line">&lt;!-- 汉字机内码 --&gt;</span><br><span class="line">汉字机内码 = 汉字国标码 + 80 80H = 汉字区位码 + A0 A0H</span><br><span class="line"></span><br><span class="line">&lt;!-- 图像 --&gt;</span><br><span class="line">图像所占字节数 = 图像分辨率 * 颜色深度 / 8</span><br><span class="line"></span><br><span class="line">&lt;!-- 声音 计算每秒钟声音数据量的公式 --&gt;</span><br><span class="line">每秒数据量(B) = 采样频率(Hz) * 量化位数(bit)/8 * 声道数</span><br><span class="line"></span><br><span class="line">&lt;!-- 模拟波形声音数字化后音频文件存储数据量公式 --&gt;</span><br><span class="line">存储数据量 = 采样频率(Hz) * 量化精度/8 * 声道数 * 时间(s)</span><br><span class="line"></span><br><span class="line">&lt;!-- 比特率 基本计算公式 --&gt;</span><br><span class="line">比特率(kbps) = 文件大小(字节) * 8 / 时间(s) / 1000</span><br><span class="line"></span><br><span class="line">&lt;!-- 音频文件专用计算方法 --&gt;</span><br><span class="line">比特率(kbps) = 采样频率(kHz) * 量化位数(bit) * 声道数</span><br><span class="line"></span><br><span class="line">&lt;!-- 视频 数据量计算公式 --&gt;</span><br><span class="line">视频文件数据量 = 帧频 * 每幅图像数据量 * 时间 = 分辨率 * 颜色深度 * 帧数 * 时间/8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>导论</category>
      </categories>
      <tags>
        <tag>计算机理论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2025/03/16/%E5%AF%BC%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>微机工作过程（如执行指令的流程）主要属于 <strong>“计算机组成原理”</strong> 这一知识体系，具体涉及以下细分知识点：  </p>
<ol>
<li><strong>CPU 工作机制</strong>：包括 CPU 如何通过取指令、译码、执行指令的循环完成任务，属于 CPU 内部逻辑与功能的核心内容。  </li>
<li><strong>指令系统</strong>：研究指令的格式、类型（如算术运算指令、逻辑指令等），以及指令在内存和 CPU 间的交互过程。  </li>
<li><strong>计算机工作流程</strong>：在计算机基础或计算机系统概论中，也会从宏观角度讲解微机“输入→处理→输出”的工作流程，其中指令执行是处理阶段的核心。  </li>
<li><strong>存储系统与总线</strong>：涉及内存与 CPU 通过总线交换指令和数据的机制，属于计算机硬件架构的关键知识。</li>
</ol>
]]></content>
      <categories>
        <category>导论</category>
      </categories>
      <tags>
        <tag>计算机理论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2025/01/24/%E5%AF%BC%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="一-无线局域网"><a href="#一-无线局域网" class="headerlink" title="一.无线局域网"></a>一.无线局域网</h2><h3 id="1-802-11-标准的基本概念"><a href="#1-802-11-标准的基本概念" class="headerlink" title="1. 802.11 标准的基本概念"></a>1. <strong>802.11 标准的基本概念</strong></h3><ul>
<li>802.11 是 IEEE 制定的无线局域网（WLAN）标准。</li>
<li>主要用途：实现无线网络通信。</li>
<li>常见的 802.11 标准：802.11a、802.11b、802.11g、802.11n、802.11ac、802.11ax（Wi-Fi 6）等。</li>
</ul>
<hr>
<h3 id="2-常见-802-11-标准的特点"><a href="#2-常见-802-11-标准的特点" class="headerlink" title="2. 常见 802.11 标准的特点"></a>2. <strong>常见 802.11 标准的特点</strong></h3><table>
<thead>
<tr>
<th>标准</th>
<th>频率</th>
<th>最大速率</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td><strong>802.11a</strong></td>
<td>5 GHz</td>
<td>54 Mbps</td>
<td>抗干扰能力强，但覆盖范围较小。</td>
</tr>
<tr>
<td><strong>802.11b</strong></td>
<td>2.4 GHz</td>
<td>11 Mbps</td>
<td>覆盖范围较大，但容易受到干扰。</td>
</tr>
<tr>
<td><strong>802.11g</strong></td>
<td>2.4 GHz</td>
<td>54 Mbps</td>
<td>兼容 802.11b，速率更高。</td>
</tr>
<tr>
<td><strong>802.11n</strong></td>
<td>2.4 GHz 和 5 GHz</td>
<td>600 Mbps</td>
<td>引入 MIMO（多输入多输出）技术，速率和覆盖范围显著提升。</td>
</tr>
<tr>
<td><strong>802.11ac</strong></td>
<td>5 GHz</td>
<td>1.3 Gbps</td>
<td>支持更宽的频道（80 MHz 和 160 MHz），速率更高。</td>
</tr>
<tr>
<td><strong>802.11ax（Wi-Fi 6）</strong></td>
<td>2.4 GHz 和 5 GHz</td>
<td>10 Gbps</td>
<td>引入 OFDMA 和 MU-MIMO，提高网络效率和容量。</td>
</tr>
</tbody></table>
<hr>
<h3 id="3-802-11-的关键技术"><a href="#3-802-11-的关键技术" class="headerlink" title="3. 802.11 的关键技术"></a>3. <strong>802.11 的关键技术</strong></h3><ul>
<li><strong>MIMO（多输入多输出）</strong>：通过多天线技术提高传输速率和可靠性。</li>
<li><strong>OFDM（正交频分复用）</strong>：将信号分成多个子载波传输，提高抗干扰能力。</li>
<li><strong>CSMA&#x2F;CA（载波侦听多路访问&#x2F;冲突避免）</strong>：802.11 使用的介质访问控制协议，用于避免数据冲突。</li>
<li><strong>频段</strong>：2.4 GHz 和 5 GHz 的区别（2.4 GHz 覆盖范围大但干扰多，5 GHz 速率高但覆盖范围小）。</li>
</ul>
<hr>
<h3 id="4-802-11-的应用场景"><a href="#4-802-11-的应用场景" class="headerlink" title="4. 802.11 的应用场景"></a>4. <strong>802.11 的应用场景</strong></h3><ul>
<li>家庭无线网络（Wi-Fi）。</li>
<li>企业无线局域网（WLAN）。</li>
<li>公共场所（如机场、咖啡馆）的无线覆盖。</li>
<li>物联网（IoT）设备的连接。</li>
</ul>
<hr>
<h3 id="5-802-11-的安全性"><a href="#5-802-11-的安全性" class="headerlink" title="5. 802.11 的安全性"></a>5. <strong>802.11 的安全性</strong></h3><ul>
<li><strong>WEP（有线等效加密）</strong>：早期的加密协议，安全性较差。</li>
<li><strong>WPA（Wi-Fi 保护访问）</strong>：改进的加密协议，安全性更高。</li>
<li><strong>WPA2&#x2F;WPA3</strong>：目前主流的加密协议，提供更强的安全性。</li>
</ul>
<hr>
<h3 id="6-802-11-的常见问题"><a href="#6-802-11-的常见问题" class="headerlink" title="6. 802.11 的常见问题"></a>6. <strong>802.11 的常见问题</strong></h3><ul>
<li>干扰问题：2.4 GHz 频段容易受到其他设备（如微波炉、蓝牙设备）的干扰。</li>
<li>覆盖范围：5 GHz 频段覆盖范围较小，但速率更高。</li>
<li>兼容性：不同 802.11 标准之间的兼容性（如 802.11n 兼容 802.11a&#x2F;b&#x2F;g）。</li>
</ul>
<hr>
<h3 id="7-802-11-的演进"><a href="#7-802-11-的演进" class="headerlink" title="7. 802.11 的演进"></a>7. <strong>802.11 的演进</strong></h3><ul>
<li>从 802.11a&#x2F;b&#x2F;g 到 802.11n&#x2F;ac&#x2F;ax，速率和效率不断提升。</li>
<li>Wi-Fi 6（802.11ax）是目前最新的标准，支持更高的速率和更多的设备连接。</li>
</ul>
<hr>
<h3 id="8-知识汇总"><a href="#8-知识汇总" class="headerlink" title="8. 知识汇总"></a>8. 知识汇总</h3><ol>
<li>无线局域网硬件设备主要包括：<strong>无线网卡，无线接入点（AP），无线天线，无线网桥，无线路由器与无线网关</strong></li>
<li>组建无线局域网的关键设备是 <strong>无线网卡、无线接入点（AP）、无线路由和无线天线</strong>。</li>
<li><strong>无线AP</strong> 是无线局域网中负责数据接收和转发的设备。</li>
<li>无线局域网受环境（比如天气、建筑物等）干扰。而有线网会受到信号传输太远减弱，<br>有时候需要中继放大后再进行传输，就是光纤也是有物理传输限制的。</li>
</ol>
<h3 id="9-Ad-Hoc-模式"><a href="#9-Ad-Hoc-模式" class="headerlink" title="9. Ad-Hoc 模式"></a>9. Ad-Hoc 模式</h3><ul>
<li>Ad-Hoc 模式是一种特殊的无线局域网模式，它允许设备在没有接入点的情况下直接连接到其他设备。</li>
<li>在 Ad-Hoc 模式下，设备之间通过直接通信来建立网络。</li>
<li>Ad-Hoc 模式适用于小型网络，如家庭或办公室内的临时网络。</li>
<li>Ad-Hoc 模式不需要接入点，因此设备之间可以直接通信，无需通过接入点进行中继。</li>
<li>Ad-Hoc 模式适用于小型网络，如家庭或办公室内的临时网络。</li>
<li>Ad-Hoc 无法连接到互联网，因为互联网需要接入点（AP）进行中继。</li>
</ul>
<h3 id="10-Infrastructure-模式"><a href="#10-Infrastructure-模式" class="headerlink" title="10. Infrastructure 模式"></a>10. Infrastructure 模式</h3><ul>
<li><b style="background-color: red">大部分无线局域网</b> 使用 Infrastructure 模式。</li>
<li>Infrastructure 模式是一种常见的无线局域网模式，它使用接入点（AP）来建立网络。</li>
<li>在 Infrastructure 模式下，设备通过接入点连接到网络，然后通过接入点连接到互联网。</li>
<li>Infrastructure 模式适用于大型网络，如企业或学校。</li>
<li>Infrastructure 模式需要接入点（AP）来建立网络，因此设备之间不能直接通信。</li>
<li>Infrastructure 模式可以连接到互联网，因为接入点（AP）可以提供互联网连接。</li>
</ul>
<h3 id="11-无线网卡接口类型"><a href="#11-无线网卡接口类型" class="headerlink" title="11. 无线网卡接口类型"></a>11. 无线网卡接口类型</h3><ul>
<li><strong>PCI 接口</strong>：用于连接到主板的 PCI 插槽，适用于高性能需求。</li>
<li><strong>USB 接口</strong>：用于连接到计算机的 USB 端口，适用于便携性和易用性。</li>
<li><strong>PCMCIA 接口</strong>：用于连接到笔记本电脑的 PCMCIA 插槽，适用于笔记本电脑。</li>
</ul>
<hr>
<h2 id="二-SSID"><a href="#二-SSID" class="headerlink" title="二.SSID"></a>二.SSID</h2><p>以下是关于 <strong>BSSID</strong>、<strong>ESSID</strong>、<strong>PSSID</strong> 和 <strong>SSID</strong> 的整理表格，帮助您清晰理解这些概念的区别与联系：</p>
<table>
<thead>
<tr>
<th><strong>概念</strong></th>
<th><strong>全称</strong></th>
<th><strong>定义</strong></th>
<th><strong>格式</strong></th>
<th><strong>作用</strong></th>
<th><strong>应用场景</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>SSID</strong></td>
<td>Service Set Identifier</td>
<td>无线网络的名称，用于标识一个无线局域网（WLAN）。</td>
<td>最多 32 个字符的字符串</td>
<td>用户通过 SSID 选择并连接到特定的无线网络。</td>
<td>家庭、企业、公共场所</td>
</tr>
<tr>
<td><strong>BSSID</strong></td>
<td>Basic Service Set Identifier</td>
<td>无线接入点（AP）的 MAC 地址，用于唯一标识一个基本服务集（BSS）。</td>
<td>48 位的 MAC 地址</td>
<td>在网络中区分不同的接入点（尤其是在多个 AP 使用相同 SSID 的情况下）。</td>
<td>无线网络中的单个 AP 标识</td>
</tr>
<tr>
<td><strong>ESSID</strong></td>
<td>Extended Service Set Identifier</td>
<td>扩展服务集（ESS）的标识符，用于标识由多个 BSS 组成的无线网络。</td>
<td>通常与 SSID 相同</td>
<td>在多个 AP 组成的网络中，ESSID 用于标识整个网络，支持无缝漫游。</td>
<td>企业、校园等大型无线网络</td>
</tr>
<tr>
<td><strong>PSSID</strong></td>
<td>Private Service Set Identifier</td>
<td>私有服务集标识符，通常用于企业内部或特定场景下的无线网络。</td>
<td>自定义字符串</td>
<td>提供更高的安全性和隐私保护，通常不对外广播。</td>
<td>企业内部网络、访客网络</td>
</tr>
</tbody></table>
<hr>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a><strong>补充说明</strong></h3><ol>
<li><p><strong>SSID 与 BSSID 的关系</strong>：</p>
<ul>
<li>一个 <strong>SSID</strong> 可以对应多个 <strong>BSSID</strong>（例如，在企业网络中，多个 AP 使用相同的 SSID，但每个 AP 的 BSSID 不同）。</li>
<li><strong>SSID</strong> 是用户可见的网络名称，而 <strong>BSSID</strong> 是网络内部的标识符。</li>
</ul>
</li>
<li><p><strong>ESSID 的作用</strong>：</p>
<ul>
<li>在由多个 AP 组成的网络中，<strong>ESSID</strong> 用于标识整个网络，用户可以在不同 AP 之间无缝漫游。</li>
</ul>
</li>
<li><p><strong>PSSID 的特点</strong>：</p>
<ul>
<li><strong>PSSID</strong> 通常用于对安全性要求较高的场景，如企业内部网络或访客网络。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="三-无线网卡"><a href="#三-无线网卡" class="headerlink" title="三.无线网卡"></a>三.无线网卡</h2><p>以下是无线网卡类型的整理表格：</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>接口&#x2F;连接方式</strong></th>
<th><strong>适用设备</strong></th>
<th><strong>特点</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>PCI&#x2F;PCIe无线网卡</strong></td>
<td>PCI&#x2F;PCIe插槽</td>
<td>台式机</td>
<td>性能强，适合固定使用</td>
</tr>
<tr>
<td><strong>USB无线网卡</strong></td>
<td>USB接口</td>
<td>台式机、笔记本</td>
<td>便携，安装简单</td>
</tr>
<tr>
<td><strong>Mini PCIe&#x2F;M.2无线网卡</strong></td>
<td>Mini PCIe&#x2F;M.2插槽</td>
<td>笔记本、小型设备</td>
<td>体积小，集成度高</td>
</tr>
<tr>
<td><strong>PCMCIA&#x2F;CardBus无线网卡</strong></td>
<td>PCMCIA&#x2F;CardBus插槽</td>
<td>老式笔记本</td>
<td>老旧标准，逐渐淘汰</td>
</tr>
<tr>
<td><strong>ExpressCard无线网卡</strong></td>
<td>ExpressCard插槽</td>
<td>支持ExpressCard的笔记本</td>
<td>传输速度快，逐渐被淘汰</td>
</tr>
<tr>
<td><strong>SDIO无线网卡</strong></td>
<td>SDIO接口</td>
<td>嵌入式设备、便携设备</td>
<td>主要用于小型或嵌入式设备</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>台式机</strong>：PCI&#x2F;PCIe、USB  </li>
<li><strong>笔记本</strong>：Mini PCIe&#x2F;M.2、USB  </li>
<li><strong>老旧设备</strong>：PCMCIA&#x2F;CardBus、ExpressCard  </li>
<li><strong>嵌入式设备</strong>：SDIO</li>
</ul>
<h2 id="四-有线局域网"><a href="#四-有线局域网" class="headerlink" title="四.有线局域网"></a>四.有线局域网</h2><h3 id="1-二层交换机与三层交换机对比"><a href="#1-二层交换机与三层交换机对比" class="headerlink" title="1. 二层交换机与三层交换机对比"></a>1. 二层交换机与三层交换机对比</h3><table>
<thead>
<tr>
<th><strong>对比维度</strong></th>
<th><strong>二层交换机</strong></th>
<th><strong>三层交换机</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>OSI层级</strong></td>
<td>数据链路层（第二层）</td>
<td>网络层（第三层）</td>
</tr>
<tr>
<td><strong>核心功能</strong></td>
<td>基于MAC地址转发数据帧</td>
<td>基于IP地址和MAC地址转发数据包（兼具交换和路由功能）</td>
</tr>
<tr>
<td><strong>转发依据</strong></td>
<td>MAC地址表（学习、过滤、转发）</td>
<td>路由表（静态&#x2F;动态路由协议） + MAC地址表</td>
</tr>
<tr>
<td><strong>是否支持路由</strong></td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td><strong>VLAN间通信</strong></td>
<td>需借助外部路由器</td>
<td>可直接通过路由模块实现VLAN间通信</td>
</tr>
<tr>
<td><strong>网络范围</strong></td>
<td>同一局域网（同一子网）</td>
<td>跨子网、跨VLAN的局域网或广域网</td>
</tr>
<tr>
<td><strong>性能特点</strong></td>
<td>高速转发（纯硬件交换）</td>
<td>高速交换+路由（ASIC芯片加速路由）</td>
</tr>
<tr>
<td><strong>应用场景</strong></td>
<td>小型局域网接入层（如办公室、宿舍）</td>
<td>企业核心层&#x2F;汇聚层（需路由功能的复杂网络）</td>
</tr>
<tr>
<td><strong>配置复杂度</strong></td>
<td>简单（仅需配置VLAN、端口安全等）</td>
<td>较复杂（需配置路由协议、ACL、QoS等）</td>
</tr>
<tr>
<td><strong>成本</strong></td>
<td>较低</td>
<td>较高</td>
</tr>
<tr>
<td><strong>典型协议支持</strong></td>
<td>STP、VLAN、802.1Q</td>
<td>OSPF、RIP、ACL、NAT等</td>
</tr>
<tr>
<td><strong>设备示例</strong></td>
<td>普通企业接入层交换机（如Huawei S2700）</td>
<td>企业级核心交换机（如Huawei S5700）</td>
</tr>
<tr>
<td><strong>配置DHCP</strong></td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<hr>
<p><strong>补充说明</strong>：  </p>
<ol>
<li>二层交换机只能识别数据帧中的MAC地址，用于在同一局域网内进行数据帧的转发。三层交换机既可以识别数据帧中的MAC地址，也可以识别数据包中的IP地址，用于在不同子网或VLAN之间进行数据包的转发。</li>
</ol>
<h2 id="五-集线器"><a href="#五-集线器" class="headerlink" title="五.集线器"></a>五.集线器</h2><ol>
<li>独立式集线器（Independent Hub）<br>独立式集线器是最常见的集线器类型，通常是一个带有多个端口的单个盒子式设备。它可以通过普通端口用双绞线连接，或者通过10Base-5同轴电缆连接，以实现扩展。独立式集线器的优点包括低成本、便于查找故障和管理，适合小型局域网。但其性能相对较低，尤其是在速度方面。</li>
<li>堆叠式集线器（Stackable Hub）<br>堆叠式集线器可以通过专用的堆叠端口（如“UP”和“DOWN”端口）将多个集线器连接在一起，形成一个逻辑上的单一设备。这种连接方式不会占用普通端口，并且可以实现统一管理。堆叠式集线器便于网络扩充，适合对端口数量有较高要求的大型网络。其优点包括方便管理、扩展性强，且不受传统网络拓扑规则（如5-4-3规则）的限制。</li>
<li>模块化集线器（Modular Hub）<br>模块化集线器配有机架或卡箱，带有多个卡槽，每个槽可以插入一块通信卡，每块通信卡相当于一个独立的集线器。模块化集线器的端口通过底板进行互连，支持灵活的扩展和管理。它适用于较大的网络环境，能够提供更高的通信效率和更复杂的网络管理功能。<span style="background-color:red;">可靠性最高同时价格最贵</span></li>
</ol>
<h2 id="六-网络拓扑结构"><a href="#六-网络拓扑结构" class="headerlink" title="六. 网络拓扑结构"></a>六. 网络拓扑结构</h2><ol>
<li>星型拓扑结构（Star Topology）<br>星型拓扑结构是一种以中央节点为中心，所有其他节点都连接到中央节点的网络拓扑结构。每个节点都通过单独的线路连接到中央节点，形成一个辐射状的网络结构。这种拓扑结构具有易于管理和故障隔离的优点，因为如果中央节点发生故障，整个网络仍然可以继续运行。同时，星型拓扑结构也便于扩展，只需添加更多的节点和线路即可。然而，如果中央节点发生故障，整个网络将无法运行，因此需要高可靠性的中央节点。</li>
<li>环型拓扑结构（Ring Topology）<br>环型拓扑结构是一种所有节点都连接成一个闭合环路的网络拓扑结构。数据沿着环路从一个节点传输到下一个节点，直到到达目标节点。这种拓扑结构具有延迟稳定、易于安装和维护的优点。然而，环型拓扑结构在节点数量较多时，<br>线路数量也会增加，导致成本较高。此外，如果环中的某个节点发生故障，整个网络将无法运行，因此需要高可靠性的节点。<strong>适用于不扩展的局域网，容易安装和监控，传输最大延迟是固定的，传输控制机制简单，实用性强</strong>。</li>
<li>总线型拓扑结构（Bus Topology）<br>总线型拓扑结构是一种所有节点都连接到一个公共传输线路（称为总线）的网络拓扑结构。数据沿着总线从一个节点传输到另一个节点，直到到达目标节点。这种拓扑结构具有易于安装和维护的优点。然而，如果总线发生故障，整个网络将无法运行，因此需要高可靠性的总线。此外，总线型拓扑结构在节点数量较多时，线路数量也会增加，导致成本较高。同时，总线型拓扑结构在数据传输过程中可能会出现冲突，因此需要采用CSMA&#x2F;CD（Carrier Sense Multiple Access with Collision Detection）等机制来避免冲突。<strong>适用于200台以内的小型网络</strong>。</li>
<li>网状拓扑结构（Mesh Topology）<br>网状拓扑结构是一种所有节点都相互连接的网络拓扑结构。每个节点都与其他节点通过单独的线路连接，形成一个复杂的网络结构。这种拓扑结构具有高可靠性和容错性的优点，因为即使某个节点发生故障，网络仍然可以通过其他路径进行通信。然而，网状拓扑结构在节点数量较多时，线路数量也会增加，导致成本较高。此外，网状拓扑结构在数据传输过程中可能会出现冲突，因此需要采用CSMA&#x2F;CD等机制来避免冲突。</li>
</ol>
]]></content>
      <categories>
        <category>导论</category>
      </categories>
      <tags>
        <tag>计算机理论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 macOS 和 Ubuntu 上安装 tealdeer — 快速查看命令帮助</title>
    <url>/2024/12/29/%E5%B7%A5%E5%85%B7/%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>在 Linux 和 macOS 上，tealdeer 是一个基于 tldr（简化版手册页）项目的命令行工具，它让用户能够快速查找和查看命令的简化帮助文档。这对于经常使用命令行的开发者和系统管理员来说，是一个极其有用的工具。本文将介绍如何在 macOS 和 Ubuntu 上安装 tealdeer，并分享几种不同的安装方法。</p>
<h2 id="什么是-tealdeer？"><a href="#什么是-tealdeer？" class="headerlink" title="什么是 tealdeer？"></a>什么是 tealdeer？</h2><p>tealdeer 是一个命令行工具，用于展示 tldr（简化的手册页）项目中的简化命令文档。与传统的 man 命令相比，tealdeer 提供了更为简洁、易懂的命令用法和示例，让用户可以更快速地了解命令的功能。无论是 Linux 系统管理员还是 macOS 开发者，都可以通过 tealdeer 提升效率，减少查找复杂手册页的时间。</p>
<h2 id="为什么使用-tealdeer？"><a href="#为什么使用-tealdeer？" class="headerlink" title="为什么使用 tealdeer？"></a>为什么使用 tealdeer？</h2><ul>
<li><strong>简化命令文档</strong>：tealdeer 提供简短的命令用法，并附有常用的示例和参数，极大简化了命令的理解。</li>
<li><strong>快速查找</strong>：通过 tldr 文档，不用翻阅长篇的 man 页，就可以立刻获得所需的命令使用信息。</li>
<li><strong>支持多种平台</strong>：tealdeer 可以在 macOS、Linux 等多个平台上使用，帮助跨平台开发者保持一致的工作流。</li>
</ul>
<p>接下来，我们将介绍如何在 macOS 和 Ubuntu 上安装 tealdeer。</p>
<hr>
<h2 id="在-macOS-上安装-tealdeer"><a href="#在-macOS-上安装-tealdeer" class="headerlink" title="在 macOS 上安装 tealdeer"></a>在 macOS 上安装 tealdeer</h2><h3 id="1-通过-Homebrew-安装"><a href="#1-通过-Homebrew-安装" class="headerlink" title="1. 通过 Homebrew 安装"></a>1. <strong>通过 Homebrew 安装</strong></h3><p>如果你在 macOS 上使用 Homebrew 包管理器，那么安装 tealdeer 将变得非常简单。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>打开终端。</p>
</li>
<li><p>使用 Homebrew 安装 tealdeer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install tealdeer</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，运行以下命令更新 tldr 缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-通过-Cargo-安装（需要-Rust-环境）"><a href="#2-通过-Cargo-安装（需要-Rust-环境）" class="headerlink" title="2. 通过 Cargo 安装（需要 Rust 环境）"></a>2. <strong>通过 Cargo 安装（需要 Rust 环境）</strong></h3><p>如果你已经在 macOS 上安装了 Rust 和 cargo（Rust 的包管理器），可以直接通过 cargo 安装 tealdeer。</p>
<h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>首先，确保你已经安装了 Rust（如果没有，可以从 <a class="link"   href="https://www.rust-lang.org/learn/get-started" >Rust 官网<i class="fas fa-external-link-alt"></i></a> 安装）。</p>
</li>
<li><p>使用 Cargo 安装 tealdeer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo install tealdeer</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成安装后，同样执行更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-通过-GitHub-Releases-手动安装"><a href="#3-通过-GitHub-Releases-手动安装" class="headerlink" title="3. 通过 GitHub Releases 手动安装"></a>3. <strong>通过 GitHub Releases 手动安装</strong></h3><p>如果你不想使用 Homebrew 或 Cargo，你可以选择直接从 GitHub 下载二进制文件并手动安装。</p>
<h4 id="步骤：-2"><a href="#步骤：-2" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>访问 <a class="link"   href="https://github.com/dbrgn/tealdeer/releases" >tealdeer GitHub Releases 页面<i class="fas fa-external-link-alt"></i></a>。</p>
</li>
<li><p>下载适合 macOS 的预编译二进制文件（通常是 tealdeer-x86_64-apple-darwin.tar.gz）。</p>
</li>
<li><p>解压下载的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> tar -xvf tealdeer-x86_64-apple-darwin.tar.gz</span><br><span class="line">```  </span><br><span class="line">   </span><br><span class="line">4. 将 tealdeer 可执行文件移动到 /usr/local/bin/，使其可以全局访问：</span><br><span class="line">```  bash</span><br><span class="line">   <span class="built_in">sudo</span> <span class="built_in">mv</span> tealdeer /usr/local/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="在-Ubuntu-上安装-tealdeer"><a href="#在-Ubuntu-上安装-tealdeer" class="headerlink" title="在 Ubuntu 上安装 tealdeer"></a>在 Ubuntu 上安装 tealdeer</h2><p>在 Ubuntu 上安装 tealdeer 的方法和 macOS 类似，以下是几种常用的安装方式。</p>
<h3 id="1-通过-APT-安装（适用于较新的-Ubuntu-系统）"><a href="#1-通过-APT-安装（适用于较新的-Ubuntu-系统）" class="headerlink" title="1. 通过 APT 安装（适用于较新的 Ubuntu 系统）"></a>1. <strong>通过 APT 安装（适用于较新的 Ubuntu 系统）</strong></h3><p>Ubuntu 上的最新版本支持通过 APT 安装 tealdeer，但需要额外的 PPA（个人包存档）。不过，tealdeer 并没有官方的 Ubuntu 仓库，因此你需要从第三方 PPA 安装。</p>
<h4 id="步骤：-3"><a href="#步骤：-3" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>首先，添加 PPA 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:dbrgn/tealdeer</span><br></pre></td></tr></table></figure></li>
<li><p>更新你的包列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 tealdeer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install tealdeer</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-通过-Snap-安装"><a href="#2-通过-Snap-安装" class="headerlink" title="2. 通过 Snap 安装"></a>2. <strong>通过 Snap 安装</strong></h3><p>Ubuntu 支持 Snap 包管理系统，你可以直接通过 snap 安装 tealdeer。这种方法适用于支持 Snap 的大多数 Linux 发行版。</p>
<h4 id="步骤：-4"><a href="#步骤：-4" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>安装 tealdeer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install tealdeer</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-手动安装（从-GitHub-Releases）"><a href="#3-手动安装（从-GitHub-Releases）" class="headerlink" title="3. 手动安装（从 GitHub Releases）"></a>3. <strong>手动安装（从 GitHub Releases）</strong></h3><p>如果你不想依赖 Snap 或 APT，你可以直接从 GitHub Releases 页面下载预编译的二进制文件。</p>
<h4 id="步骤：-5"><a href="#步骤：-5" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>访问 <a class="link"   href="https://github.com/dbrgn/tealdeer/releases" >tealdeer GitHub Releases 页面<i class="fas fa-external-link-alt"></i></a>。</p>
</li>
<li><p>下载适合 Linux 系统的 .tar.gz 文件（通常是 tealdeer-x86_64-unknown-linux-gnu.tar.gz）。</p>
</li>
<li><p>解压下载的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf tealdeer-x86_64-unknown-linux-gnu.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>将 tealdeer 可执行文件移动到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;，使其可以全局访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> tealdeer /usr/local/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-通过-Cargo-安装（需要-Rust-环境）"><a href="#4-通过-Cargo-安装（需要-Rust-环境）" class="headerlink" title="4. 通过 Cargo 安装（需要 Rust 环境）"></a>4. <strong>通过 Cargo 安装（需要 Rust 环境）</strong></h3><p>与 macOS 类似，如果你已经在 Ubuntu 上安装了 Rust，你可以通过 Cargo 安装 tealdeer。</p>
<h4 id="步骤：-6"><a href="#步骤：-6" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>安装 tealdeer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo install tealdeer</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr --update</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tealdeer 是一个强大的命令行工具，提供简洁的命令文档，帮助用户快速查找和使用 Linux 命令。无论是 macOS 还是 Ubuntu，安装 tealdeer 都非常简单，你可以通过多种方式进行安装：</p>
<ul>
<li><strong>macOS</strong>：通过 Homebrew、Cargo 或手动下载二进制文件安装。</li>
<li><strong>Ubuntu</strong>：通过 APT、Snap、Cargo 或手动安装。</li>
</ul>
<p>通过上述方法，你可以轻松地在你的 macOS 或 Ubuntu 系统中安装并使用 tealdeer，提高命令行操作的效率。</p>
<p>希望这篇文章能帮助你顺利安装 tealdeer！如果有任何问题，欢迎留言讨论。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言数据结构</title>
    <url>/2024/12/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="C语言排序算法"><a href="#C语言排序算法" class="headerlink" title="C语言排序算法"></a>C语言排序算法</h1><h2 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1. 选择排序"></a>1. 选择排序</h2><ol>
<li>升序即，将第一个元素与其他进行比较，要比第一个元素小的就交换，第一轮之后会得到最小元素，第二轮会第二个元素与其他进行比较，小的就交换，至到最后一轮比较交换结束之后就排序完在。</li>
<li>降序即，每次都找大的。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number_list[] = &#123;<span class="number">88</span>,<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">57</span>,<span class="number">67</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="comment">// 获取数组长度</span></span><br><span class="line">    <span class="type">int</span> length =  <span class="keyword">sizeof</span>(number_list)/ <span class="keyword">sizeof</span>(number_list[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 创建临时变量</span></span><br><span class="line">    <span class="type">int</span> tmp1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; length - <span class="number">1</span>; i ++) &#123; <span class="comment">// 比较轮数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= length - <span class="number">1</span>;j ++ ) &#123; <span class="comment">// 每次比较的数组</span></span><br><span class="line">            <span class="comment">// 进行比较，升序排序</span></span><br><span class="line">            <span class="keyword">if</span> (number_list[i] &gt; number_list[j]) &#123;</span><br><span class="line">                tmp1 = number_list[i];</span><br><span class="line">                number_list[i] = number_list[j];</span><br><span class="line">                number_list[j] = tmp1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length;k ++) &#123;</span><br><span class="line">        <span class="comment">// 每三个元素换行</span></span><br><span class="line">        <span class="keyword">if</span> (k != <span class="number">0</span> &amp;&amp; k % <span class="number">3</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,number_list[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. 冒泡排序</h2><ol>
<li>升序，则从前面往后开始，依此比较相邻的两个元素的大小，较大的下沉，较小的上升。第一轮过<br>后，最大的元素就放在最后一位了。第二轮过后，次大的元素就放在倒数第二位了，之后依此类推。</li>
<li>降序，则从前面往后开始，依此比较相邻的两个元素的大小，较小的下沉，较大的上升。第一轮过<br>后，最小的元素就放在最后一位了。第二轮过后，次小的元素就放在倒数第二位了，之后依此类推。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number_list[] = &#123;<span class="number">88</span>,<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">57</span>,<span class="number">67</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="comment">// 获取数组长度</span></span><br><span class="line">    <span class="type">int</span> length =  <span class="keyword">sizeof</span>(number_list)/ <span class="keyword">sizeof</span>(number_list[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 创建临时变量</span></span><br><span class="line">    <span class="type">int</span> tmp1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; length - <span class="number">1</span>;i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; length - j - <span class="number">1</span>;j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number_list[j]&gt;number_list[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换数据</span></span><br><span class="line">                tmp1 = number_list[j];</span><br><span class="line">                number_list[j] = number_list[j + <span class="number">1</span>];</span><br><span class="line">                number_list[j + <span class="number">1</span>] = tmp1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length;k ++) &#123;</span><br><span class="line">        <span class="comment">// 每三个元素换行</span></span><br><span class="line">        <span class="keyword">if</span> (k != <span class="number">0</span> &amp;&amp; k % <span class="number">3</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,number_list[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-快速排序法"><a href="#3-快速排序法" class="headerlink" title="3.快速排序法"></a>3.快速排序法</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都<br>要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数<br>据变成有序序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">run1224</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">88</span>,<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">57</span>,<span class="number">67</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(a)/ <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    quick_sort(a,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">    printList(a,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * @param a 数组</span></span><br><span class="line"><span class="comment"> * @param low 基准值</span></span><br><span class="line"><span class="comment"> * @param high 最后一个元素索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span>* a,<span class="type">const</span> <span class="type">int</span> low,<span class="type">const</span> <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123; <span class="comment">// 基准值小于最后一个元素索引</span></span><br><span class="line">        <span class="type">int</span> h = high; <span class="comment">// 创建列表最后一个元素索引备份</span></span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="comment">// 初始变量j为基准值，小于列表最大索引</span></span><br><span class="line">        <span class="keyword">for</span> (j = low;j &lt; h;j++) &#123;</span><br><span class="line">            <span class="comment">// 如果 a[j] 个元素大于基准值，进入下个循环</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[low]) &#123;</span><br><span class="line">                <span class="comment">// 确保j小于列表最大索引</span></span><br><span class="line">                <span class="keyword">for</span> (; h &gt; j; h --) &#123;</span><br><span class="line">                    <span class="comment">// 如果最后一个元素，小于基准值，则进行交换</span></span><br><span class="line">                    <span class="keyword">if</span> (a[h] &lt; a[low]) &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 进行元素交换，列如当前 a[h] = 29,a[low] = 88,a[j] = 99</span></span><br><span class="line"><span class="comment">                         * a[j] = a[j] + a[h] = 128</span></span><br><span class="line"><span class="comment">                         * a[h] = a[j] - a[h] = 99</span></span><br><span class="line"><span class="comment">                         * a[j] = a[j] - a[h] = 29</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        a[j] += a[h];</span><br><span class="line">                        a[h] = a[j] - a[h];</span><br><span class="line">                        a[j]-=a[h];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[low] &gt; a[h]) &#123;</span><br><span class="line">            a[low] += a[h];</span><br><span class="line">            a[h] = a[low] - a[h];</span><br><span class="line">            a[low] -= a[h];</span><br><span class="line">        &#125;</span><br><span class="line">        quick_sort(a,low,h<span class="number">-1</span>);</span><br><span class="line">        quick_sort(a,h,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数声明，需要传递数组和数组的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-直接插入排序法"><a href="#4-直接插入排序法" class="headerlink" title="4. 直接插入排序法"></a>4. 直接插入排序法</h2><p>每一步将一个待排序的元素,按其排序码的大小,插入到前面已经排好序的一组元素的适当位置上去,直到元素<br>全部插入为止。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接插入升序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">direct_insert_sort_asc</span><span class="params">(<span class="type">int</span> *number_list,<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt;= len - <span class="number">1</span>;i ++) &#123;</span><br><span class="line">        temp = number_list[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number_list[j] &gt; temp) &#123;</span><br><span class="line">                number_list[j+<span class="number">1</span>] = number_list[j];</span><br><span class="line">                number_list[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printList(number_list,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接插入降序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">direct_insert_sort_desc</span><span class="params">(<span class="type">int</span> *number_list, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123; <span class="comment">// 从第二个元素开始</span></span><br><span class="line">        temp = number_list[i];</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; number_list[j] &lt; temp; j--) &#123; <span class="comment">// 比较条件改为小于</span></span><br><span class="line">            number_list[j + <span class="number">1</span>] = number_list[j]; <span class="comment">// 将元素向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        number_list[j + <span class="number">1</span>] = temp; <span class="comment">// 插入正确的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    printList(number_list, len); <span class="comment">// 打印排序后的列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言查找法"><a href="#C语言查找法" class="headerlink" title="C语言查找法"></a>C语言查找法</h1><h2 id="1-顺序查找法"><a href="#1-顺序查找法" class="headerlink" title="1. 顺序查找法"></a>1. 顺序查找法</h2><p>顺序查找又称线性查找，是最基本的查找方法。它的查找过程为：从第一个元素起，逐个与待查元素比较，<br>若与待查元素相等，则查找成功，返回待查元素在查找表中的位置；若与待查元素不等，则继续与<br>查找表中的下一个元素比较，直到查找结束为止。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sequential_search</span><span class="params">(<span class="type">int</span> *number_list,<span class="type">int</span> len,<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number_list[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-二分查找法"><a href="#2-二分查找法" class="headerlink" title="2. 二分查找法"></a>2. 二分查找法</h2><p>二分查找法（Binary Search）又称折半查找法，它是一种在有序数组中查找特定元素的搜索算法。二分查找<br>法的基本思想是将待查元素与数组的中间元素进行比较，如果相等，则返回中间元素的索引；如果待查元素<br>小于中间元素，则在数组的左半部分继续查找；如果待查元素大于中间元素，则在数组的右半部分继续查找。重复这个过程，直到找到待查元素或查找范围为空。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> *number_list,<span class="type">int</span> len,<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>; <span class="comment">// 计算中间元素的索引</span></span><br><span class="line">        <span class="keyword">if</span> (number_list[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到元素，返回索引</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number_list[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>; <span class="comment">// 在左半部分继续查找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>; <span class="comment">// 在右半部分继续查找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到元素，返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言栈"><a href="#C语言栈" class="headerlink" title="C语言栈"></a>C语言栈</h1><p>栈是一种后进先出（LIFO）的数据结构，它只允许在一端进行插入和删除操作。栈的基本操作包括压栈（Push）和弹栈（Pop）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(Stack *s)</span> &#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Stack *s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Stack *s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == MAX_SIZE - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Stack *s, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(s)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack is full.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++s-&gt;top] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(Stack *s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(s)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack is empty.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stack s; initStack(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line">    push(&amp;s, <span class="number">1</span>);</span><br><span class="line">    push(&amp;s, <span class="number">2</span>);</span><br><span class="line">    push(&amp;s, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s)); <span class="comment">// 输出 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s)); <span class="comment">// 输出 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s)); <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s)); <span class="comment">// 输出 &quot;Stack is empty.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言队列"><a href="#C语言队列" class="headerlink" title="C语言队列"></a>C语言队列</h1><p>队列是一种先进先出（FIFO）的数据结构，它只允许在一端进行插入操作，在另一端进行删除操作。队列的基本操作包括入队（Enqueue）和出队（Dequeue）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(Queue *q)</span> &#123;</span><br><span class="line">    q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue *q)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;front == q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Queue *q)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;rear + <span class="number">1</span>) % MAX_SIZE == q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(Queue *q, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is full.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;data[q-&gt;rear] = value;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dequeue</span><span class="params">(Queue *q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is empty.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> value = q-&gt;data[q-&gt;front];</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Queue q; initQueue(&amp;q);</span><br><span class="line">    enqueue(&amp;q, <span class="number">1</span>);</span><br><span class="line">    enqueue(&amp;q, <span class="number">2</span>);</span><br><span class="line">    enqueue(&amp;q, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dequeue(&amp;q)); <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dequeue(&amp;q)); <span class="comment">// 输出 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dequeue(&amp;q)); <span class="comment">// 输出 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dequeue(&amp;q)); <span class="comment">// 输出 &quot;Queue is empty.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言链表"><a href="#C语言链表" class="headerlink" title="C语言链表"></a>C语言链表</h1><p>链表是一种动态数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表的基本操作包括插入、删除和查找。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertNode</span><span class="params">(Node **head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node *node = createNode(data);</span><br><span class="line">    node-&gt;next = *head;</span><br><span class="line">    *head = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node **head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node *temp = *head;</span><br><span class="line">    Node *prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data != data) &#123;</span><br><span class="line">        prev = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Node with data %d not found.\n&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *head = temp-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev-&gt;next = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node *head)</span> &#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node *head = <span class="literal">NULL</span>;</span><br><span class="line">    insertNode(&amp;head, <span class="number">3</span>);</span><br><span class="line">    insertNode(&amp;head, <span class="number">2</span>);</span><br><span class="line">    insertNode(&amp;head, <span class="number">1</span>);</span><br><span class="line">    printList(head); <span class="comment">// 输出 1 2 3</span></span><br><span class="line">    deleteNode(&amp;head, <span class="number">2</span>);</span><br><span class="line">    printList(head); <span class="comment">// 输出 1 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言树"><a href="#C语言树" class="headerlink" title="C语言树"></a>C语言树</h1><p>树是一种非线性数据结构，它由一系列节点组成，每个节点包含数据和指向子节点的指针。树的基本操作包括插入、删除和查找。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertNode</span><span class="params">(Node **root, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (*root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *root = createNode(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data &lt; (*root)-&gt;data) &#123;</span><br><span class="line">        insertNode(&amp;(*root)-&gt;left, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(&amp;(*root)-&gt;right, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node **root, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (*root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Node with data %d not found.\n&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data &lt; (*root)-&gt;data) &#123;</span><br><span class="line">        deleteNode(&amp;(*root)-&gt;left, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; (*root)-&gt;data) &#123;</span><br><span class="line">        deleteNode(&amp;(*root)-&gt;right, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*root)-&gt;left == <span class="literal">NULL</span> &amp;&amp; (*root)-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*root);</span><br><span class="line">            *root = <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*root)-&gt;left == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Node *temp = *root;</span><br><span class="line">            *root = (*root)-&gt;right;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*root)-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Node *temp = *root;</span><br><span class="line">            *root = (*root)-&gt;left;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node *temp = findMinNode((*root)-&gt;right);</span><br><span class="line">            (*root)-&gt;data = temp-&gt;data;</span><br><span class="line">            deleteNode(&amp;(*root)-&gt;right, temp-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">findMinNode</span><span class="params">(Node *root)</span> &#123;</span><br><span class="line">    Node *temp = root;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;left != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = temp-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTree</span><span class="params">(Node *root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printTree(root-&gt;left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    printTree(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node *root = <span class="literal">NULL</span>;</span><br><span class="line">    insertNode(&amp;root, <span class="number">5</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">3</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">7</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">2</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">4</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">6</span>);</span><br><span class="line">    insertNode(&amp;root, <span class="number">8</span>);</span><br><span class="line">    printTree(root); <span class="comment">// 输出 2 3 4 5 6 7 8</span></span><br><span class="line">    deleteNode(&amp;root, <span class="number">4</span>);</span><br><span class="line">    printTree(root); <span class="comment">// 输出 2 3 5 6 7 8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言图"><a href="#C语言图" class="headerlink" title="C语言图"></a>C语言图</h1><p>图是一种非线性数据结构，它由一系列节点和边组成，每个节点可以与多个节点相连。图的基本操作包括插入、删除和查找。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> numVertices;</span><br><span class="line">    Node **adjLists;</span><br><span class="line">&#125; Graph;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Graph *<span class="title function_">createGraph</span><span class="params">(<span class="type">int</span> numVertices)</span> &#123;</span><br><span class="line">    Graph *graph = (Graph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">    graph-&gt;numVertices = numVertices;</span><br><span class="line">    graph-&gt;adjLists = (Node **)<span class="built_in">malloc</span>(numVertices * <span class="keyword">sizeof</span>(Node *));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        graph-&gt;adjLists[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(Graph *graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    Node *newNode = createNode(dest);</span><br><span class="line">    newNode-&gt;next = graph-&gt;adjLists[src];</span><br><span class="line">    graph-&gt;adjLists[src] = newNode;</span><br><span class="line"></span><br><span class="line">    newNode = createNode(src);</span><br><span class="line">    newNode-&gt;next = graph-&gt;adjLists[dest];</span><br><span class="line">    graph-&gt;adjLists[dest] = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(Graph *graph)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; graph-&gt;numVertices; v++) &#123;</span><br><span class="line">        Node *temp = graph-&gt;adjLists[v];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n Adjacency list of vertex %d\n &quot;</span>, v);</span><br><span class="line">        <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;data);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Graph *graph = createGraph(<span class="number">5</span>);</span><br><span class="line">    addEdge(graph, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdge(graph, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    addEdge(graph, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdge(graph, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    addEdge(graph, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    addEdge(graph, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    addEdge(graph, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    printGraph(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C语言堆"><a href="#C语言堆" class="headerlink" title="C语言堆"></a>C语言堆</h1><p>堆是一种特殊的树形数据结构，它满足堆属性，即每个节点的值都大于或等于（或小于或等于）其子节点的值。堆的基本操作包括插入、删除和查找。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125; Heap;</span><br><span class="line"></span><br><span class="line">Heap *<span class="title function_">createHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    Heap *heap = (Heap *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Heap));</span><br><span class="line">    heap-&gt;<span class="built_in">array</span> = (<span class="type">int</span> *)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    heap-&gt;capacity = capacity;</span><br><span class="line">    heap-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(Heap *heap, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heap-&gt;size == heap-&gt;capacity) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Heap is full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        heap-&gt;<span class="built_in">array</span>[heap-&gt;size] = data;</span><br><span class="line">        heap-&gt;size++;</span><br><span class="line">        <span class="type">int</span> child = heap-&gt;size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> parent = (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (heap-&gt;<span class="built_in">array</span>[child] &lt; heap-&gt;<span class="built_in">array</span>[parent]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = heap-&gt;<span class="built_in">array</span>[child];</span><br><span class="line">                heap-&gt;<span class="built_in">array</span>[child] = heap-&gt;<span class="built_in">array</span>[parent];</span><br><span class="line">                heap-&gt;<span class="built_in">array</span>[parent] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            child = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">(Heap *heap)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heap-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Heap is empty\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        heap-&gt;<span class="built_in">array</span>[<span class="number">0</span>] = heap-&gt;<span class="built_in">array</span>[heap-&gt;size - <span class="number">1</span>];</span><br><span class="line">        heap-&gt;size--;</span><br><span class="line">        <span class="type">int</span> parent = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (parent &lt; heap-&gt;size) &#123;</span><br><span class="line">            <span class="type">int</span> leftChild = <span class="number">2</span> * parent + <span class="number">1</span>; <span class="comment">// left child</span></span><br><span class="line">            <span class="type">int</span> rightChild = <span class="number">2</span> * parent + <span class="number">2</span>; <span class="comment">// right child</span></span><br><span class="line">            <span class="type">int</span> min = parent;</span><br><span class="line">            <span class="keyword">if</span> (leftChild &lt; heap-&gt;size &amp;&amp; heap-&gt;<span class="built_in">array</span>[leftChild] &lt; heap-&gt;<span class="built_in">array</span>[min]) &#123;</span><br><span class="line">                min = leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rightChild &lt; heap-&gt;size &amp;&amp; heap-&gt;<span class="built_in">array</span>[rightChild] &lt; heap-&gt;<span class="built_in">array</span>[min]) &#123;</span><br><span class="line">                </span><br><span class="line">                min = rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min != parent) &#123;</span><br><span class="line">                <span class="type">int</span> temp = heap-&gt;<span class="built_in">array</span>[min];</span><br><span class="line">                heap-&gt;<span class="built_in">array</span>[min] = heap-&gt;<span class="built_in">array</span>[parent];</span><br><span class="line">                heap-&gt;<span class="built_in">array</span>[parent] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parent = min;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHeap</span><span class="params">(Heap *heap)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; heap-&gt;size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, heap-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Heap *heap = createHeap(<span class="number">10</span>);</span><br><span class="line">    insert(heap, <span class="number">10</span>);</span><br><span class="line">    insert(heap, <span class="number">20</span>);</span><br><span class="line">    insert(heap, <span class="number">30</span>);</span><br><span class="line">    insert(heap, <span class="number">40</span>);</span><br><span class="line">    insert(heap, <span class="number">50</span>);</span><br><span class="line">    printHeap(heap);</span><br><span class="line">    delete(heap);</span><br><span class="line">    printHeap(heap);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 RTSP 协议与 WebRTC-Streamer 实现海康摄像头视频流的网页实时播放</title>
    <url>/2025/10/24/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%B5%81%E5%AA%92%E4%BD%93/%E5%9F%BA%E4%BA%8E-RTSP-%E5%8D%8F%E8%AE%AE%E4%B8%8E-WebRTC-Streamer-%E5%AE%9E%E7%8E%B0%E6%B5%B7%E5%BA%B7%E6%91%84%E5%83%8F%E5%A4%B4%E8%A7%86%E9%A2%91%E6%B5%81%E7%9A%84%E7%BD%91%E9%A1%B5%E5%AE%9E%E6%97%B6%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>最近在做一个安防监控项目时，遇到了一个常见的技术难题：如何在网页上实时播放海康摄像头的视频流？大家都知道，海康等主流摄像头通常使用 RTSP 协议输出视频，但浏览器并不支持直接播放 RTSP 流，这给 Web 端集成带来了很大挑战。</p>
<p>经过多次尝试和踩坑，我发现 WebRTC-Streamer 是一个非常轻量级且高效的解决方案。它能将 RTSP 流实时转换为浏览器支持的 WebRTC 流，实现毫秒级延迟的视频播放。今天就把整个实现过程和经验分享给大家，希望能帮助到有类似需求的开发者。</p>
<hr>
<h3 id="二、核心原理解析"><a href="#二、核心原理解析" class="headerlink" title="二、核心原理解析"></a>二、核心原理解析</h3><h4 id="1-RTSP-协议简介"><a href="#1-RTSP-协议简介" class="headerlink" title="1. RTSP 协议简介"></a>1. RTSP 协议简介</h4><p>先简单说一下 RTSP 协议。RTSP（Real Time Streaming Protocol）是专门为实时流媒体设计的控制协议，海康、大华等主流安防设备都默认支持。我们平时访问摄像头时，常用的 RTSP URL 格式是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rtsp://用户名:密码@摄像头IP:554/Streaming/Channels/101</span><br></pre></td></tr></table></figure>

<p>这里有个小细节需要注意：URL 中的数字组合很关键，<code>101</code> 代表主码流（高清），而 <code>102</code> 则代表子码流（标清）。在实际应用中，如果网络带宽有限，可以考虑使用子码流来保证流畅度。</p>
<p>RTSP 最大的优势是延迟低，但它的缺点也很明显——浏览器并不支持直接播放，这也是我们需要 WebRTC-Streamer 的原因。</p>
<h4 id="2-WebRTC-协议简介"><a href="#2-WebRTC-协议简介" class="headerlink" title="2. WebRTC 协议简介"></a>2. WebRTC 协议简介</h4><p>WebRTC（Web Real-Time Communication）相信大家都不陌生，它是浏览器原生支持的实时通信技术。在实际使用中，我发现 WebRTC 有几个非常突出的优势：</p>
<ul>
<li>完全不需要安装任何插件，所有现代浏览器都原生支持</li>
<li>延迟极低，实际测试中通常能控制在 500ms 以内</li>
<li>内置了 NAT 穿透功能，这对于复杂网络环境下的部署非常友好</li>
<li>支持端到端加密，安全性有保障</li>
</ul>
<p>正是这些特性，让 WebRTC 成为了浏览器实时视频播放的理想选择。</p>
<h4 id="3-WebRTC-Streamer-作用"><a href="#3-WebRTC-Streamer-作用" class="headerlink" title="3. WebRTC-Streamer 作用"></a>3. WebRTC-Streamer 作用</h4><p>WebRTC-Streamer 是整个解决方案的核心，它就像一个「翻译官」，在 RTSP 和 WebRTC 之间架起了一座桥梁。我在项目中使用后发现，它的设计非常巧妙：</p>
<ul>
<li>首先，它能接收来自摄像头的 RTSP 流（实际上它还支持 RTMP、HTTP 等多种协议）</li>
<li>然后，它会智能地进行转封装处理，尽可能避免全量转码（这对性能影响很大）</li>
<li>最后，它通过 WebRTC 协议将视频流输出给浏览器</li>
<li>同时，它还内置了 WebSocket 信令服务，让前端可以方便地控制视频流</li>
</ul>
<p>这样一来，就形成了一条完整的传输链路：摄像头 → WebRTC-Streamer → 浏览器，实现了从专业安防设备到 Web 前端的无缝衔接。</p>
<hr>
<h3 id="三、部署环境准备"><a href="#三、部署环境准备" class="headerlink" title="三、部署环境准备"></a>三、部署环境准备</h3><h4 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h4><p>在开始之前，我们需要准备以下环境：</p>
<ul>
<li>一台支持 RTSP 协议的海康摄像头（确保 RTSP 功能已开启）</li>
<li>一台服务器或本地电脑（用于部署 WebRTC-Streamer）</li>
<li>Docker 环境（强烈推荐，能极大简化部署流程）</li>
</ul>
<h4 id="2-获取摄像头-RTSP-地址"><a href="#2-获取摄像头-RTSP-地址" class="headerlink" title="2. 获取摄像头 RTSP 地址"></a>2. 获取摄像头 RTSP 地址</h4><p>这一步很关键，很多朋友在这里遇到问题。首先，登录海康摄像头的管理后台，进入「网络设置 → 高级设置 → 端口」，确认 RTSP 端口是否为默认的 554（大多数情况下都是）。</p>
<p>然后，根据摄像头的用户名、密码和 IP 地址，按照格式拼接 RTSP URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rtsp://admin:12345@192.168.1.64:554/Streaming/Channels/101</span><br></pre></td></tr></table></figure>

<p>这里要注意，不同型号的海康摄像头可能 URL 格式略有不同。如果遇到连接问题，可以查阅对应型号的官方文档。</p>
<hr>
<h3 id="四、使用-WebRTC-Streamer-转推-RTSP-流"><a href="#四、使用-WebRTC-Streamer-转推-RTSP-流" class="headerlink" title="四、使用 WebRTC-Streamer 转推 RTSP 流"></a>四、使用 WebRTC-Streamer 转推 RTSP 流</h3><h4 id="1-拉取镜像并运行"><a href="#1-拉取镜像并运行" class="headerlink" title="1. 拉取镜像并运行"></a>1. 拉取镜像并运行</h4><p>使用 Docker 部署是最简便的方式，一行命令就能搞定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name webrtc-streamer \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -e RTSP_URL=<span class="string">&quot;rtsp://admin:12345@192.168.1.64:554/Streaming/Channels/101&quot;</span> \</span><br><span class="line">  mpromonet/webrtc-streamer</span><br></pre></td></tr></table></figure>

<p>这里用的是官方维护的 <code>mpromonet/webrtc-streamer</code> 镜像，支持多种操作系统和硬件平台，稳定性和兼容性都很不错。启动后，服务会默认监听 8000 端口。</p>
<h4 id="2-验证服务"><a href="#2-验证服务" class="headerlink" title="2. 验证服务"></a>2. 验证服务</h4><p>部署完成后，我们需要验证服务是否正常运行。打开浏览器，访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;你的服务器IP&gt;:8000</span><br></pre></td></tr></table></figure>

<p>如果一切顺利，你会看到 WebRTC-Streamer 的默认播放页面。在页面的输入框中，你可以手动输入 RTSP 地址，或者如果之前在启动容器时已经通过环境变量指定了 RTSP URL，系统可能会自动识别并显示对应的流。点击播放按钮，就能看到摄像头的实时画面了。</p>
<hr>
<h3 id="五、前端网页嵌入-WebRTC-播放"><a href="#五、前端网页嵌入-WebRTC-播放" class="headerlink" title="五、前端网页嵌入 WebRTC 播放"></a>五、前端网页嵌入 WebRTC 播放</h3><p>在实际项目中，我们通常需要将视频播放功能集成到自己的系统中。WebRTC-Streamer 提供了简洁的 HTTP API，可以很方便地嵌入到我们的前端页面。</p>
<p>下面是一个我在项目中使用过的集成示例，已经过优化并添加了完善的错误处理和用户体验设计：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>海康视频实时预览<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./webrtcstreamer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#1e88e5</span>, <span class="number">#2196f3</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">1.8rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.video-container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-top</span>: <span class="number">56.25%</span>; <span class="comment">/* 16:9 Aspect Ratio */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#video</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">object-fit</span>: contain;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.status-overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">gap</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.status-indicator</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: pulse <span class="number">2s</span> infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.status-indicator</span><span class="selector-class">.connected</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.status-indicator</span><span class="selector-class">.disconnected</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#f44336</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.status-indicator</span><span class="selector-class">.connecting</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#ff9800</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> pulse &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.controls</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">gap</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">gap</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn-primary</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn-primary</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#1976d2</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">33</span>, <span class="number">150</span>, <span class="number">243</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn-danger</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#f44336</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#d32f2f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">244</span>, <span class="number">67</span>, <span class="number">54</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.info</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.info</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.loading-overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.spinner</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: spin <span class="number">1s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> spin &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.controls</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>海康视频实时预览<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">playsinline</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loadingOverlay&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading-overlay&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在连接视频流...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;statusOverlay&quot;</span> <span class="attr">class</span>=<span class="string">&quot;status-overlay&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;statusIndicator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;status-indicator connecting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;statusText&quot;</span>&gt;</span>连接中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;connectBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">        🔄 重新连接</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;disconnectBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-danger&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">        ⏹️ 断开连接</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>连接信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>WebRTC 服务地址:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;wsUrlDisplay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>RTSP 摄像头地址:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;rtspUrlDisplay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// DOM 元素引用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> videoElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> loadingOverlay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loadingOverlay&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> statusOverlay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;statusOverlay&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> statusIndicator = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;statusIndicator&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> statusText = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;statusText&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> connectBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;connectBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> disconnectBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disconnectBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> wsUrlDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;wsUrlDisplay&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> rtspUrlDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;rtspUrlDisplay&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 配置信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> wsUrl = <span class="string">&quot;http://192.168.0.109:8000&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> rtspUrl = <span class="string">&quot;rtsp://admin:1212121@192.168.0.207:554/cam/realmonitor?channel=1&amp;subtype=0&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显示连接信息（隐藏敏感信息）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> sanitizedRtspUrl = rtspUrl.<span class="title function_">replace</span>(<span class="regexp">/admin:[^@]+@/</span>, <span class="string">&#x27;admin:****@&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    wsUrlDisplay.<span class="property">textContent</span> = wsUrl;</span></span><br><span class="line"><span class="language-javascript">    rtspUrlDisplay.<span class="property">textContent</span> = sanitizedRtspUrl;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// WebRTC 实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ws = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> reconnectAttempts = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> maxReconnectAttempts = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isConnecting = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新状态显示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateStatus</span>(<span class="params">status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">switch</span>(status) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;connecting&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">          statusIndicator.<span class="property">className</span> = <span class="string">&#x27;status-indicator connecting&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          statusText.<span class="property">textContent</span> = <span class="string">&#x27;连接中...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          loadingOverlay.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;flex&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          connectBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          disconnectBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;connected&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">          statusIndicator.<span class="property">className</span> = <span class="string">&#x27;status-indicator connected&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          statusText.<span class="property">textContent</span> = <span class="string">&#x27;已连接&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          loadingOverlay.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          connectBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          disconnectBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          reconnectAttempts = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;disconnected&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">          statusIndicator.<span class="property">className</span> = <span class="string">&#x27;status-indicator disconnected&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          statusText.<span class="property">textContent</span> = <span class="string">&#x27;已断开&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          loadingOverlay.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          connectBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          disconnectBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">          statusIndicator.<span class="property">className</span> = <span class="string">&#x27;status-indicator disconnected&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          statusText.<span class="property">textContent</span> = <span class="string">&#x27;连接错误&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          loadingOverlay.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          connectBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          disconnectBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 连接视频流</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">connectStream</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (isConnecting || (ws &amp;&amp; ws.<span class="property">connected</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      isConnecting = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateStatus</span>(<span class="string">&#x27;connecting&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 销毁旧实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (ws) &#123;</span></span><br><span class="line"><span class="language-javascript">          ws.<span class="title function_">disconnect</span>();</span></span><br><span class="line"><span class="language-javascript">          ws = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建新实例并连接</span></span></span><br><span class="line"><span class="language-javascript">        ws = <span class="keyword">new</span> <span class="title class_">WebRtcStreamer</span>(videoElement, wsUrl);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重写 onEvent 方法来处理连接事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> originalOnEvent = ws.<span class="property">onEvent</span>;</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onEvent</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebRTC Event:&#x27;</span>, event);</span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (event === <span class="string">&#x27;initialized&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebRTC 初始化完成&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event === <span class="string">&#x27;play&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频播放开始&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateStatus</span>(<span class="string">&#x27;connected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event === <span class="string">&#x27;disconnected&#x27;</span> || event === <span class="string">&#x27;stopped&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频连接断开&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateStatus</span>(<span class="string">&#x27;disconnected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event === <span class="string">&#x27;error&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;视频连接错误&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateStatus</span>(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleReconnect</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 调用原始方法</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (originalOnEvent) &#123;</span></span><br><span class="line"><span class="language-javascript">            originalOnEvent.<span class="title function_">call</span>(<span class="variable language_">this</span>, event);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">          isConnecting = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 连接 RTSP 流</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">connect</span>(rtspUrl);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置超时处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (isConnecting) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;连接超时&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateStatus</span>(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            isConnecting = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleReconnect</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">15000</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;连接过程中发生错误:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateStatus</span>(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        isConnecting = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleReconnect</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 断开视频流</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">disconnectStream</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (ws) &#123;</span></span><br><span class="line"><span class="language-javascript">          ws.<span class="title function_">disconnect</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">updateStatus</span>(<span class="string">&#x27;disconnected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;断开连接时发生错误:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 处理自动重连</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handleReconnect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (reconnectAttempts &lt; maxReconnectAttempts) &#123;</span></span><br><span class="line"><span class="language-javascript">        reconnectAttempts++;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`尝试重新连接 (<span class="subst">$&#123;reconnectAttempts&#125;</span>/<span class="subst">$&#123;maxReconnectAttempts&#125;</span>)...`</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">connectStream</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">3000</span> * reconnectAttempts); <span class="comment">// 递增延迟时间</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件监听器</span></span></span><br><span class="line"><span class="language-javascript">    connectBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, connectStream);</span></span><br><span class="line"><span class="language-javascript">    disconnectBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, disconnectStream);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 页面加载时连接视频</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, connectStream);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 页面关闭前断开连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;beforeunload&#x27;</span>, disconnectStream);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听视频错误事件</span></span></span><br><span class="line"><span class="language-javascript">    videoElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;视频元素错误:&#x27;</span>, e);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateStatus</span>(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleReconnect</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将上面的代码保存为 HTML 文件，并确保 <code>webrtcstreamer.js</code> 文件在同一目录下，然后在浏览器中打开，就能看到带有状态指示和控制按钮的视频播放页面了。页面会自动连接到配置的摄像头，并显示实时画面。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img  
                       lazyload
                       alt="image"
                       data-src="/images/webrtc.png"
                        alt="WebRTC 视频播放效果"
                 ></h2><h3 id="六、进阶应用与优化"><a href="#六、进阶应用与优化" class="headerlink" title="六、进阶应用与优化"></a>六、进阶应用与优化</h3><h4 id="1-多摄像头接入"><a href="#1-多摄像头接入" class="headerlink" title="1. 多摄像头接入"></a>1. 多摄像头接入</h4><p>在实际项目中，我们经常需要同时管理多个摄像头。WebRTC-Streamer 支持通过环境变量配置多个 RTSP 流：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 \</span><br><span class="line">  -e RTSP_URL_1=<span class="string">&quot;rtsp://admin:pass@192.168.1.64:554/Streaming/Channels/101&quot;</span> \</span><br><span class="line">  -e RTSP_URL_2=<span class="string">&quot;rtsp://admin:pass@192.168.1.65:554/Streaming/Channels/101&quot;</span> \</span><br><span class="line">  mpromonet/webrtc-streamer</span><br></pre></td></tr></table></figure>

<p>在前端，我们可以添加一个摄像头选择器，让用户可以方便地切换不同的视频流。我在项目中还实现了画面分割功能，支持同时显示 4 路或 9 路摄像头画面，这样监控效率会大大提高。</p>
<h4 id="2-延迟优化建议"><a href="#2-延迟优化建议" class="headerlink" title="2. 延迟优化建议"></a>2. 延迟优化建议</h4><p>在实时监控场景中，延迟是一个关键指标。经过实际测试，我总结了几个有效的优化建议：</p>
<ul>
<li><strong>使用子码流</strong>：对于普通监控场景，使用子码流（将 URL 中的 <code>101</code> 改为 <code>102</code>）可以在保证基本画面质量的同时，显著降低带宽占用和延迟</li>
<li><strong>优化网络环境</strong>：确保摄像头和 WebRTC-Streamer 服务器在同一个局域网内，减少网络跳转</li>
<li><strong>调整服务器配置</strong>：如果服务器性能允许，可以适当调整 WebRTC-Streamer 的缓存参数</li>
<li><strong>避免转码</strong>：尽量保持视频编码格式的兼容性，让 WebRTC-Streamer 只做转封装而不进行转码，这样能大大减少延迟</li>
</ul>
<p>在我的项目中，通过这些优化，视频延迟可以稳定控制在 300ms 以内。</p>
<h4 id="3-HTTPS-与远程访问"><a href="#3-HTTPS-与远程访问" class="headerlink" title="3. HTTPS 与远程访问"></a>3. HTTPS 与远程访问</h4><p>这里有个重要的安全限制需要注意：WebRTC 必须在安全上下文（HTTPS 或 localhost）中才能正常工作。如果需要远程访问，我们需要配置 HTTPS。</p>
<p>我的做法是使用 Nginx 作为反向代理，并配置 SSL 证书：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span> /path/to/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /path/to/key.pem;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样配置后，用户就可以通过 HTTPS 安全地远程访问视频监控系统了。</p>
<hr>
<h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>经过这次项目实践，我发现 WebRTC-Streamer 确实是连接安防摄像头和 Web 前端的理想桥梁。整个方案具有以下优势：</p>
<ul>
<li><strong>兼容性好</strong>：几乎支持所有主流浏览器，无需安装任何插件</li>
<li><strong>延迟极低</strong>：通过合理优化，延迟可以控制在几百毫秒内</li>
<li><strong>部署简单</strong>：使用 Docker 可以快速部署，大大降低了运维成本</li>
<li><strong>扩展性强</strong>：支持多摄像头接入，可以根据实际需求灵活扩展</li>
</ul>
<p>这种方案在很多场景下都能发挥作用，比如：</p>
<ul>
<li>物联网设备的视频监控中心</li>
<li>智慧园区的可视化大屏展示</li>
<li>工厂或工地的远程巡检系统</li>
<li>零售店铺的实时客流分析</li>
</ul>
<p>如果你也在做类似的项目，不妨试试这个方案，相信会给你带来不错的效果。</p>
<hr>
<h3 id="八、参考资料"><a href="#八、参考资料" class="headerlink" title="八、参考资料"></a>八、参考资料</h3><p>在实现这个方案的过程中，我查阅了不少资料，这里分享给大家：</p>
<ul>
<li><a class="link"   href="https://github.com/mpromonet/webrtc-streamer" >WebRTC-Streamer 官方仓库<i class="fas fa-external-link-alt"></i></a> - 包含最新的代码和详细文档</li>
<li><a class="link"   href="https://www.hikvision.com/cn/support/Downloads/TechnicalDocuments/" >海康威视设备网络SDK使用手册<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://webrtc.org/start/" >WebRTC 官方文档<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.docker.com/" >Docker 官方文档<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>网络协议与流媒体</category>
      </categories>
      <tags>
        <tag>RTSP</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础</title>
    <url>/2023/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="SQL语法总结"><a href="#SQL语法总结" class="headerlink" title="SQL语法总结"></a>SQL语法总结</h3><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dror database if <span class="keyword">exists</span> xx; 删除数据库</span><br><span class="line"><span class="keyword">show</span> databases;              展示所有数据库</span><br><span class="line">use xxx                      进入指定的数据库</span><br><span class="line"><span class="keyword">show</span> tables;                 展示所有表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxxx;          展示表中的内容</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> country <span class="keyword">FROM</span> Websites; 返回表中不同的值</span><br><span class="line"> <span class="keyword">describe</span> <span class="keyword">user</span>;              查看表格数据结构</span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;                   查看表格建构 简写</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao <span class="keyword">where</span> sixth<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>; <span class="string">&#x27;where&#x27;</span>作为条件筛选数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>; 创建用户命令</span><br><span class="line"># 数据库备份<span class="keyword">sql</span>文件命令</span><br><span class="line">mysqldump  <span class="operator">-</span>u  root  <span class="operator">-</span>p123456  <span class="comment">--databases 数据库名称 -r 备份文件路径</span></span><br><span class="line"># 数据库导入<span class="keyword">sql</span>文件命令</span><br><span class="line">source name.sql</span><br></pre></td></tr></table></figure>
<h3 id="ALTER-语法"><a href="#ALTER-语法" class="headerlink" title="ALTER 语法"></a>ALTER 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 字段名 ;删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 字段名 字段类型 是否可为空 COMMENT <span class="string">&#x27;注释&#x27;</span> AFTER 指定某字段 ; 在指定位置插入新字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 COMMENT <span class="string">&#x27;新注释&#x27;</span>; 修改注释</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 RENAME <span class="keyword">TO</span> 新表名 ; 修改表名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY [<span class="keyword">COLUMN</span>] 字段名 新数据类型 新类型长度  新默认值  新注释;</span><br></pre></td></tr></table></figure>
<h3 id="SQL-ORDER-BY-语法"><a href="#SQL-ORDER-BY-语法" class="headerlink" title="SQL ORDER BY 语法"></a>SQL ORDER BY 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>column1, column2, …：要排序的字段名称，可以为多个字段。</li>
<li>ASC：表示按升序排序。</li>
<li>DESC：表示按降序排序。</li>
</ul>
<h3 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure>
<ul>
<li>table_name：需要插入新记录的表名。</li>
<li>column1, column2, …：需要插入的字段名。</li>
<li>value1, value2, …：需要插入的字段值</li>
</ul>
<h3 id="SQL-UPDATE-语句"><a href="#SQL-UPDATE-语句" class="headerlink" title="SQL UPDATE 语句"></a>SQL UPDATE 语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;        </span><br></pre></td></tr></table></figure>
<ul>
<li>table_name：要修改的表名称。</li>
<li>column1, column2, …：要修改的字段名称，可以为多个字段。</li>
<li>value1, value2, …：要修改的值，可以为多个值。</li>
<li>condition：修改条件，用于指定哪些数据要修改。</li>
</ul>
<h3 id="SQL-DELETE-语句"><a href="#SQL-DELETE-语句" class="headerlink" title="SQL DELETE 语句"></a>SQL DELETE 语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>table_name：要删除的表名称。</li>
<li>condition：删除条件，用于指定哪些数据要删除。</li>
</ul>
<h4 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><p>DELETE FROM table_name;</p>
<h3 id="MySQL-SELECT-LIMIT"><a href="#MySQL-SELECT-LIMIT" class="headerlink" title="MySQL SELECT LIMIT"></a>MySQL SELECT LIMIT</h3><p>用于规定要返回的记录的数目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites LIMIT <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> diaochabiao</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">Like</span> <span class="string">&#x27;l%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>%l 以’l’结尾所有项</li>
<li>%l% 包含’l’的所有项<br>注释：从diaochabiao中找出name列中以’l’开头的所有项</li>
</ul>
<h3 id="SQL-charlist-通配符"><a href="#SQL-charlist-通配符" class="headerlink" title="SQL [charlist] 通配符"></a>SQL [charlist] 通配符</h3><p>MySQL 中使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao</span><br><span class="line"><span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[^A-H]&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="SQL-IN-操作符"><a href="#SQL-IN-操作符" class="headerlink" title="SQL IN 操作符"></a>SQL IN 操作符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IN</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table_name：要查询的表名称。</li>
<li>column：要查询的字段名称。</li>
<li>value1, value2, …：要查询的值，可以为多个值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> BrithYear <span class="keyword">IN</span> (<span class="string">&#x27;2002&#x27;</span>,<span class="string">&#x27;2003&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> ljn  <span class="operator">|</span>      <span class="number">2002</span> <span class="operator">|</span> 男    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> ljh  <span class="operator">|</span>      <span class="number">2003</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="SQL-BETWEEN-操作符"><a href="#SQL-BETWEEN-操作符" class="headerlink" title="SQL BETWEEN 操作符"></a>SQL BETWEEN 操作符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table_name：要查询的表名称。</li>
<li>column：要查询的字段名称。</li>
<li>value1：范围的起始值。</li>
<li>value2：范围的结束值。</li>
</ul>
<h4 id="实列"><a href="#实列" class="headerlink" title="实列"></a>实列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="带有-IN-的-BETWEEN-操作符实例"><a href="#带有-IN-的-BETWEEN-操作符实例" class="headerlink" title="带有 IN 的 BETWEEN 操作符实例"></a>带有 IN 的 BETWEEN 操作符实例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> (id <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> sixth <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;NULL&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="SQL-别名"><a href="#SQL-别名" class="headerlink" title="SQL 别名"></a>SQL 别名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name,concat(BrithYear,sixth)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AS</span> bs <span class="keyword">from</span> diaochabiao;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> name <span class="operator">|</span> bs     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> ljn  <span class="operator">|</span> <span class="number">2002</span>男 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ljh  <span class="operator">|</span> <span class="number">2003</span>女 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> lhh  <span class="operator">|</span> <span class="number">2005</span>女 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="SQL-连接-JOIN"><a href="#SQL-连接-JOIN" class="headerlink" title="SQL 连接(JOIN)"></a>SQL 连接(JOIN)</h3><p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。<br>最常见的 JOIN 类型：SQL INNER JOIN（简单的 JOIN）。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table1：要连接的第一个表。</li>
<li>table2：要连接的第二个表。</li>
<li>condition：连接条件，用于指定连接方式。</li>
</ul>
<h4 id="不同的-SQL-JOIN"><a href="#不同的-SQL-JOIN" class="headerlink" title="不同的 SQL JOIN"></a>不同的 SQL JOIN</h4><ul>
<li>INNER JOIN：如果表中有至少一个匹配，则返回行</li>
<li>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</li>
<li>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行</li>
<li>FULL JOIN：只要其中一个表中存在匹配，则返回行<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> shenfen <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-12</span><span class="number">-22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">2222222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>    <span class="number">2222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> ljn  <span class="operator">|</span>      <span class="number">2002</span> <span class="operator">|</span> 男    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> ljh  <span class="operator">|</span>      <span class="number">2003</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newlist</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">inner</span> <span class="keyword">join</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">on</span> newlist.id <span class="operator">=</span> diaochabiao.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> shenfen <span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+----+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-12</span><span class="number">-22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">2222222</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> ljn  <span class="operator">|</span>      <span class="number">2002</span> <span class="operator">|</span> 男    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>    <span class="number">2222</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> ljh  <span class="operator">|</span>      <span class="number">2003</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+----+------+-----------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>注释：INNER JOIN 关键字在表中存在至少一个匹配时返回行。如果 “diaochabiao” 表中的行在 “newlist” 中没有匹配，则不会列出这些行。</p>
<h3 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newlist</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">left</span> <span class="keyword">join</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">on</span> newlist.id <span class="operator">=</span> diaochabiao.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+------+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> shenfen <span class="operator">|</span> id   <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+------+------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-12</span><span class="number">-22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">2222222</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> ljn  <span class="operator">|</span>      <span class="number">2002</span> <span class="operator">|</span> 男    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>    <span class="number">2222</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ljh  <span class="operator">|</span>      <span class="number">2003</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------+------+------+-----------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">right</span> <span class="keyword">join</span> newlist</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">on</span> diaochabiao.id <span class="operator">=</span> newlist.id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+-------+----+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> Name <span class="operator">|</span> BrithYear <span class="operator">|</span> sixth <span class="operator">|</span> id <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> shenfen <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+-------+----+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> ljn  <span class="operator">|</span>      <span class="number">2002</span> <span class="operator">|</span> 男    <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-12</span><span class="number">-22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">2222222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ljh  <span class="operator">|</span>      <span class="number">2003</span> <span class="operator">|</span> 女    <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>    <span class="number">2222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> lhh  <span class="operator">|</span>      <span class="number">2005</span> <span class="operator">|</span> 女    <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+-------+----+---------------------+---------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>注释：RIGHT JOIN 关键字从右表（access_log）返回所有的行，即使左表（Websites）中没有匹配。</p>
<h3 id="SQL-UNION-操作符"><a href="#SQL-UNION-操作符" class="headerlink" title="SQL UNION 操作符"></a>SQL UNION 操作符</h3><p>SQL UNION 操作符合并两个或多个 SELECT 语句的结果。<br>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>
<p>注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p>
<h4 id="实列-1"><a href="#实列-1" class="headerlink" title="实列"></a>实列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> country <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">union</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> country <span class="keyword">from</span> newlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> US      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> UT      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="SQL-UNION-ALL-语法"><a href="#SQL-UNION-ALL-语法" class="headerlink" title="SQL UNION ALL 语法"></a>SQL UNION ALL 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>
<p>注释：UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> country <span class="keyword">from</span> diaochabiao</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> country <span class="keyword">from</span> newlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> US      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> UT      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> US      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="SQL-SELECT-INTO-语句"><a href="#SQL-SELECT-INTO-语句" class="headerlink" title="SQL SELECT INTO 语句"></a>SQL SELECT INTO 语句</h3><p>通过 SQL，您可以从一个表复制信息到另一个表。</p>
<p>SELECT INTO 语句从一个表复制数据，然后把数据插入到另一个新表中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">INTO</span> newtable [<span class="keyword">IN</span> externaldb]</span><br><span class="line"><span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure>
<h3 id="SQL-INSERT-INTO-SELECT-语句"><a href="#SQL-INSERT-INTO-SELECT-语句" class="headerlink" title="SQL INSERT INTO SELECT 语句"></a>SQL INSERT INTO SELECT 语句</h3><p>INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个已存在的表中。目标表中任何已存在的行都不会受影响。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure>
<h4 id="实列-2"><a href="#实列-2" class="headerlink" title="实列"></a>实列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> persons;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> personID <span class="operator">|</span> FristName <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> ljn       <span class="operator">|</span> cn      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> persons(FristName,country)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> name,country <span class="keyword">from</span> diaochabiao;</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> persons;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> personID <span class="operator">|</span> FristName <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> ljn       <span class="operator">|</span> cn      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> ljn       <span class="operator">|</span> US      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span> ljh       <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> lhh       <span class="operator">|</span> UT      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用指令</title>
    <url>/2024/08/28/%E8%BF%90%E7%BB%B4/docker/Docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<blockquote><p>声明: 本文环境均采用ubuntu:20.04</p>
</blockquote>
<h3 id="Docker服务启停"><a href="#Docker服务启停" class="headerlink" title="Docker服务启停"></a>Docker服务启停</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker <span class="comment">#启动docker</span></span><br><span class="line">systemctl status docker <span class="comment">#查看服务状态</span></span><br><span class="line">systemctl stop docker <span class="comment">#停止</span></span><br><span class="line">systemctl restart docker <span class="comment">#重启docker</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker <span class="comment">#开机启动</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi docker images -q  <span class="comment">#删除所有镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span> &lt;镜像名称或ID&gt; <span class="comment">#删除单个镜像命令</span></span><br><span class="line">docker image <span class="built_in">rm</span> -f &lt;镜像名称或ID&gt; <span class="comment">#强制删除镜像命令</span></span><br><span class="line">docker images -q name <span class="comment">#查看镜像是否存在</span></span><br><span class="line">docker build -f BackFile -t back:v1 <span class="comment">#指定dockerfile名称</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a <span class="comment">#查看历史容器</span></span><br><span class="line">docker <span class="built_in">kill</span> -s KILL name <span class="comment">#向容器发送一个信号杀死容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it name /bin/bash <span class="comment">#分配一个终端给容器，进入容器</span></span><br><span class="line">docker <span class="built_in">export</span> 1e560fca3906 &gt; ubuntu.tar <span class="comment">#导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。</span></span><br><span class="line">docker stop name <span class="comment">#停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> name <span class="comment">#删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f 1e560fca3906 <span class="comment">#删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> docker ps -aq <span class="comment">#删除所有容器</span></span><br><span class="line">docker inspect name <span class="comment">#查看容器信息c</span></span><br><span class="line">docker stop $(docker ps -a -q) <span class="comment">#停止所有容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -a -q) <span class="comment">#删除所有容器</span></span><br><span class="line"><span class="comment">#停止并删除所有容器</span></span><br><span class="line">docker stop $(docker ps -a -q) &amp;&amp; docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br><span class="line">docker <span class="built_in">exec</span> -it myMysql mysql -u root -p123456 <span class="comment">#进入mysql控制台</span></span><br><span class="line">docker update --restart=always &lt;容器名称&gt; <span class="comment">#容器自启动</span></span><br><span class="line">docker inspect &lt;容器名&gt;| grep RestartPolicy <span class="comment">#验证是否生效</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker容器的数据卷"><a href="#Docker容器的数据卷" class="headerlink" title="Docker容器的数据卷"></a>Docker容器的数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ....-v 宿主机目录（文件）:容器内目录（文件）...</span><br><span class="line"><span class="comment">#列</span></span><br><span class="line">docker run -it --name=c1 -v /root/data:/root/data_container centos:7</span><br><span class="line">docker volume <span class="built_in">ls</span> <span class="comment">#查看数据卷</span></span><br><span class="line">docker inspect name <span class="comment">#查看数据卷信息</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker复制主机文件命令"><a href="#Docker复制主机文件命令" class="headerlink" title="Docker复制主机文件命令"></a>Docker复制主机文件命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> &lt;host_path&gt; &lt;container_name_or_id&gt;:&lt;container_path&gt;</span><br><span class="line">docker <span class="built_in">cp</span> /home/user/data/. my-container:/app/data/</span><br></pre></td></tr></table></figure>

<h3 id="Docker端口映射"><a href="#Docker端口映射" class="headerlink" title="Docker端口映射"></a>Docker端口映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p [宿主机端口]:[主机端口] --name [名称] [镜像名称]</span><br><span class="line">docker run --name myMysql -p 23306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="MYSQL创建一个容器"><a href="#MYSQL创建一个容器" class="headerlink" title="MYSQL创建一个容器"></a>MYSQL创建一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> \</span><br><span class="line">&gt; -p 3307:3306 \</span><br><span class="line">&gt; --name=c_mysql \</span><br><span class="line">&gt; -v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \</span><br><span class="line">&gt; -v <span class="variable">$PWD</span>/logs:/logs \</span><br><span class="line">&gt; -v <span class="variable">$PWD</span>/data:/var/lib/mysql \</span><br><span class="line">&gt; -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">&gt; mysql:latest</span><br><span class="line"><span class="comment"># 指定mysql容器数据库字符集</span></span><br><span class="line">docker run --name myMysql -p 23306:3306 -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=health -e MYSQL_CHARSET=utf8 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p><a class="link"   href="https://www.runoob.com/docker/docker-dockerfile.html" >dockerfile常用指令<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>创建镜像指令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t myubuntu:01 .</span><br><span class="line">docker build -t 镜像名:版本号 DockerFile所在的文件目录</span><br></pre></td></tr></table></figure>

<ul>
<li>编写Dockerfile文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos  <span class="comment"># 指定镜像来源</span></span><br><span class="line">WORKDIR /app <span class="comment"># 指定后续指令工作目录</span></span><br><span class="line">COPY src/ /app <span class="comment"># 将宿主机文件复制到容器中</span></span><br><span class="line">RUN <span class="built_in">echo</span> 321 &gt;&gt; 1.txt <span class="comment"># 在构建容器过程中执行命令</span></span><br><span class="line">CMD <span class="built_in">tail</span> -f 1.txt <span class="comment"># 指定创建容器时的默认命令</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker构建镜像命令"><a href="#Docker构建镜像命令" class="headerlink" title="Docker构建镜像命令"></a>Docker构建镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t [name] . <span class="comment">#dockerfile文件位置</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker-compose配置文件"><a href="#Docker-compose配置文件" class="headerlink" title="Docker-compose配置文件"></a>Docker-compose配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代表docker-compose项目版本号</span></span><br><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line">services:</span><br><span class="line">  tomcat:</span><br><span class="line">     container_name: tomcat00 <span class="comment">#代表给容器指定一个名称</span></span><br><span class="line">     image: tomcat:latest</span><br><span class="line">     ports:</span><br><span class="line">        - 8080:8080</span><br><span class="line">  tomcat01:</span><br><span class="line">    image: tomcat:latest</span><br><span class="line">    ports:</span><br><span class="line">        - 8081:8081</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:5.0</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6380:6379&quot;</span></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    environment: <span class="comment">#代表当前容器启动环境</span></span><br><span class="line">      - <span class="string">&quot;MYSQL_ROOT_PASSWORD=12345678&quot;</span></span><br><span class="line">    volumes:  <span class="comment">#代表当前容器和宿主机指定数据卷</span></span><br><span class="line">      - /root/mysqldata1:/var/lib/mysql</span><br><span class="line">volumes:</span><br><span class="line">  mysqlData: <span class="comment">#声明别名数据卷</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动docker-compose</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up <span class="comment">#指定这个命令必须在dokcer-compose.yml文件配值文件目录</span></span><br><span class="line">docker-compose down <span class="comment">#清除缓存</span></span><br><span class="line">docker-compose down --rmi all <span class="comment">#移除所有镜像</span></span><br><span class="line">docker-compose build --no-cache name</span><br><span class="line">docker-compose up --force-recreate --build  <span class="comment">#强制重新创建所有容器</span></span><br></pre></td></tr></table></figure>

<h3 id="DockerFile和Docker-compose区别"><a href="#DockerFile和Docker-compose区别" class="headerlink" title="DockerFile和Docker-compose区别"></a>DockerFile和Docker-compose区别</h3><ul>
<li><strong>Dockerfile：</strong> 用于定义如何构建单个 Docker 镜像，包括基础镜像、添加文件、运行命令、设置环境变量等。</li>
<li><strong>docker-compose：</strong> 用于定义和管理多个相关联的 Docker 容器，以创建一个完整的容器化应用程序。通过一个 YAML 文件配置多个容器、网络、卷等，简化了容器组合和协调的过程。</li>
</ul>
<h3 id="Docker部署H2数据库"><a href="#Docker部署H2数据库" class="headerlink" title="Docker部署H2数据库"></a>Docker部署H2数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull oscarfonts/h2</span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker run -d -p 8082:8082 -p 9092:9092 --name h2-database -e H2_OPTIONS=<span class="string">&#x27;-ifNotExists&#x27;</span> oscarfonts/h2</span><br><span class="line"><span class="comment">#H2_OPTIONS: 这是一个环境变量的名称，它被H2数据库镜像用来识别启动选项。&#x27;-ifNotExists&#x27;: 这是H2数据库的启动选项，告诉H2在启动时检查数据库文件是否存在，如果不存在，则创建一个新的数据库。</span></span><br></pre></td></tr></table></figure>
<h3 id="Docker创建Redis容器并指定用户名密码"><a href="#Docker创建Redis容器并指定用户名密码" class="headerlink" title="Docker创建Redis容器并指定用户名密码"></a>Docker创建Redis容器并指定用户名密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name myRedis -p 6379:6379 -d redis:alpine --requirepass your_password</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>一键部署 Elasticsearch 和 Kibana</title>
    <url>/2024/12/31/%E8%BF%90%E7%BB%B4/docker/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2-Elasticsearch-%E5%92%8C-Kibana/</url>
    <content><![CDATA[<h1 id="一键部署-Elasticsearch-和-Kibana"><a href="#一键部署-Elasticsearch-和-Kibana" class="headerlink" title="一键部署 Elasticsearch 和 Kibana"></a>一键部署 Elasticsearch 和 Kibana</h1><p>在开发或测试环境中，快速搭建 Elasticsearch 和 Kibana 是很多开发者的需求。通过 Docker Compose，可以非常方便地实现 Elasticsearch 和 Kibana 的一键部署。本篇文章将介绍如何使用 Docker Compose 快速部署 Elasticsearch 和 Kibana。</p>
<h2 id="为什么使用-Docker-部署？"><a href="#为什么使用-Docker-部署？" class="headerlink" title="为什么使用 Docker 部署？"></a>为什么使用 Docker 部署？</h2><ul>
<li><strong>简化环境配置</strong>：无需手动安装和配置 Elasticsearch 和 Kibana，直接使用官方镜像即可。</li>
<li><strong>快速启动和销毁</strong>：通过 Docker Compose，一条命令即可启动或删除整个服务集群。</li>
<li><strong>一致性</strong>：确保开发和测试环境与生产环境的一致性。</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>确保已经安装以下工具：<ul>
<li><a class="link"   href="https://www.docker.com/" >Docker<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.docker.com/compose/" >Docker Compose<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li>确保机器有足够的资源。建议至少 2GB 内存可用，特别是 Elasticsearch 对内存需求较高。</li>
</ol>
<h2 id="创建-Docker-Compose-配置文件"><a href="#创建-Docker-Compose-配置文件" class="headerlink" title="创建 Docker Compose 配置文件"></a>创建 Docker Compose 配置文件</h2><p>在项目目录下，新建一个文件 <code>docker-compose.yml</code>，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.17.10</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms512m</span> <span class="string">-Xmx512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.enabled=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.monitoring.collection.enabled=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es_data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.17.10</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_HOSTS=http://elasticsearch:9200</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">es_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elastic:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<h3 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h3><ul>
<li><p><strong>Elasticsearch</strong>:</p>
<ul>
<li><code>discovery.type=single-node</code>：设置为单节点模式，适合开发和测试环境。</li>
<li><code>ES_JAVA_OPTS=-Xms512m -Xmx512m</code>：分配 512MB 内存，可以根据机器配置调整。</li>
<li><code>xpack.security.enabled=false</code>：关闭安全功能，简化配置。</li>
</ul>
</li>
<li><p><strong>Kibana</strong>:</p>
<ul>
<li><code>ELASTICSEARCH_HOSTS=http://elasticsearch:9200</code>：指定 Elasticsearch 的地址。</li>
</ul>
</li>
<li><p><strong>Volumes</strong>: 使用持久化存储，确保数据在容器重启后不会丢失。</p>
</li>
<li><p><strong>Networks</strong>: 定义自定义网络，保证容器间的通信。</p>
</li>
</ul>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>在 <code>docker-compose.yml</code> 文件所在的目录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-d</code> 参数表示以后台模式运行。</li>
<li>运行成功后，Docker 会拉取 Elasticsearch 和 Kibana 的镜像，并启动对应的容器。</li>
</ul>
<h2 id="验证部署"><a href="#验证部署" class="headerlink" title="验证部署"></a>验证部署</h2><ol>
<li><p><strong>Elasticsearch</strong>:<br>打开浏览器，访问 <a class="link"   href="http://localhost:9200/" >http://localhost:9200<i class="fas fa-external-link-alt"></i></a>。<br>如果看到类似以下内容，说明 Elasticsearch 部署成功：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;容器名&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.17.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Kibana</strong>:<br>打开浏览器，访问 <a class="link"   href="http://localhost:5601/" >http://localhost:5601<i class="fas fa-external-link-alt"></i></a>。<br>如果看到 Kibana 的登录页面或加载界面，说明 Kibana 部署成功。</p>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-容器无法启动？"><a href="#1-容器无法启动？" class="headerlink" title="1. 容器无法启动？"></a>1. 容器无法启动？</h3><ul>
<li>检查机器是否有足够的内存。Elasticsearch 对内存需求较高，可以尝试增大内存分配：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms1g</span> <span class="string">-Xmx1g</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-Kibana-无法连接到-Elasticsearch？"><a href="#2-Kibana-无法连接到-Elasticsearch？" class="headerlink" title="2. Kibana 无法连接到 Elasticsearch？"></a>2. Kibana 无法连接到 Elasticsearch？</h3><ul>
<li>确保 <code>ELASTICSEARCH_HOSTS</code> 地址正确，且 Elasticsearch 容器已启动。</li>
<li>检查 Kibana 和 Elasticsearch 的版本是否一致。</li>
</ul>
<h3 id="3-数据如何持久化？"><a href="#3-数据如何持久化？" class="headerlink" title="3. 数据如何持久化？"></a>3. 数据如何持久化？</h3><ul>
<li>默认使用 Docker 的 <code>es_data</code> 卷来存储 Elasticsearch 数据，可以通过以下命令查看卷：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Docker Compose，我们可以非常方便地部署 Elasticsearch 和 Kibana，只需一条命令即可启动整个服务集群。这种方式非常适合开发和测试环境，能够节省大量配置时间。</p>
<p>如果你对这篇文章有任何疑问或建议，欢迎在评论区留言！</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2024/08/28/%E8%BF%90%E7%BB%B4/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="linux常用命令总结"><a href="#linux常用命令总结" class="headerlink" title="linux常用命令总结"></a>linux常用命令总结</h3><h3 id="查看系统发行版本"><a href="#查看系统发行版本" class="headerlink" title="查看系统发行版本"></a>查看系统发行版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -oP <span class="string">&#x27;(?&lt;=^ID=).+&#x27;</span> /etc/os-release</span><br><span class="line">lsb_release -a <span class="comment">#列出所有版本信息</span></span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvf test.tar <span class="built_in">test</span>/ <span class="comment">#tar压缩包命令</span></span><br><span class="line">unzip example.zip -d /home/user/Downloads <span class="comment">#解压到指定目录</span></span><br><span class="line">zip -r example.zip example <span class="comment">#将文件夹压缩为zip文件</span></span><br><span class="line">unzip -l example.zip <span class="comment">#查看压缩包中文件</span></span><br></pre></td></tr></table></figure>

<h3 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li>-e或–expression&#x3D; 以选项中指定的script来处理输入的文本文件。</li>
<li>-f或–file&#x3D; 以选项中指定的script文件来处理输入的文本文件。</li>
<li>-h或–help 显示帮助。</li>
<li>-n或–quiet或–silent 仅显示script处理后的结果。</li>
<li>-V或–version 显示版本信息。</li>
</ul>
<p><strong>动作说明</strong>：</p>
<ul>
<li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</li>
<li>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li>
<li>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我们先创建一个 <strong>testFile</strong> 文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> testFile <span class="comment">#查看testfile 中的内容  </span></span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Google</span><br><span class="line">Taobao</span><br><span class="line">Runoob</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<p>在第四行写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -e 4a\newLine testFile </span><br></pre></td></tr></table></figure>

<p>删除1到3行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1,3 d&#x27;</span> testFile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# sed <span class="string">&#x27;1,3 d&#x27;</span> testFile </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Google</span><br><span class="line">Taobao</span><br><span class="line">Runoob</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<h3 id="数据的查找与替换"><a href="#数据的查找与替换" class="headerlink" title="数据的查找与替换"></a>数据的查找与替换</h3><p>sed 的查找与替换的与 <strong>vi</strong> 命令类似，语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# sed <span class="string">&#x27;s/Runoob/test/g&#x27;</span> testFile </span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Google</span><br><span class="line">Taobao</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<p>将 testFile 文件中每行第一次出现的 oo 用字符串 kk 替换，然后将该文件内容输出到标准输出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# sed -e <span class="string">&#x27;s/oo/kk/&#x27;</span> testFile</span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Gkkgle</span><br><span class="line">Taobao</span><br><span class="line">Runkkb</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<p><strong>g</strong> 标识符表示全局查找替换，使 sed 对文件中所有符合的字符串都被替换，修改后内容会到标准输出，不会修改原文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# sed -e <span class="string">&#x27;s/oo/kk/g&#x27;</span> testFile </span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Gkkgle</span><br><span class="line">Taobao</span><br><span class="line">Runkkb</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<p>选项 <strong>i</strong> 使 sed 修改文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# sed -i <span class="string">&#x27;s/oo/kk/g&#x27;</span> testFile </span><br><span class="line">root@ubuntu:/# <span class="built_in">cat</span> testFile </span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Gkkgle</span><br><span class="line">Taobao</span><br><span class="line">Runkkb</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br></pre></td></tr></table></figure>

<p>替换原有的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/password=.*/password=4444/g&#x27;</span> ../testfile.1.ini	</span><br><span class="line">sed -i <span class="string">&quot;s%10.0.0.1:5010%<span class="variable">$&#123;your_fetcher&#125;</span>%g&quot;</span> docs/nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="ifconfig-命令"><a href="#ifconfig-命令" class="headerlink" title="ifconfig 命令"></a>ifconfig 命令</h3><p>启动网卡命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig ens33 up</span><br></pre></td></tr></table></figure>

<p>关闭网卡命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig ens33 down</span><br></pre></td></tr></table></figure>

<h3 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h3><p>获取服务端口占用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -nlp|grep fisco-bcos</span><br><span class="line">tcp        0      0 0.0.0.0:30501           0.0.0.0:*               LISTEN      5639/fisco-bcos     </span><br><span class="line">tcp        0      0 0.0.0.0:30500           0.0.0.0:*               LISTEN      5637/fisco-bcos     </span><br><span class="line">tcp        0      0 0.0.0.0:20501           0.0.0.0:*               LISTEN      5639/fisco-bcos     </span><br><span class="line">tcp        0      0 0.0.0.0:20500           0.0.0.0:*               LISTEN      5637/fisco-bcos     </span><br><span class="line">tcp        0      0 127.0.0.1:8946          0.0.0.0:*               LISTEN      5639/fisco-bcos     </span><br><span class="line">tcp        0      0 127.0.0.1:8945          0.0.0.0:*               LISTEN      5637/fisco-bcos </span><br></pre></td></tr></table></figure>

<p>获取服务端口占用数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -nlp|grep fisco-bcos|<span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p>检查服务进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -v grep | grep fisco-bcos</span><br></pre></td></tr></table></figure>

<p>检查服务进程数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -v grep | grep fisco-bcos | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h3 id="查看当前时间戳"><a href="#查看当前时间戳" class="headerlink" title="查看当前时间戳"></a>查看当前时间戳</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> +%s</span><br></pre></td></tr></table></figure>
<ul>
<li>时间戳转日期<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -d @1699319273</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="查看并杀死服务进程"><a href="#查看并杀死服务进程" class="headerlink" title="查看并杀死服务进程"></a>查看并杀死服务进程</h3><ul>
<li>查看进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp|grep server_ctl</span><br></pre></td></tr></table></figure></li>
<li>杀死所有关于server_ctl的进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkill -f server_ctl</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="nohup后台运行服务保存日志"><a href="#nohup后台运行服务保存日志" class="headerlink" title="nohup后台运行服务保存日志"></a>nohup后台运行服务保存日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./my_service.sh &gt; log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="文件内容排序，去重统计数量"><a href="#文件内容排序，去重统计数量" class="headerlink" title="文件内容排序，去重统计数量"></a>文件内容排序，去重统计数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> test.txt | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n</span><br></pre></td></tr></table></figure>
<ul>
<li>输出<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZj6c6hk0w19ob8g31qessZ ~]# <span class="built_in">sort</span> test.txt | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n</span><br><span class="line">      4 ccc</span><br><span class="line">      5 bbb</span><br><span class="line">      6 aaa</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="查看文件内容是否为空，并截取第一个数据"><a href="#查看文件内容是否为空，并截取第一个数据" class="headerlink" title="查看文件内容是否为空，并截取第一个数据"></a>查看文件内容是否为空，并截取第一个数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> -l test.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输出<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZj6c6hk0w19ob8g31qessZ ~]# <span class="built_in">wc</span> -l test.txt | awk <span class="string">&#x27;&#123;print&#125;&#x27;</span></span><br><span class="line">15 test.txt</span><br><span class="line">[root@iZj6c6hk0w19ob8g31qessZ ~]# <span class="built_in">wc</span> -l test.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line">15</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mysql-命令行操作数据库"><a href="#mysql-命令行操作数据库" class="headerlink" title="mysql 命令行操作数据库"></a>mysql 命令行操作数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p123456 -e <span class="string">&quot;CREATE DATABASE webasestat;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="History-清除历史记录"><a href="#History-清除历史记录" class="headerlink" title="History 清除历史记录"></a>History 清除历史记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.bash_history</span><br><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure>
<h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwdd &lt;用户名&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallel Ubuntu initramfs 的紧急修复模式如何处理</title>
    <url>/2025/09/24/%E8%BF%90%E7%BB%B4/linux/Parallel-Ubuntu-initramfs-%E7%9A%84%E7%B4%A7%E6%80%A5%E4%BF%AE%E5%A4%8D%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/linux-initramfs.png"
                        alt="alt text"
                 ></p>
<h2 id="什么是-initramfs-紧急修复模式"><a href="#什么是-initramfs-紧急修复模式" class="headerlink" title="什么是 initramfs 紧急修复模式"></a>什么是 initramfs 紧急修复模式</h2><p>当 Ubuntu 系统启动过程中遇到文件系统错误或磁盘问题时，系统会自动进入 initramfs 紧急修复模式。这是一个最小化的根文件系统，用于在系统无法正常启动时进行故障排除和修复。</p>
<h3 id="常见触发原因"><a href="#常见触发原因" class="headerlink" title="常见触发原因"></a>常见触发原因</h3><ul>
<li>文件系统损坏或出现错误</li>
<li>磁盘空间不足</li>
<li>硬盘物理故障</li>
<li>不正常关机导致的文件系统不一致</li>
<li><code>/etc/fstab</code> 配置错误</li>
<li>内核模块加载失败</li>
</ul>
<h2 id="进入紧急修复模式的表现"><a href="#进入紧急修复模式的表现" class="headerlink" title="进入紧急修复模式的表现"></a>进入紧急修复模式的表现</h2><p>当系统进入 initramfs 模式时，你会看到类似以下的提示：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">BusyBox v1.30.1 (Ubuntu 1:1.30.1-4ubuntu6.3) built-in shell (ash)</span><br><span class="line">Enter &#x27;help&#x27; for a list of built-in commands.</span><br><span class="line"></span><br><span class="line">(initramfs) </span><br></pre></td></tr></table></figure>

<h2 id="快速修复方法"><a href="#快速修复方法" class="headerlink" title="快速修复方法"></a>快速修复方法</h2><h3 id="1-文件系统检查和修复"><a href="#1-文件系统检查和修复" class="headerlink" title="1. 文件系统检查和修复"></a>1. 文件系统检查和修复</h3><p>最常用的修复命令是使用 <code>fsck</code> 对文件系统进行检查和修复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fsck -y /dev/sda2</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>-y</code>：对所有询问自动回答 “yes”，自动修复发现的错误</li>
<li><code>/dev/sda2</code>：需要检查的分区，通常是根分区</li>
</ul>
<h3 id="2-确认修复结果"><a href="#2-确认修复结果" class="headerlink" title="2. 确认修复结果"></a>2. 确认修复结果</h3><p>修复完成后，你会看到类似以下输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fsck from util-linux 2.39.3</span><br><span class="line">e2fsck 1.46.2 (28-Feb-2021)</span><br><span class="line">/dev/sda2: clean, 1234/567890 files, 123456/2345678 blocks</span><br></pre></td></tr></table></figure>

<p>输出说明：</p>
<ul>
<li><code>clean</code>：表示文件系统已经干净，没有错误</li>
<li><code>files</code>：显示已使用的 inode 数量</li>
<li><code>blocks</code>：显示已使用的数据块数量</li>
</ul>
<h3 id="3-退出并重启"><a href="#3-退出并重启" class="headerlink" title="3. 退出并重启"></a>3. 退出并重启</h3><p>修复完成后，使用以下命令退出并重启系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶故障排除"><a href="#进阶故障排除" class="headerlink" title="进阶故障排除"></a>进阶故障排除</h2><h3 id="检查磁盘分区"><a href="#检查磁盘分区" class="headerlink" title="检查磁盘分区"></a>检查磁盘分区</h3><p>如果不确定哪个分区是根分区，可以使用以下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<h3 id="挂载文件系统进行手动修复"><a href="#挂载文件系统进行手动修复" class="headerlink" title="挂载文件系统进行手动修复"></a>挂载文件系统进行手动修复</h3><p>有时需要挂载文件系统进行更详细的检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建挂载点</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载根分区</span></span><br><span class="line">mount /dev/sda2 /mnt/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查关键文件</span></span><br><span class="line"><span class="built_in">ls</span> -la /mnt/root/etc/</span><br><span class="line"><span class="built_in">cat</span> /mnt/root/etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">umount /mnt/root</span><br></pre></td></tr></table></figure>

<h3 id="修复特定类型的文件系统"><a href="#修复特定类型的文件系统" class="headerlink" title="修复特定类型的文件系统"></a>修复特定类型的文件系统</h3><p>不同的文件系统使用不同的检查工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ext2/ext3/ext4 文件系统</span></span><br><span class="line">fsck.ext4 -y /dev/sda2</span><br><span class="line"></span><br><span class="line"><span class="comment"># XFS 文件系统</span></span><br><span class="line">xfs_repair /dev/sda2</span><br><span class="line"></span><br><span class="line"><span class="comment"># NTFS 文件系统</span></span><br><span class="line">ntfsfix /dev/sda2</span><br></pre></td></tr></table></figure>

<h2 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h2><h3 id="1-定期检查文件系统"><a href="#1-定期检查文件系统" class="headerlink" title="1. 定期检查文件系统"></a>1. 定期检查文件系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定期运行文件系统检查（在维护时间）</span></span><br><span class="line"><span class="built_in">sudo</span> fsck -f /dev/sda2</span><br></pre></td></tr></table></figure>

<h3 id="2-监控磁盘健康状态"><a href="#2-监控磁盘健康状态" class="headerlink" title="2. 监控磁盘健康状态"></a>2. 监控磁盘健康状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装并使用 smartmontools</span></span><br><span class="line"><span class="built_in">sudo</span> apt install smartmontools</span><br><span class="line"><span class="built_in">sudo</span> smartctl -a /dev/sda</span><br></pre></td></tr></table></figure>

<h3 id="3-正确关机"><a href="#3-正确关机" class="headerlink" title="3. 正确关机"></a>3. 正确关机</h3><p>避免强制断电，始终使用正确的关机命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> shutdown -h now</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="4-备份重要数据"><a href="#4-备份重要数据" class="headerlink" title="4. 备份重要数据"></a>4. 备份重要数据</h3><p>定期备份重要数据，以防止数据丢失：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 rsync 进行增量备份</span></span><br><span class="line">rsync -av --delete /home/user/ /backup/user/</span><br></pre></td></tr></table></figure>

<h2 id="常见问题和解决方案"><a href="#常见问题和解决方案" class="headerlink" title="常见问题和解决方案"></a>常见问题和解决方案</h2><h3 id="Q-fsck-修复后仍然进入-initramfs-模式"><a href="#Q-fsck-修复后仍然进入-initramfs-模式" class="headerlink" title="Q: fsck 修复后仍然进入 initramfs 模式"></a>Q: fsck 修复后仍然进入 initramfs 模式</h3><p><strong>A:</strong> 可能的原因和解决方案：</p>
<ol>
<li>检查 <code>/etc/fstab</code> 文件是否正确</li>
<li>验证分区 UUID 是否匹配</li>
<li>检查是否有硬件故障</li>
</ol>
<h3 id="Q-修复过程中出现大量错误"><a href="#Q-修复过程中出现大量错误" class="headerlink" title="Q: 修复过程中出现大量错误"></a>Q: 修复过程中出现大量错误</h3><p><strong>A:</strong> 建议：</p>
<ol>
<li>不要使用 <code>-y</code> 参数，手动确认每个修复操作</li>
<li>先进行只读检查：<code>fsck -n /dev/sda2</code></li>
<li>如果错误过多，考虑数据恢复后重新安装系统</li>
</ol>
<h3 id="Q-找不到正确的设备分区"><a href="#Q-找不到正确的设备分区" class="headerlink" title="Q: 找不到正确的设备分区"></a>Q: 找不到正确的设备分区</h3><p><strong>A:</strong> 使用以下命令定位：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有分区</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分区UUID和文件系统类型</span></span><br><span class="line">blkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前挂载情况</span></span><br><span class="line">mount | grep <span class="string">&quot;/&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>initramfs 紧急修复模式是 Ubuntu 系统的重要安全机制，当遇到文件系统问题时：</p>
<ol>
<li><strong>保持冷静</strong>：这是可以修复的常见问题</li>
<li><strong>使用 fsck</strong>：大多数问题可以通过 <code>fsck -y /dev/sda2</code> 解决</li>
<li><strong>验证修复</strong>：确认看到 “clean” 状态后再重启</li>
<li><strong>预防为主</strong>：定期维护和正确使用系统可以避免大多数问题</li>
</ol>
<p>通过正确的故障排除步骤，大多数 initramfs 相关问题都可以得到有效解决，确保系统快速恢复正常运行。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>initramfs</tag>
        <tag>故障修复</tag>
        <tag>文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title>centos配置静态IP</title>
    <url>/2024/12/21/%E8%BF%90%E7%BB%B4/linux/centos%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/</url>
    <content><![CDATA[<h2 id="1-通过修改配置文件修改"><a href="#1-通过修改配置文件修改" class="headerlink" title="1. 通过修改配置文件修改"></a>1. 通过修改配置文件修改</h2><h3 id="1-1-修改配置文件"><a href="#1-1-修改配置文件" class="headerlink" title="1.1 修改配置文件"></a>1.1 修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<h3 id="1-2-修改配置文件内容"><a href="#1-2-修改配置文件内容" class="headerlink" title="1.2 修改配置文件内容"></a>1.2 修改配置文件内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=4efeb675-1c50-4de3-9605-3d9019109eb9</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">IPADDR=192.168.1.13</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">PREFIX=24</span><br></pre></td></tr></table></figure>
<p>:wq 保存并退出</p>
<h3 id="1-3-重启网络服务"><a href="#1-3-重启网络服务" class="headerlink" title="1.3 重启网络服务"></a>1.3 重启网络服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<h3 id="1-4-查看IP地址"><a href="#1-4-查看IP地址" class="headerlink" title="1.4 查看IP地址"></a>1.4 查看IP地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p>成功之后可以看到</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/ipaddr.png"
                        alt="alt text"
                 ></p>
<h2 id="2-通过nmtui修改"><a href="#2-通过nmtui修改" class="headerlink" title="2. 通过nmtui修改"></a>2. 通过nmtui修改</h2><h3 id="2-1-打开nmtui"><a href="#2-1-打开nmtui" class="headerlink" title="2.1 打开nmtui"></a>2.1 打开nmtui</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure>
<p>点击编辑连接</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/editconn.jpeg"
                        alt="alt text"
                 ></p>
<p>选择ens33网卡，点击编辑<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/editconn2.jpeg"
                        alt="alt text"
                 ></p>
<p>修改网络连接信息<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/changenetwork.jpeg"
                        alt="alt text"
                 ></p>
<p>修改完毕之后，点击OK完成,然后Back</p>
<p>选中激活连接，回车<br><img  
                       lazyload
                       alt="image"
                       data-src="/images/active.jpeg"
                        alt="alt text"
                 ></p>
<h2 id="3-通过nmcli修改"><a href="#3-通过nmcli修改" class="headerlink" title="3. 通过nmcli修改"></a>3. 通过nmcli修改</h2><h3 id="3-1-查看网卡信息"><a href="#3-1-查看网卡信息" class="headerlink" title="3.1 查看网卡信息"></a>3.1 查看网卡信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli dev status</span><br></pre></td></tr></table></figure>

<h3 id="3-2-修改网卡信息"><a href="#3-2-修改网卡信息" class="headerlink" title="3.2 修改网卡信息"></a>3.2 修改网卡信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置静态IP地址</span></span><br><span class="line">nmcli con mod ens33 ipv4.addresses 192.168.1.13/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网关</span></span><br><span class="line">nmcli con mod ens33 ipv4.gateway 192.168.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置DNS服务器</span></span><br><span class="line">nmcli con mod ens33 ipv4.dns 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置IP地址分配方式为手动</span></span><br><span class="line">nmcli con mod ens33 ipv4.method manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置DNS搜索域</span></span><br><span class="line">nmcli con mod ens33 ipv4.dns-search localdomain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置连接自动连接</span></span><br><span class="line">nmcli con mod ens33 connection.autoconnect <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-激活网卡"><a href="#3-3-激活网卡" class="headerlink" title="3.3 激活网卡"></a>3.3 激活网卡</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli con up ens33</span><br></pre></td></tr></table></figure>

<h3 id="3-4-查看网卡信息"><a href="#3-4-查看网卡信息" class="headerlink" title="3.4 查看网卡信息"></a>3.4 查看网卡信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli con show ens33</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/showens33.jpeg"
                        alt="alt text"
                 ></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于ubuntu20环境安装</title>
    <url>/2024/08/28/%E8%BF%90%E7%BB%B4/linux/%E5%9F%BA%E4%BA%8Eubuntu20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="ubuntu20安装详解"><a href="#ubuntu20安装详解" class="headerlink" title="ubuntu20安装详解"></a>ubuntu20安装详解</h3><h4 id="1-更新系统软件包"><a href="#1-更新系统软件包" class="headerlink" title="1.更新系统软件包"></a>1.更新系统软件包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure>
<h4 id="2-安装mysql服务"><a href="#2-安装mysql服务" class="headerlink" title="2.安装mysql服务"></a>2.安装mysql服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mysql-server</span><br></pre></td></tr></table></figure>
<h4 id="3-配置mysql-可以修改密码"><a href="#3-配置mysql-可以修改密码" class="headerlink" title="3.配置mysql,可以修改密码"></a>3.配置mysql,可以修改密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h4 id="4-设置密码"><a href="#4-设置密码" class="headerlink" title="4.设置密码"></a>4.设置密码</h4><ol>
<li>更改密码长度限制</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.mixed_case_count<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.number_count<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.special_char_count<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;validate_password%&#x27;</span>; #查询所有</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>; #更新密码</span><br><span class="line">FLUSH PRIVILEGES; #刷新</span><br></pre></td></tr></table></figure>
<p>MySQL的root用户被默认设置成通过auth_socket插件进行认证，而不是通过密码。<br><a class="link"   href="https://www.cnblogs.com/tomyyyyy/p/14584379.html" >修改加密方式<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="4-启动mysql"><a href="#4-启动mysql" class="headerlink" title="4.启动mysql"></a>4.启动mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql start</span><br></pre></td></tr></table></figure>
<h5 id="mysql安装完成！"><a href="#mysql安装完成！" class="headerlink" title="mysql安装完成！"></a>mysql安装完成！</h5><h3 id="删除mysql"><a href="#删除mysql" class="headerlink" title="删除mysql"></a>删除mysql</h3><h4 id="1-停止mysql服务"><a href="#1-停止mysql服务" class="headerlink" title="1.停止mysql服务"></a>1.停止mysql服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql stop</span><br></pre></td></tr></table></figure>
<h4 id="2-卸载mysql客户端服务器安装包"><a href="#2-卸载mysql客户端服务器安装包" class="headerlink" title="2.卸载mysql客户端服务器安装包"></a>2.卸载mysql客户端服务器安装包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt purge mysql-client mysql-server</span><br></pre></td></tr></table></figure>
<h4 id="3-删除mysql配置文件和数据目录"><a href="#3-删除mysql配置文件和数据目录" class="headerlink" title="3.删除mysql配置文件和数据目录"></a>3.删除mysql配置文件和数据目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>
<h4 id="4-删除残留的mysql配置和数据文件"><a href="#4-删除残留的mysql配置和数据文件" class="headerlink" title="4.删除残留的mysql配置和数据文件"></a>4.删除残留的mysql配置和数据文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>
<h4 id="5-检查mysql是否成功删除"><a href="#5-检查mysql是否成功删除" class="headerlink" title="5.检查mysql是否成功删除"></a>5.检查mysql是否成功删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure>
<h3 id="ssh连接问题"><a href="#ssh连接问题" class="headerlink" title="ssh连接问题"></a>ssh连接问题</h3><p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install openssh-server</span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop ufw</span><br></pre></td></tr></table></figure>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><ol>
<li>删除nginx<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove nginx*</span><br><span class="line"><span class="built_in">sudo</span> apt-get autoremove</span><br></pre></td></tr></table></figure></li>
<li>创建nginx目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/nginx</span><br><span class="line"><span class="built_in">cd</span> /opt/nginx </span><br></pre></td></tr></table></figure>
3.拉取nginx包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.24.0.tar.gz </span><br></pre></td></tr></table></figure>
4.解压<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.24.0.tar.gz</span><br></pre></td></tr></table></figure>
5.进入nginx-1.24.0目录进行配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.24.0</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>–prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx：指定安装目录为&#x2F;usr&#x2F;local&#x2F;nginx。在编译和安装完成后，软件将被安装到该目录下.<br>–with-http_stub_status_module：启用 HTTP Stub Status 模块。该模块是 Nginx 的一个内置模块，用于获取 Nginx 服务器的状态信息。<br>–with-http_ssl_module：启用 HTTP SSL 模块。该模块使得 Nginx 支持通过 HTTPS 提供安全的加密传输。</p>
</blockquote>
</li>
<li>make<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
正常情况的信息输出：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></li>
<li>nginx几个常见命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload            <span class="comment"># 重新载入配置文件</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen            <span class="comment"># 重启 Nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop              <span class="comment"># 停止 Nginx</span></span><br><span class="line">ps -ef | grep nginx                              <span class="comment"># 查看nginx进程</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="命令行安装vscode"><a href="#命令行安装vscode" class="headerlink" title="命令行安装vscode"></a>命令行安装vscode</h3><ul>
<li>添加源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;echo &quot;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>更新包缓存，然后安装code<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install code</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="安装arm64-版vscode"><a href="#安装arm64-版vscode" class="headerlink" title="安装arm64 版vscode"></a>安装arm64 版vscode</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install software-properties-common apt-transport-https wget</span><br><span class="line">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg</span><br><span class="line"><span class="built_in">sudo</span> install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/</span><br><span class="line"><span class="built_in">rm</span> packages.microsoft.gpg</span><br><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;echo &quot;deb [arch=arm64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install code</span><br></pre></td></tr></table></figure>

<h3 id="安装Golang"><a href="#安装Golang" class="headerlink" title="安装Golang"></a>安装Golang</h3><ol>
<li>以1.20.2版本为例<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://golang.google.cn/dl/go1.20.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>解压文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf go1.20.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>配置环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># /usr/local/go/bin 为go安装目录的bin目录,系统所有账户可以使用bin下的命令进行执行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"><span class="comment"># /home/go/go 为go工作空间的目录,可自行修改</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/go/go </span><br><span class="line"><span class="comment"># /usr/local/go 为go的安装目录</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
<li>GO设置代理环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka</title>
    <url>/2024/10/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/kafka/kafka/</url>
    <content><![CDATA[<h2 id="Kafka-一键部署"><a href="#Kafka-一键部署" class="headerlink" title="Kafka 一键部署"></a>Kafka 一键部署</h2><h3 id="docker-compose-部署kafka-可视化界面"><a href="#docker-compose-部署kafka-可视化界面" class="headerlink" title="docker-compose 部署kafka+可视化界面"></a>docker-compose 部署kafka+可视化界面</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bitnami/zookeeper</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ALLOW_ANONYMOUS_LOGIN:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bitnami/kafka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># KRaft settings</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_NODE_ID=0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_PROCESS_ROLES=controller,broker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093</span></span><br><span class="line">      <span class="comment"># Listeners</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务</category>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
</search>
